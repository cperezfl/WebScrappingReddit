id_post,titulo_post,fecha_post,autor_post,URL,numero_comentarios,texto_post,tiene_texto,score
ctkypf,"I'm 100% self taught, landed my first job! My experience!",2019-08-21 18:34:15,JLaurus,https://www.reddit.com/r/learnpython/comments/ctkypf/im_100_self_taught_landed_my_first_job_my/,379,"Hi all, 

Firstly this is going to be a long post to hopefully help people genuinely looking to commit to becoming a developer by sharing my story of how I went from absolutely zero knowledge of programming (as you can see by my post history) to landing my first python developer role.

Location: UK

To kick things off about a year ago I wasnt happy with the job(s) I was doing, long hours, very low pay, so I came across python by chance. Yes I admit the money was what attracted me alone to start off with as I am quite a money motivated person. Ofcourse I knew and still know it will be a long journey to reach the salaries offered but I have managed to finally get my first step on the ladder by landing a job as a python developer. Enough of the story, lets get on with it.

I will list all of the youtube playlists and channels I watched over and over again. 
Bear in mind whilst reading these books I did watch a lot of videos in between reading aswell!
What books I read, in order. 

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

First book:

Python Crash Course: A Hands-On, Project-Based Introduction to Programming - Eric Matthes
Review: Great first book, my advice, skip the game and django project and just do the matplotlib project for now (come back to django later down the line once you understand the HTTP protocol and how requests work)

10/10 recommend

p.s. I know a lot of people recommend reading Automate the boring stuff and I regret not reading it after this one!

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

Book 2:

Learning python - Mark Lutz
Review: Very good book for getting a grasp on python fundamentals. I would not of read this without first reading Python crash course. You will need to supplement this book with looking up videos on youtube for a deeper understanding as this book is very dry to read and long! 1400 pages! I found a pdf format online for free to read. Don't need to buy it.

10/10 recommend (supplement with videos)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

Book 3:

Programming Python - Mark Lutz
Review: Very good book. I would not read this book word for word. Skim through the book to get an understanding. I would ignore following the projects in the book. Don't spend too much time on it. (Ignore tkinter chapters)

6/10 = Would I read again? Its worth having on your computer to refer to IMO. - You can find this online for free in pdf. 1300 pages.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

From here on I pretty much decided after researching jobs and where the demand was for python developers, that I was going to learn django and learn the web based side of things from here on out.

Most of this from here on is django specific so if you want to learn python for data science or another area you may want to use this as a template and just change the books and videos to meet your needs. O'reilly has a bunch of books on python, there are also so many videos on youtube to help aswell.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Before you jump into django / flask wouldn't it be best to learn how the internet works first? Learn from my mistakes and learn this first before django!

https://www.youtube.com/watch?v=e4S8zfLdLgQ&list=PLLy4MeON3hKCtMvu4yA-DKRG_gsgRR1jM&index=45&t=0s
I believe from memory there is also a part 2.

Learn what the http protocol is, learn how requests are sent to a server, learn the difference between GET, POST, PUT, DELETE.

Learnt that? Great, lets move on.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Resource - https://wsvincent.com/

Book 4:

Django for beginners - WS Vincent
Review: Absolutely great first book for learning django! I would highly reccomend also following https://www.djangoproject.com/start/ alongside this book to get you started.

10/10 - This is a must read imo.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Book 5:

I keep hearing the words API, and REST, wtf are they?

Have no fear my friend!
Watch this first - https://www.youtube.com/watch?v=Q-BpqyOT3a8

REST APIs with Django - WS Vincent
Review: Great book to learn how to use Django REST API and how it works. 
8/10 would recommend, however it isnt a very big book and I felt the book wasn't great value for money, I felt at this point I was starting to ask questions in my own mind when reading code on how things could be implemented and expanded on and I felt this book could of had a bit more detail rather than just pointing to external resources. 
However this book does get you going on how to use django REST and sets you up nicely to learn more advanced material.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

At this point I was starting to consider when I would be ready to start applying to jobs. 
Start jotting down ideas for any small projects you want to make, for myself it was an REST API app showing CRUD functionality, and a working django website.

I learned basic HTML and CSS to have a better understanding of how templates work and how objects / data is sent from the backend and displayed in the front end and vice versa.

HTML/CSS series - https://www.youtube.com/playlist?list=PL0eyrZgxdwhwNC5ppZo_dYGVjerQY3xYU

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

You're still here? Congrats!

I had done a lot of reading and hearing about data structures and algorithms and how you needed a computer science degree to learn it. 

Book 6 - Cracking the coding interview - Gayle Laakmann McDowell
Review: What to say about this book? Wow, this book was a massive learning curve for me! Considering most days I was spending 6-8 hours committed to learning, some days I would only manage to get through half a page. This book took me 6-8 weeks to go through from memory. All of the examples are in Java so I had to look up corresponding tests in python and reverse engineer to see what was going on.

10/10 This is an absolute must read for anyone. Buy it, read it, understand it, stick it on your shelf, read it again in the future.

Videos to supplement - https://www.udacity.com/course/data-structures-and-algorithms-in-python--ud513
Cracking the coding interview book also has a corresponding video course on youtube by the author, this helps a lot!

https://runestone.academy/runestone/books/published/pythonds/index.html - this is also a fantastic resource in python!

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Ahh yes, I think I'm ready to apply for roles! Slow down there young spud! We are not finished!

Test Driven Development - Harry Percival

https://www.obeythetestinggoat.com/book/bibliography.html#seceng

Review: MUST READ, MUST READ. No excuses, get it done, go through it twice, follow the projects, every single interview will involve questions about TDD!

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

From here I wanted to have a better understanding of the internet. So I read:

Computer networking: A top down approach

https://github.com/arasty/books/blob/master/0.Computer%20Networking%20-%20A%20Top-Down%20Approach%20(6th%20Edition).pdf

Review: If you do want a better understanding of the internet / networking then skim through this book. As soon as you understand http protocol, TCP/IP, then close the book and move on.

6/10 - Not a must read, but nice to know!

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

From here on I didn't read any other books. Most of my time was spent creating my projects to put in a portfolio, watching more videos, getting confused and solving my own problems by building a site using django and learning along the way, and reading the official django documentation.

To keep it short and sweet from here on out I am just going to list the youtubers who truly helped me out, technically and also keeping my motivations high!

https://www.youtube.com/channel/UCCezIgC97PvUuR4_gbFUs5g - Corey Schafer - 10/10, not going to list any other independent python tutorials, this guy is all you need!
https://www.youtube.com/channel/UC8butISFwT-Wl7EV0hUK0BQ - FreeCodeCamp - Fantastic resource, so much on here, only watch what you need to learn, dont get caught up in trying to learn everything the channel has to offer.

The two channels above are all I would recommend for video resources. Freecodecamp also does a good SQL for beginners which is worth watching for any developer.

Other channels 10/10 worth checking out

https://www.youtube.com/channel/UCZ9qFEC82qM6Pk-54Q4TVWA - Andy Sterkowitz
https://www.youtube.com/channel/UCu1xbgCV5o48h_BYCQD7KJg - Chris Sean (my personal favorite)

Traversymedia and thenewboston are both great channels as well for a slightly different way of explaining things if you truly do get stuck.

Interviews:

So after I made a few projects and uploaded them to my github, I put the github link on my CV aswell. I made a linkedin profile aswell.

You may experience a bucket load of recruiters contacting you if you have set up a new linkedin.

My tips for dealing with recruiters (based on my own mistakes):

- Always tell them what you are looking for, DO NOT let them push you forward for a role or arrange interviews on your behalf for roles you are not comfortable with. 
- If they are aggressive and abusive (yes I have had this), simply hang up the phone, block their number and move on. 
- Tell them ""I am looking for a junior python role using django ONLY or similar framework"" (ofcourse you can edit this to your area of knowledge)
- I had so many phone calls I stopped accepting calls as over 50% of calls were roles that were too senior for me or calls about roles I had already applied/spoken about. I set a voicemail up telling them to email me and I will get back to them. Take this advice please, it will save you repeating yourself 20 times a day.
- You have had an email about a job role? They will usually want to speak to you on the phone first, however I learned to reply along the lines of ""please understand I get contacted frequently by many recruiters, please can you send over a job spec for me to look over prior to arranging a call"".
This works majority of the time, if they don't reply, trust me you haven't lost out!
- They may ask you on the phone ""Where have you already applied for?"" Be confident and simply reply ""I would rather not say"", hold your ground, its your own business, not theirs, if they have a role for a company to put to you then lets hear it, be respectful and polite but don't let them push you around, many will try to!
- They have told you on the phone about a company you have already applied for? ""Sorry I am already engaged with that company"" they will press you on this ""With who? How long ago? What stage are you on?"" Once again, simply say ""I would rather not say"" I have never had a recruiter push me after I have responded that way.
- Salary ""What are your salary expectations?"" ""What salary are you on at the moment?"" My advice? Simply reply ""Well, what does the role pay?"" Its as simple as that, if a company cant be open and honest about what the salary range is for a junior level role are they even worth wasting your time on? Your current salary is nobodies business, your answer: ""I would rather not say""

If you apply directly to a company through their own website / indeed or any similar jobsite they may ask for salary expectations. I did put in salary expectations for my current job when I applied directly. So just know when to do it and when not to. Applying directly with a good cover letter has most of the time netted me a positive response.

If you have got this far I have no doubt you can become a developer. Yes I am only junior. It has been a long road for me and the learning curve has been insane. I have gone for weeks on end sometimes thinking I am not getting anywhere and wondering when the end will come. You are not alone. Its a small sacrifice in the long term if you truly want to make this your career.

Interviews:

If you manage to land a phone call and/or a face to face interview here are my tips:

- Do not put anything on your CV you do not know in detail. It is easy to expose in a technical interview. 99% of the time questions will be about your CV.
- What do you know about the company? Why do you want to work here? Do your research, I usually tried to memorize 2-3 things in reasonable detail about the company, it shows a good interest in them.
Go on their website, read what they do, learn it, memorize, think ""Why would I want to work here?"" answer that with a good answer and you should be good to go.
- Dress smart! Yes they may wear tshirt and jeans to work. You do not work there yet. Business dress all the time! Shirt, tie, suit if you can! (EDIT: I am in the UK, business dress based on my own work experience in the UK is standard for most jobs, if you are unsure of dress code ask your potential employer prior to interview as I don't want to mislead anyone)
- Be friendly, polite, act keen (not desperate)
- ""Would you like a drink of coffee/water before we start"" the answer to this is YES PLEASE! You will need that water to sip on when your mouth goes dry! haha! I've been there!
- Trouble answering a question? Relax, pause, and just say ""let me think one moment"", if you don't know the answer, just say ""I don't know the answer"" its good to be honest, I have always had a good response by being honest when I have not known the answer! 

I hope this post will help you if you are struggling to find a path. I wish you all the best and good luck!

TLDR: If you want to change your life. Read it.",Sí,3571
xy1swx,I solved a real life problem with python for the 1st time and I feel like a wizard,2022-10-07 15:17:28,ELIMINADO,https://www.reddit.com/r/learnpython/comments/xy1swx/i_solved_a_real_life_problem_with_python_for_the/,202,"Okay, this is probably going to sound super dumb, but today I'm putting the finishing touches on a program that downloads a data file for me (into a folder of my choosing!!! this part tripped me up for a while) and renames it according to today's date and I feel like a goddamn SORCERESS.

I showed it to my boyfriend, and then I felt kinda sheepish, because like, okay, it's just a file but .... it's so incredible for me to just see it working!! I know it sounds simple, but I had to navigate around so many barriers to make it work, and now that I've mastered this, so many other amazing projects feel accessible and understandable to me.

I'm just so happy! It feels like all my hard work teaching myself this stuff has paid off. Just wanted to share with you guys. :)

**EDIT:** OMG, I am overwhelmed by the support of this community!! Thank you all so much for the kind words. If y'all want to take a look at my code, I pasted it here: [https://gist.github.com/POPULARWEB6231/9da87879de572b13e715a6c901355400](https://gist.github.com/POPULARWEB6231/9da87879de572b13e715a6c901355400) Thanks again for the encouragement, guys!",Sí,2658
bz3rxv,"The online course for ""Automate the Boring Stuff with Python"" is free to sign up this week.",2019-06-10 21:44:53,AlSweigart,https://www.reddit.com/r/learnpython/comments/bz3rxv/the_online_course_for_automate_the_boring_stuff/,238,"School's out, but that doesn't mean you have to stop learning. The online video course from the author of ""Automate the Boring Stuff with Python"" (that's me) is free to sign up for this week. This sign up will give you life time access to the course. Just use the following link:

https://www.udemy.com/automate/?couponCode=SCHOOLS_OUT2

This course is made for complete beginners who have no experience programming. It's ""programming for office workers"" because it skips computer science and teaches you how to do practical tasks: web scraping, updating Excel spreadsheets, parsing PDFs and Word documents, sending out automated email and text notifications, controlling the mouse and keyboard, and more. If you're an experienced programming, you can skip the first half (which covers basic programming concepts) and directly learn about several useful modules for Python.

(This code expires on June14th. Previously I'd give out codes to folks who asked me after the expiration, but it turns into a logistical headache to keep making coupons each time someone asked, so the deadline is firm.)

If you'd like to support me by using an affiliate code (or encourage yourself to finish the course since you put money down on it), you can also use one of these links to pay what you like: (MODS: if this is too spammy, I can take these links down) (EDIT: Udemy changed their promotion scheme. You'll have to use this new LOWESTPRICE code, which I've set to the lowest allowed. It's $14 now, but that might change in the future.)

* https://www.udemy.com/course/automate/?couponCode=LOWESTPRICE

This online course covers most, but not quite everything, in the Automate the Boring Stuff with Python book, which is freely available online under a Creative Commons license. You can read it at: https://automatetheboringstuff.com/ (The book has a few more examples, and also covers programmatically creating/editing image files, for example).

If you like the course (or don't like it), please remember to rate it.

Good luck on your programming journey!",Sí,2312
kv61rj,"As a Gift to the Community, I'm Making my Python Book Free for 72 hours!",2021-01-11 16:28:01,driscollis,https://www.reddit.com/r/learnpython/comments/kv61rj/as_a_gift_to_the_community_im_making_my_python/,276,"**Python 101 2nd Edition** is the latest version of Python 101. This book is meant to help you learn Python and then go beyond the basics. I've always felt that a beginner's book should teach more than syntax. If you'd like to try out Python 101, you can do so for **FREE** for the next 72 hours by using the following link: [https://leanpub.com/py101/c/mvp2021](https://leanpub.com/py101/c/mvp2021)

If you have a Gumroad account, you can get the book here ([https://gumroad.com/l/pypy101](https://gumroad.com/l/pypy101)) for free using this coupon: **mvp2021**

The last time I made Python 101 free for 3 days, I got 30-40,000 new readers. Let's see if we can beat that!

The second edition of **Python 101** is completely rewritten from the ground up. In this book, you will learn the Python programming language and lots more.

This book is split up into four sections:

1. The Python Language
2. Intermediate Topics
3. Creating Sample Applications
4. Distributing Your Code

Check out [Leanpub](https://leanpub.com/py101/c/mvp2021) or [Gumroad](https://gumroad.com/l/pypy101) for full details on what all is in the book.

I have several other Python books, so if you like Python 101, you should check out my other works:

* [Pillow: Image Processing with Python](https://www.kickstarter.com/projects/driscollis/image-processing-with-python)
* [Creating GUI Applications with wxPython](https://leanpub.com/creatingapplicationswithwxpython/)
* [Jupyter Notebook 101](https://leanpub.com/jupyternotebook101/)
* [ReportLab: PDF Processing with Python](https://leanpub.com/reportlab)
* [Python 201: Intermediate Python](https://leanpub.com/python201)

Or just check out my [Blog for Python tutorials](https://www.blog.pythonlibrary.org/).  If you like to keep up with Python, you can follow me on [Twitter](https://twitter.com/driscollis). You can also [buy me a coffee](https://www.buymeacoffee.com/mousevspython)",Sí,2163
gbp0a1,"""Automate the Boring Stuff with Python"" Udemy course free to sign up until May 7th.",2020-05-01 19:49:35,AlSweigart,https://www.reddit.com/r/learnpython/comments/gbp0a1/automate_the_boring_stuff_with_python_udemy/,165,"https://inventwithpython.com/automateudemy (This link will automatically redirect you to the latest discount code.)

You can also click this link or manually enter the code: MAY2020FREE (on Monday the code changes to MAY2020FREE2)

https://www.udemy.com/course/automate/?couponCode=MAY2020FREE

This promo code works until May 7th (I can't extend it past that). Sometimes it takes 30 minutes or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later.

Udemy has changed their coupon policies, and I'm now only allowed to make 3 coupon codes each month with several restrictions. Hence why each code only lasts 3 days. **I won't be able to make codes after this period**, but I will be making free codes next month. [Meanwhile, the first 15 of the course's 50 videos are free on YouTube.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

You can also purchase the course at a discount using my code MAY2020 or JUN2020 (or whatever month/year it is) or clicking https://inventwithpython.com/automateudemy to redirect to the latest discount code. I have to manually renew this each month (until I get that automation script done). And the cheapest I can offer the course is about $14 to $16. (Meanwhile, this lets Udemy undercut my discount by offering it for $12, which means I don't get the credit for referral signups. Blerg.)

Frequently Asked Questions:

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is now available online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. Expect that update to happen in mid- or late-2020. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with.",Sí,2069
1h8ljhc,Python is a godsend for work,2024-12-07 05:26:41,MyManagerIsAnIdiot,https://www.reddit.com/r/learnpython/comments/1h8ljhc/python_is_a_godsend_for_work/,158,"I wanted to just thank the community for everything here.  Its a real tool to have in your arsenal when things get tough.  Today was the first day I put it into use and it was all due to lurking around this subreddit from people helping out others.   

  


My manger felt like pissing me off at work right before the weekend today giving me a huge workload come 4PM.  I was tasked to combine a lot of information with multiple excel sheets that were not formatted alike and he wanted a report by 5PM.  I guess he was thinking I would be manually doing this by opening up each sheet and copying and pasting the information together.  Little did he know I've been reading about python and learning on the side.  The pandas library immediately sprung into my head saying this is going to be easy - dump the raw data frame clean it and merge it together afterwards.  I was not confident writing my own code but poking around with some help from chat gpt plus a bit of self knowledge i was able to finish it in 20 minutes.  



Funniest thing was after I finished, I sat there pretending to go over emails and he came by asking ""Are you going to be able to provide me the report?  Looks like you will have to stay late to finish this"" with his smug ass look on his face.  He left early and I sent him what he needed right after he was gone.  ",Sí,2064
he7vpy,"After 5 years of learning Python as a hobby, yesterday I did my first contribution to an open source project!",2020-06-23 04:24:29,marcovirtual,https://www.reddit.com/r/learnpython/comments/he7vpy/after_5_years_of_learning_python_as_a_hobby/,60,"About 5 years ago I started to study programming on and off as a hobby. I love reading articles, posts and books about Python and AutoHotKey, and during these years I have done some webscraping projects and scripts for myself. Nothing too complicated, just enough code to do what I needed, and that's why I still consider myself a newbie.

As someone who uses lots of free open-source software, I always wondered if someday I would find an open source project I could actually contribute to. It could be anything, but finding something is just so difficult! Everywhere I looked, all the projects were either too complicated for a hobbyist programmer like me or used a programming language I do not know.

But this weekend I got lucky. As I was trying some packages (or plugins) for my favorite text editor (Sublime Text), I noticed that [**one of them**](https://github.com/akshaykumar90/sublime-font-cycler), which I use extensively, could be improved by adding a very simple feature.

Without thinking too much about it, I opened an issue on GitHub asking the plugin author if he could implement it. But then I remembered that Sublime Text packages are coded in Python and decided to check the `.py` file by myself.

I usually have trouble reading other people's code, but to my surprise this code was simple enough that I could understand it! And even better, the feature that I wanted to see implemented could be added with just two lines of code!

So that's exactly what I did! After that, I looked for some git tutorials to learn how to make a pull request (I had never used git before), double checked that my code was OK, updated the project `readme.md` file and commited the changes.

Fortunately, some hours after that the plugin author accepted the changes I proposed and they were uploaded to all the package users. Mission accomplished! 

So, fellow hobbyist Python programmers, don't stop looking for a project you can contribute to. One day you may find it. Even if it takes 5 years 😂",Sí,1982
p1cgeu,"Just saved my company like $40 Grand a Year and I have no one else in my life that codes to tell, apart from my wife of course",2021-08-09 22:47:47,rawrtherapybackup,https://www.reddit.com/r/learnpython/comments/p1cgeu/just_saved_my_company_like_40_grand_a_year_and_i/,184,"To keep things simple, I figured out a way to Map a bunch of MP4 files to Excel files and create an excel file that is imported back into our main software

With the help of some of you guys here, I wrote this:

    from pathlib import Path
    import glob
 
    BASE_DIR = Path(r""C:\Folder"")
    files = BASE_DIR.glob(""*.mp4"")


    for f in files:
        print(f)
        new_name = f.stem.split(""_"")[1]
        target = BASE_DIR / f""{new_name}.video""
        f.rename(target)

What happens is this script basically grabs whatever name convention a video file has and shrinks it to a 9 digit number that can then be mapped to an excel file using a macro i also created

we were apparently paying a company like $40 grand a year to do this

the whole premise of this is export data from software --> do stuff to it --> import it back into software to have it mapped directly to the video file

My director was so surprised i actually pulled this off that he wants to find every competitor of this specific company and sell them this process (he doesnt know what goes into it yet, just knows it works)

just wanted to tell someone

first big real achievement with Python for me :)

BIG SHOUTOUT to u/ireadyourmedrecord

my company owes you money lol

Update: I WILL be asking for a raise soon since i just crossed my yearly for this job, possibly a bonus as well. No one has access to this code since it live in a jupyter notebook and isnt automated yet on any local computer.",Sí,1920
guu0nq,"""Automate the Boring Stuff with Python"" online course is free to sign up for the next few days with code JUN2020FREE",2020-06-01 21:57:01,AlSweigart,https://www.reddit.com/r/learnpython/comments/guu0nq/automate_the_boring_stuff_with_python_online/,127,"EDIT: Whoops, sorry, I've been... busy... the last few days. I just made the JUN2020FREE2 code, but it might take an hour or so to take effect. They'll show you the $16 ""discount"" using the link until then, just hold off a bit and check later. JUN2020FREE2 should work until 06/07/2020 around 2pm Pacific.

https://inventwithpython.com/automateudemy (This link will automatically redirect you to the latest discount code.)

You can also click this link or manually enter the code: JUN2020FREE (on Monday the code changes to JUN2020FREE2)

https://www.udemy.com/course/automate/?couponCode=JUN2020FREE2

This promo code works until June 7th (I can't extend it past that). Sometimes it takes 30 minutes or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later.

Udemy has changed their coupon policies, and I'm now only allowed to make 3 coupon codes each month with several restrictions. Hence why each code only lasts 3 days. **I won't be able to make codes after this period**, but I will be making free codes next month. [Meanwhile, the first 15 of the course's 50 videos are free on YouTube.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

You can also purchase the course at a discount using my code MAY2020 or JUN2020 (or whatever month/year it is) or clicking https://inventwithpython.com/automateudemy to redirect to the latest discount code. I have to manually renew this each month (until I get that automation script done). And the cheapest I can offer the course is about $14 to $16. (Meanwhile, this lets Udemy undercut my discount by offering it for $12, which means I don't get the credit for referral signups. Blerg.)

Frequently Asked Questions:

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is now available online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. Expect that update to happen in mid- or late-2020. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with.",Sí,1831
djqm6v,Beginner's Python Cheat Sheets (updated),2019-10-18 17:16:43,ehmatthes,https://www.reddit.com/r/learnpython/comments/djqm6v/beginners_python_cheat_sheets_updated/,128,"Hi everyone! A few years ago I made a set of cheat sheets to go along with the first edition of Python Crash Course. I recently finished updating the cheat sheets to match the changes that were made to the second edition of the book. These sheets aim to remind you of Python's syntax, but they also include brief explanations of the concepts behind the syntax as well. These are all free to download, and they are not specific to the book - they should be helpful to many people, regardless of what your primary learning resource is. 

The first sheet provides an overview of many basic concepts in Python. Individual sheets cover lists, dictionaries, if statements and while loops, functions,  classes, and more. There are also library-specific cheat sheets for Pygame, Matplotlib, Plotly, and Django. You can download individual sheets, download a pdf that includes all the sheets in one document, or download a zip file that includes each sheet in a separate pdf file. Here's an [overview of all the sheets](https://ehmatthes.github.io/pcc_2e/cheat_sheets/cheat_sheets/), with links to download whichever version is most appropriate for you.

Cheat sheets have been really helpful to me at times when learning a new language or framework, and I continue to use the library-focused sheets when starting new projects. I hope these are useful to many of you as well.",Sí,1776
ft8tv2,Automate the Boring Stuff with Python Udemy course free to sign up until April 7th.,2020-04-01 21:15:12,AlSweigart,https://www.reddit.com/r/learnpython/comments/ft8tv2/automate_the_boring_stuff_with_python_udemy/,146,"https://inventwithpython.com/automateudemy (This link will automatically redirect you to the latest discount code.)

[(EDIT: The HTML book is free online, but you can get the PDF/Kindle ebook of Automate the Boring Stuff with Python in this week's Humble Bundle in support of cornavirus relief (Direct Relief, International Rescue Committee, Doctors Without Borders, Partners In Health)](https://www.humblebundle.com/conquer-covid19-bundle)

You can also click this link or manually enter the code: APR2020FREE (on Saturday the code changes to APR2020FREE2)

https://www.udemy.com/course/automate/?couponCode=APR2020FREE

This promo code works until April 7th (I can't extend it past that). Sometimes it takes 30 minutes or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later.

Udemy has changed their coupon policies, and I'm now only allowed to make 3 coupon codes each month with several restrictions. Hence why each code only lasts 3 days. **I won't be able to make codes after this period**, but I will be making free codes next month.

You can also purchase the course at a discount using my code APR2020 or MAY2020 (or whatever month/year it is) or clicking https://inventwithpython.com/automateudemy to redirect to the latest discount code. I have to manually renew this each month (until I get that automation script done). And the cheapest I can offer the course is about $14 to $16. (Meanwhile, this lets Udemy undercut my discount by offering it for $12, which means I don't get the credit for referral signups. Blerg.)

Frequently Asked Questions:

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is now available online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. Expect that update to happen in mid- or late-2020. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with.",Sí,1752
icpt8d,I programmed someone out of a job and now I feel bad,2020-08-19 15:29:06,Socrato,https://www.reddit.com/r/learnpython/comments/icpt8d/i_programmed_someone_out_of_a_job_and_now_i_feel/,430,"We have positions at my job whose duty was to do data entry for our imaging system - they get hundreds of files every day and manually type in the identifier info for the imaging system so the docs can be stored and retrieved.

I knew our system had an automated data entry method, but it wasn't being used. It mattered because the department I lead is reliant on them entering those files in a timely manner. This is our busiest time of year and when I asked them if they could go faster they told me there was nothing they could do.

I write **a lot** of python, so I knew this was achievable. At first I just automated the part that affected me. It was easy enough, the files are standardized with the most important ID in the filename, so it was just a matter of parsing and building the ""index"" file that is necessary for import. I added some bells and whistles that I knew would help too, got pretty deep into Image Processing and OCR. PIL, OpenCV2, and Tesseract are now very familiar to me which was a lot of fun to learn. It's incredible the resources that are out there, and the computer vision field is so mature that it was a bit shocking how accessible it was.

But then the administration found out and wanted it applied elsewhere.... 

I found out today they're eliminating one of the jobs now that a lot of the process is automated. They just don't need so many people doing it anymore. 

Honestly it feels like shit, she is a nice person and I know this is going to crush her. She hasn't heard yet, but her coworker and I talked about it. It was only a matter of time before it happened, though he wasn't expecting it to be so soon. But with COVID19 they're looking for ways to trim fat and I guess this was an easy salary to eliminate. 

Feels bad man, I mentioned to her I'd be happy to help her learn Python but she wasn't interested... Oh well I guess. 

Yay python? :(

edit: cleaned some shit up",Sí,1680
i1w07u,"""Automate the Boring Stuff with Python"" online course is free to sign up for the next few days with code",2020-08-01 17:30:18,AlSweigart,https://www.reddit.com/r/learnpython/comments/i1w07u/automate_the_boring_stuff_with_python_online/,137,"https://inventwithpython.com/automateudemy (This link will automatically redirect you to the latest discount code.)

You can also click this link or manually enter the code: COPSHOTMEINPORTLAND2

https://www.udemy.com/course/automate/?couponCode=COPSHOTMEINPORTLAND2

This promo code works until August 4th (I can't extend it past that). Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later. I'll change it to COPSHOTMEINPORTLAND2 on the 4th.

Udemy has changed their coupon policies, and I'm now only allowed to make 3 coupon codes each month with several restrictions. Hence why each code only lasts 3 days. **I won't be able to make codes after this period**, but I will be making free codes next month. [Meanwhile, the first 15 of the course's 50 videos are free on YouTube.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

You can also purchase the course at a discount using my code COPSHOTMEINPORTLAND2 or clicking https://inventwithpython.com/automateudemy to redirect to the latest discount code. I have to manually renew this each month (until I get that automation script done). And the cheapest I can offer the course is about $16 to $18. (Meanwhile, this lets Udemy undercut my discount by offering it for $12, and I don't get the credit for those referral signups. Blerg.)

**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is now available online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. Expect that update to happen in mid- or late-2020. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with.d",Sí,1677
eia22b,Second edition of Automate the Boring Stuff with Python is now free online.,2019-12-31 22:44:05,AlSweigart,https://www.reddit.com/r/learnpython/comments/eia22b/second_edition_of_automate_the_boring_stuff_with/,89,"A list of the new sections is here: https://inventwithpython.com/blog/2019/12/31/reading-guide-to-automate-the-boring-stuff-second-edition-for-readers-of-the-first-edition/

The table of contents and full book for the second edition is here: https://automatetheboringstuff.com/2e/",Sí,1608
jzqcve,[Update/Final Product] My dad is a programmer and I want to hand-sew a simple program as a gift to him.,2020-11-23 20:59:09,hydroscopick,https://www.reddit.com/r/learnpython/comments/jzqcve/updatefinal_product_my_dad_is_a_programmer_and_i/,68,"A few days ago, I requested help with a couple lines of code for an embroidery project as a gift to my dad, a computer science professor. You guys offered me a lot of feedback and also requested to see the final product. Welp, here it is! ([link to imgur album](http://imgur.com/gallery/ta90l8K)) It's not perfect (looking at you, wonky edges) but it *is* made with love. I had only done a tiny bit of coding before this project but I can confidently say this is the longest I've ever spent on twelve lines of code.

Thank you everyone for the help! I received a lot of great suggestions after I had already cut the fabric and started stitching. Even if I didn't use your suggestion, I still appreciate it.

I won't be able to see his reaction in person since we're spending Christmas apart for the first time in my life due to the pandemic. It makes me sad but it's the right thing to do. He's a great dad and I want him to stick around for a while so Google Hangouts will be good enough for us this year.

Thanks again and stay safe.",Sí,1521
gdzu6e,Holy heck I'm addicted.,2020-05-05 15:29:29,LittleGhettoGospel,https://www.reddit.com/r/learnpython/comments/gdzu6e/holy_heck_im_addicted/,177,"So I work with a financial firm. We had to go back and get quarterly statements from December for all accounts. Its over 350 accounts. Not all the statements are similar - some are a couple of pages and others are 15-20 pages. The company that generates the statements sent us a PDF of ALL statements. That bad boy was over 3800 pages long. 

So as we are doing these reviews, we fill out review paperwork, and then we have to go through this HUGE pdf to find the corresponding account. When I search for their name, it literally took 20 seconds or more to search the whole document. Then, I have to print the PDF and just save the respective pages, then save with the name of the account. 

Last night I thought I'd try a PDF parser. I've done some general Python, but nothing like this. I used PyPDF2. 

**I'm going to go through my thought process, but I can't really post code because it's honestly a mess and I don't know if my boss would appreciate it. At the end I'll pose an issue I had. And state what I learned** 

I had to find a way to find where the first page of each statement was. Guess what? They all have ""Page 1 of"", so I parsed each page and had it return every page in which that string exists. Then, I had to find how many pages were in each statement, since the page number varies. So if index 0 and index 16 contained that string, then I knew 0-15 were one statement. 

Now I'm able to split it, but I needed to save it with the filename as the account number. Heck yes, the account number is listed on each first page. And the account number begins with the same three characters. 

I iterated (is that the phrase) through the document. I grabbed the first page of each statement and set it as the first page. Then I got the index of the next page that has Page 1, and just subtracted 1. Then, I searched for the first three characters of the account number, and when it found it, return the index, then grab the following 7 characters which is the complete account number. Then it wrote the files!

**Issue** so when I was actually splitting the documents, it kept running out of memory. I was using Visual Studio Code. I have 16gb ram, and task manager showed it hitting 2.5gb before the process was killed because of memory. I had to go into the loop and change the beginning index ever 25-30 PDFs generated. I was trying to find a way to allocate more memory, but I couldn't find a way. Any help is appreciated. If the code for the loop helps, I may can post that part. 

**What I learned** this was incredible. While it was obviously a challenge (it took 20 minutes to pip install PyPDF2 and then get it to not throw an error in Visual Studio(Windows 10)) it's amazing to fathom I was able to actually do it. It took 5 hours (the SO was shocked that I was up until 3am). But I couldn't stop. The loop was pissing my off because it kept generating the same statement. I am not sure what really fixed it, because I made a couple of changes at one point and it worked. 

My boss is freaking beaming right now. I'm beaming. He called me in to his office 20 minutes after I showed him the final product. He asked if I'd be willing to take on some more of this automation during work hours. He'd take off some of my workload, and also give me a 15% raise. 

It's been a ramble but if you made it this far then you obviously are resilient enough to be a programmer.

Edit: I want to add this. For those of you like me. Even if you're NEWER than me. You can learn the language, watch videos, do practice problems, but it takes a tremendous about of resiliency and patience to produce real-world and practical applications. It took a lot to learn what's very simple for others. I probably looked at 50 web pages trying to find an explanation that made sense. I wanted to give up a couple of times but I really wanted to come in to work today with a finished product.So I work with a financial firm. We had to go back and get quarterly statements from December for all accounts. Its over 350 accounts. Not all the statements are similar - some are a couple of pages and others are 15-20 pages. The company that generates the statements sent us a PDF of ALL statements. That bad boy was over 3800 pages long. 

Edit2: I am in shock. This isn't in writing, but apparently the raise is verbally approved, but they are working to get paperwork drawn up. Right now, and this is all verbal, I'll get the raise. I just got an email from our IT guy that he was told to find a ""top of the line programming computer"" as my boss apparently put it. So when it's formal, I'll be getting a Dell XPS 15 (i9, 64gb ram, 1TB), dock, dual monitors. He (IT) said that it's probably way overkill, but the boss said to get it anyways. Boss asked if I thought about this full time. I was honestly so nervous (and still am) I just said ""heck yeah Dave"". He said all ""the little programs you make"" are property of the company, and they are not to leave the laptop. He also apologized for being so resistant in the past about implementing various technology that I had recommended. He then asked how I can learn about more stuff if I ""need to go to college or take classes"". I told him I'd love to go to college for it, but it's not really my personal budget and that there are some great online programs. He just said, ""hmm well find and online program and get info on pricing and timeline; let get this official and go from there"".

Edited to remove the double text.",Sí,1502
byfigg,I'm super annoyed and taking it out on learnpython,2019-06-09 02:17:26,SpergLordMcFappyPant,https://www.reddit.com/r/learnpython/comments/byfigg/im_super_annoyed_and_taking_it_out_on_learnpython/,247,"I've been a senior level software engineer for over 10 years. I have a ton of experience with multiple languages. I've been doing a lot of hard stuff for a very long time. I asked a twitter question to a pretty well-known person in the area I work in the other day, and he got really huffy, assumed that I had no idea what I was doing, told me to not ever do what I was asking about, and told me to go find a different job because I'm not competent to do the one I'm at right now. Never even asked why I was trying to do things a certain way, and just assumed that I was a n00b causing trouble.

&#x200B;

It made me really fucking angry. And it also made me think about how we deal with people we don't know, make assumptions based on questions, and tend to talk shit to people who aren't a part of our in-circle. About how things that people have done for a long time tend to get easier and how we forget how much we didn't know when we were getting started.

&#x200B;

So, I'm taking all my anger at that person out on this sub. I'm going to spend all day tomorrow answering all the questions I possibly can on learnpython in the kindest way I can and with a mentoring attitude where I'll try to understand where you're coming from, what you're trying to achieve, what might be the best way to get to it, and maybe a little extra handholding along the way.

&#x200B;

Be the change you want to see, right?

&#x200B;

Ask me anything about python and anything related to python. I'll spend 12 hours tomorrow answering every question I can.

&#x200B;

&#x200B;

EDIT: man, I was 50/50 on this post getting thrashed by the mods for being a rant. I'm so happy this is getting a lot of responses!

&#x200B;

First of all, thank you to all of you well-wishers encouraging me to not take it so hard. I do take it hard, and that's why I'm trying to resist and do something different with my frustration. To the person who said there needs to be more people like me in the world . . . thanks. That made my day.

&#x200B;

Here are some caveats about my approach: I am not a computer scientist. I don't come from that background. Many of my opinions are not orthodox. I spent the first 20 of my professional life as a classical violinist and music theory teacher. My first technology job was after I read a book on SQL, and my first 3 jobs were nothing but writing SQL. So a lot of my background has come from a data-centric place. It's nice that data is a big thing now! Over the last 13 years though, I've learned python and other languages mostly the hard way, but I've also done a ton of reading academic textbooks because that's how I grew up and learned music theory. So there's going to be some answers where I dive deep into computer science theory and practice and programming language design. Anything I say that isn't verbatim code is just one person's opinion. My word is not gospel. But it's what I have to offer, and I've thought about it a lot.

&#x200B;

I hope I can be really useful answering questions tomorrow and truly kind and helpful to everyone.

&#x200B;

&#x200B;

EditEditEdkt: I changed my mind about being so hostile to the person who gilded me. Thank you kind person, for giving me an imaginary thing to put in my butt while I masturbate.",Sí,1430
la98y1,"""Automate the Boring Stuff with Python"" online course is free to sign up for the next few days with code FEB2021FREE",2021-02-01 17:50:10,AlSweigart,https://www.reddit.com/r/learnpython/comments/la98y1/automate_the_boring_stuff_with_python_online/,108,"https://inventwithpython.com/automateudemy (This link will automatically redirect you to the latest discount code.)

You can also click this link or manually enter the code: FEB2021FREE

https://www.udemy.com/course/automate/?couponCode=FEB2021FREE

This promo code works until the 4th (I can't extend it past that). Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later. I'll change it to FEB2021FREE2 in three days.

Udemy has changed their coupon policies, and I'm now only allowed to make 3 coupon codes each month with several restrictions. Hence why each code only lasts 3 days. **I won't be able to make codes after this period**, but I will be making free codes next month. [Meanwhile, the first 15 of the course's 50 videos are free on YouTube.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

You can also purchase the course at a discount using my code JAN2021CODE or FEB2021CODE (try both if one doesn't work) or clicking https://inventwithpython.com/automateudemy to redirect to the latest discount code. I have to manually renew this each month (until I get that automation script done). And the cheapest I can offer the course is about $16 to $18. (Meanwhile, this lets Udemy undercut my discount by offering it for $12, and I don't get the credit for those referral signups. Blerg.)

**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. Expect that update to happen in mid-2021. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with. Check out /r/ProgrammingBuddies",Sí,1410
krs99p,"""Automate the Boring Stuff with Python"" online course is free to sign up for the next few days with code JAN2021FREE",2021-01-06 17:15:43,AlSweigart,https://www.reddit.com/r/learnpython/comments/krs99p/automate_the_boring_stuff_with_python_online/,121,"https://inventwithpython.com/automateudemy (This link will automatically redirect you to the latest discount code.)

You can also click this link or manually enter the code: JAN2021FREE

https://www.udemy.com/course/automate/?couponCode=JAN2021FREE

This promo code works until the 4th (I can't extend it past that). Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later. I'll change it to JAN2021FREE2 in three days.

Udemy has changed their coupon policies, and I'm now only allowed to make 3 coupon codes each month with several restrictions. Hence why each code only lasts 3 days. **I won't be able to make codes after this period**, but I will be making free codes next month. [Meanwhile, the first 15 of the course's 50 videos are free on YouTube.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

You can also purchase the course at a discount using my code JAN2021CODE or clicking https://inventwithpython.com/automateudemy to redirect to the latest discount code. I have to manually renew this each month (until I get that automation script done). And the cheapest I can offer the course is about $16 to $18. (Meanwhile, this lets Udemy undercut my discount by offering it for $12, and I don't get the credit for those referral signups. Blerg.)

**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. Expect that update to happen in mid-2021. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with.",Sí,1400
kqk21f,I made a Python script that tracks Elon Musk's tweets and if he tweets about Doge coin it buys $20 of $DOGE on Robinhood,2021-01-04 22:46:12,djrdog578,https://www.reddit.com/r/learnpython/comments/kqk21f/i_made_a_python_script_that_tracks_elon_musks/,117,It uses the Twitter API and an unofficial Robinhood API. Feel free to critique it if you see anything that could be improved! [Github](https://github.com/djrdog578/DelonMusk/blob/master/src.py),Sí,1383
j3eww7,"""Automate the Boring Stuff with Python"" online course is free to sign up for the next few days with code OCT2020REALFREE",2020-10-01 19:01:44,AlSweigart,https://www.reddit.com/r/learnpython/comments/j3eww7/automate_the_boring_stuff_with_python_online/,105,"https://inventwithpython.com/automateudemy (This link will automatically redirect you to the latest discount code.)

You can also click this link or manually enter the code: OCT2020REALFREE

https://www.udemy.com/course/automate/?couponCode=OCT2020REALFREE

(I messed up this month and OCT2020FREE is the discount, but not free, code. Whoops.)

This promo code works until the 4th (I can't extend it past that). Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later. I'll change it to OCT2020REALFREE2 on the 4th.

Udemy has changed their coupon policies, and I'm now only allowed to make 3 coupon codes each month with several restrictions. Hence why each code only lasts 3 days. **I won't be able to make codes after this period**, but I will be making free codes next month. [Meanwhile, the first 15 of the course's 50 videos are free on YouTube.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

You can also purchase the course at a discount using my code OCT2020REALFREE or clicking https://inventwithpython.com/automateudemy to redirect to the latest discount code. I have to manually renew this each month (until I get that automation script done). And the cheapest I can offer the course is about $16 to $18. (Meanwhile, this lets Udemy undercut my discount by offering it for $12, and I don't get the credit for those referral signups. Blerg.)

**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. Expect that update to happen in late-2020. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with.",Sí,1345
lj2l0e,HOW HAVE I BEEN SO BLIND!!!!,2021-02-13 15:30:49,certainly_imperfect,https://www.reddit.com/r/learnpython/comments/lj2l0e/how_have_i_been_so_blind/,200,"IT IS ALL OBJECT....

EVERYTHING IS OBEJCT!!!! 

EVERYTHING!!!!!

OH MY GOD!!!!

IT'S ALL OBJECT!!!!!! 

AHHHHH!!!!",Sí,1318
fdrmsk,I finally did it!,2020-03-05 07:13:55,jrust91,https://www.reddit.com/r/learnpython/comments/fdrmsk/i_finally_did_it/,131,"I've been trying to learn Python for almost 3 years now. I've been off and on trying different things with little success. I'd mostly given up.

This past week at work, they changed some of the data I use, I'm an Accounting Analyst and we get all of our banking data in an excel file. They decided to change it into this convoluted workbook that had about 30 columns of data we didn't need. I figured I'd give Python on last chance and see what I could do.

I proceeded to build a script that takes all of the data into a dataframe, strips out what I don't need, creates columns for missing columns, adds any missing value and saves to a new workbook, all in 21.73 seconds. I finally did it. No one really seems to care. I saved my coworkers about 2.5-3 hours of work a month. I just feel really good and I had to share with someone.

Update: Thank you everyone for the encouragement. I really do appreciate. I've now built it out to include a nice GUI that allows me to choose the destination and name the file. Very happy with it and my boss is, as well.",Sí,1322
npt0pd,Proud Dad right here.,2021-06-01 12:38:04,ghazgul,https://www.reddit.com/r/learnpython/comments/npt0pd/proud_dad_right_here/,92,"Introduced my 8yo daughter to CodeCombat yesterday. We worked along together in Python last night. We called it a night just before the introduction of while loops figuring it was a decent place to call it for the night.

I came down this morning to see she jumped on before school and is rocking through the while loops section with out me and understands what is going on.

My heart just skipped a beat.",Sí,1308
f48ojm,Learning Python? Keep at it! It could change your life,2020-02-15 12:17:26,pw0803,https://www.reddit.com/r/learnpython/comments/f48ojm/learning_python_keep_at_it_it_could_change_your/,215,"Hi Guys,

Just a quick motivational speech as this week it has really paid off for me.

I've been learning python for around 6 months now and have found myself in the perpetual tutorial loop as I think most newbies find themselves.

But now I started a new job which allows the use of python and in the first week I took on a new task from my new boss.

Long story short, I took a task they allowed 3 weeks for the creation of (excel surveys to be used by internal team leads) and had it done in two days; around 15 spreadsheets are populated with 5 to 10 changing questions, and will require analysis thereafter.

They fully expected me to spend weeks putting together said spreadsheets and all their permutations, and email them out.

Instead I created a csv of all the data required and took the data and used python to generate the surveys, updating when changes happen in the back end.

The survey files are then formatted by openpyxl and spat out with a filename title as each team lead.

Any changes to the structure of the surveys mean just changing one or two lines of code, not going into every single file to make all the changes.

The script takes 0.75 seconds to run.

They allocated 3 weeks.

Needless to say, worth it, and everyone is happy!

So if you're stuck in tutorial hell, my advice is to find a work task to accomplish because I reckon I learnt as much in the past 2 days with this task as I have learnt in the past month.

Edit: meant to say, I was only able to get this reasonably high paying job because I told them I started learning python 6 months ago and will be using it to automate tasks. 

Without that, I wouldn't have got it (about a 75 to 100% pay increase on my last job) 

Good luck!",Sí,1290
hjgvgb,"""Automate the Boring Stuff with Python"" online course is free to sign up for the next few days with code JUL2020FREE",2020-07-01 19:12:28,AlSweigart,https://www.reddit.com/r/learnpython/comments/hjgvgb/automate_the_boring_stuff_with_python_online/,189,"https://inventwithpython.com/automateudemy (This link will automatically redirect you to the latest discount code.)

You can also click this link or manually enter the code: JUL2020FREE (on Saturday the code changes to JUL2020FREE2)

https://www.udemy.com/course/automate/?couponCode=JUL2020FREE

This promo code works until July 4th (I can't extend it past that). Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later.

Udemy has changed their coupon policies, and I'm now only allowed to make 3 coupon codes each month with several restrictions. Hence why each code only lasts 3 days. **I won't be able to make codes after this period**, but I will be making free codes next month. [Meanwhile, the first 15 of the course's 50 videos are free on YouTube.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

You can also purchase the course at a discount using my code JUL2020 (or whatever month/year it is) or clicking https://inventwithpython.com/automateudemy to redirect to the latest discount code. I have to manually renew this each month (until I get that automation script done). And the cheapest I can offer the course is about $14 to $16. (Meanwhile, this lets Udemy undercut my discount by offering it for $12, which means I don't get the credit for referral signups. Blerg.)

**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is now available online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. Expect that update to happen in mid- or late-2020. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with.",Sí,1284
lx4sx4,"""Automate the Boring Stuff with Python"" online course is free to sign up for the next few days with code MAR2021FREE",2021-03-03 21:27:00,AlSweigart,https://www.reddit.com/r/learnpython/comments/lx4sx4/automate_the_boring_stuff_with_python_online/,102,"https://inventwithpython.com/automateudemy (This link will automatically redirect you to the latest discount code.)

You can also click this link or manually enter the code: MAR2021FREE

https://www.udemy.com/course/automate/?couponCode=MAR2021FREE

This promo code works until the 4th (I can't extend it past that). Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later. I'll change it to MAR2021FREE2 in three days.

Udemy has changed their coupon policies, and I'm now only allowed to make 3 coupon codes each month with several restrictions. Hence why each code only lasts 3 days. **I won't be able to make codes after this period**, but I will be making free codes next month. [Meanwhile, the first 15 of the course's 50 videos are free on YouTube.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

You can also purchase the course at a discount using my code JAN2021CODE or FEB2021CODE (try both if one doesn't work) or clicking https://inventwithpython.com/automateudemy to redirect to the latest discount code. I have to manually renew this each month (until I get that automation script done). And the cheapest I can offer the course is about $16 to $18. (Meanwhile, this lets Udemy undercut my discount by offering it for $12, and I don't get the credit for those referral signups. Blerg.)

**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. Expect that update to happen in mid-2021. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with. Check out /r/ProgrammingBuddies",Sí,1280
jmaj8i,"""Automate the Boring Stuff with Python"" online course is free to sign up for the next few days with code NOV2020FREE",2020-11-01 21:32:47,AlSweigart,https://www.reddit.com/r/learnpython/comments/jmaj8i/automate_the_boring_stuff_with_python_online/,97,"https://inventwithpython.com/automateudemy (This link will automatically redirect you to the latest discount code.)

You can also click this link or manually enter the code: NOV2020FREE

https://www.udemy.com/course/automate/?couponCode=NOV2020FREE

This promo code works until the 4th (I can't extend it past that). Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later. I'll change it to NOV2020FREE2 on the 4th.

Udemy has changed their coupon policies, and I'm now only allowed to make 3 coupon codes each month with several restrictions. Hence why each code only lasts 3 days. **I won't be able to make codes after this period**, but I will be making free codes next month. [Meanwhile, the first 15 of the course's 50 videos are free on YouTube.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

You can also purchase the course at a discount using my code NOV2020 or clicking https://inventwithpython.com/automateudemy to redirect to the latest discount code. I have to manually renew this each month (until I get that automation script done). And the cheapest I can offer the course is about $16 to $18. (Meanwhile, this lets Udemy undercut my discount by offering it for $12, and I don't get the credit for those referral signups. Blerg.)

**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. Expect that update to happen in late-2020. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with.",Sí,1256
aw0au0,Why study programming when you can just play an RPG?,2019-03-01 04:02:14,TorroesPrime,https://www.reddit.com/r/learnpython/comments/aw0au0/why_study_programming_when_you_can_just_play_an/,174,"Had a noteworthy event today I thought many people in here would get a kick out of. I work as the IT tutor at my school and has part of that I  handle any Intro to Programming appointments that we get. In the Intro classes, they use Python. So I had a student come in today, basically at her wit's end, border-line in tears. Short of the long: 5 weeks into class and she was not understanding the concepts and it was really frustrating her. Okay, so I hunker down and start working with her. In this case, focusing on loops (as that's chapter 6 in the book). He seems to kind of, sort of be getting it, if I hold her hand and lead her through it.

30 minutes in and we haven't really made any progress. I took a step back and started working with her on comparison operations. But she wasn't really getting that either. she is getting more frustrated. So I try to get her mind off the material for a moment.  Her phone flashes a reminder about ""D&D party"" tonight. So I ask if she plays D&D. She does, and we chat briefly about the campaign she's in (she plays a rogue, go figure). Then I hit on an idea.

 ""You know a lot of early programmers were RPG players and because of  that a lot of what developed into modern programming was influenced and  based on RPG mechanics?""

She looked at me like I'm making a really bad setup for an even worse joke.

""I'm serious. How do you determine if you pass or fail a stat-test?"" I ask.

 ""Well, you determine what you need to roll over to pass, roll a dice,  add any modifiers you have and compare that to the first number."" She explains, more energetically.

""So you perform a comparison operation?"" I asked leadingly.

 ""Well... no. I mean...  kind of... wait..."" She stammers out, her response interspersed as she thinks and talks at the same time. 

I go to write on the White board: 


    if Dice_roll+modifiers >= needed\_roll:  
        you pass  
     else:  
         you fail

She looked at it for a long moment, you could see the gears turning in her head. 

 ""So the variable, Dice\_Roll is added to the variable modifiers.. and that's compared to the needed roll. If the needed\_roll is higher... you  fail... otherwise... you pass."" She parses out, once more thinking and speaking at the same time.

""Yeah... and what about this one?"" I ask as I write on the board:

     while enemy\_attack == True:            
          player.cast(shield)

She looks at it for a minute. 

""So long as the enemy is attacking, cast the shield spell."" she says.

""Nice, how about this one?"" 

     for each enemy in hoard:  
          If player.hp > enemy.defense:  
               Target_enemy = True   
               while Target_enemy == True:  
                    player.attack(sword,enemy)

 ""For each enemy in the hoard... check to see if the player Hit Points are greater then the that enemy's defense. If it is, target that enemy.  As long as that enemy is targeted, attack them.""

""And you just worked through a while loop nested inside an if control statement that was inside a while loop."" I explain.

 ""What?"" She says aghast. She quickly turns back to the board and starts studying the examples intently. I can see her eyes traveling across what I wrote.

""So this on is just a comparison operator?"" She askes pointing to the dice roll I wrote out before.

""Yup."" I respond.

 ""And this is just a while loop that would tell the player character to  cast the shield spell.""  She askes sounding more confident.

""Yup."" I respond.

 Her entire face lights up in that unmistakable look of 'the light bulb turning on'. We start hammering through more examples of loops and control statements, fluctuating between the requirements of her assignments and using RPG examples.

So I guess it all depends on what material you use to explain it, right",Sí,1248
grfm5v,Would anyone be interested in watching me create a Django app from scratch on a live stream?,2020-05-27 08:12:18,pranav15197,https://www.reddit.com/r/learnpython/comments/grfm5v/would_anyone_be_interested_in_watching_me_create/,118,"I am a professional Python developer and I mostly focus on building web applications and backends with Django.

I have always wanted to make a youtube channel and post tutorial videos, and thanks to the lockdown here I have some free time now to actually do it.

I was thinking of starting with a live stream, where I will create a small but functional Django app from scratch. I'll explain everything as I go along, and will take questions from the chat. It should be around 2 hours long.

If you think you would be interested in something like this, message me or leave a comment here. Even one interested person will be enough motivation for me!

EDIT -

Thanks, everyone for kind words :)

I should clarify some things that people are asking in the comments

1. Yes, the stream would be recorded and available to view later.
2. A friend who runs a charity organization had asked me to make an app to simplify some of the things she was managing using google sheets. That's the app that I will be making. It would be a really basic Django app and will focus on customizing the Django Admin Panel and using the Role-based access system in Django.
3. I would emphasize that this is **NOT** a 2-hour tutorial about how to write Django apps. I won't be able to go into that much detail given the short amount of time. But I will try my best to make things easy to understand
4. If you are a Django developer already, I don't think there would be that much for you to gain from the stream. However, I loved some of the ideas people have suggested in the comments, and if I do stream more, I'll definitely go into the more complex things to do in Django.

&#x200B;",Sí,1199
k4rxz6,"""Automate the Boring Stuff with Python"" online course is free to sign up for the next few days with code DEC2020FREE",2020-12-01 19:22:38,AlSweigart,https://www.reddit.com/r/learnpython/comments/k4rxz6/automate_the_boring_stuff_with_python_online/,83,"https://inventwithpython.com/automateudemy (This link will automatically redirect you to the latest discount code.)

You can also click this link or manually enter the code: DEC2020FREE

https://www.udemy.com/course/automate/?couponCode=DEC2020FREE

This promo code works until the 4th (I can't extend it past that). Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later. I'll change it to DEC2020FREE2 on the 4th.

Udemy has changed their coupon policies, and I'm now only allowed to make 3 coupon codes each month with several restrictions. Hence why each code only lasts 3 days. **I won't be able to make codes after this period**, but I will be making free codes next month. [Meanwhile, the first 15 of the course's 50 videos are free on YouTube.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

You can also purchase the course at a discount using my code DEC2020 or clicking https://inventwithpython.com/automateudemy to redirect to the latest discount code. I have to manually renew this each month (until I get that automation script done). And the cheapest I can offer the course is about $16 to $18. (Meanwhile, this lets Udemy undercut my discount by offering it for $12, and I don't get the credit for those referral signups. Blerg.)

**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. Expect that update to happen in mid-2021. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with.",Sí,1199
gk517f,Data Analysis Resources for Python,2020-05-15 08:06:32,badge,https://www.reddit.com/r/learnpython/comments/gk517f/data_analysis_resources_for_python/,86,"## Introduction
Data Science is an increasingly important tool for companies looking for competitive advantage, and Data Scientist jobs are coveted and often well paid. As a result, the internet is awash with sites and Medium posts dedicated to teaching data science topics, many of which are of questionable value.

This post includes a list of resources which could help start you on the journey to being a data scientist, but focus on data analysis. This means there is little to no machine learning mentioned here, but there is a lot of focus on statistical analysis of data.

## Credentials
I’m a data scientist with a maths PhD and was a quantitative analyst before that. I work in the energy industry and spend a lot of time working with generalized additive models for time series forecasting, chucking stuff at random forests, doing Bayesian inference with pymc3, and survival analysis with lifelines. I don’t use a lot of Tensorflow or PyTorch because they tend not to fit the domain of my problems well, but I revisit them every few months to pit them against our existing models.

### Disclaimer
This post is purely my opinion, and in particular reflects my view that people too quickly jump to ML/DL methods when ‘traditional’ methods could do better. Obviously this is very domain-specific—you’d struggle to generate meaningful text with a linear regression.

Two final points before diving in:

- There is a lot of content between the sources below; don’t feel you have to read and understand them all by any stretch, but don’t expect to be on top of this stuff in a week or a month. Three months is probably the minimum amount of time required to get a *feel* for this, and more like a year to be useful to a third party
- Domain knowledge is super important; if you are interested in a particular industry, read up on that too to make yourself saleable

# Learning Resources
## Python Basics
Nothing here is specific to data analysis, so take a look at the [r/learnpython FAQ](https://reddit.com/r/learnpython/w/index?utm_source=share&utm_medium=ios_app&utm_name=iossmf).

In general, good data science often looks to the outside observer like software engineering. It’s not enough to build something in a Jupyter notebook and be done (many claim success in “productionising” notebooks, and all are wrong); so you also need to learn about:

- Version control ([git](https://try.github.io/) is the de facto standard, and if you understand that you’ll be able to pick another VCS easily enough. Note that IDEs such as PyCharm give a friendly interface to many commands, but you still have to know the basics.)
- [Packaging](http://packaging.python.org/)
- Unit testing (I like [pytest](https://docs.pytest.org/en/latest/))

## Data Analysis
There’s no getting away from the fact that mathematics is at the core of data analysis, but you don’t have to be John Conway to be useful. In addition, statistics is by far the most important at this level and you don’t need to understand the minutiae of the subject (which is based in measure theory and is *tough*). Unfortunately I’ve never found a good introduction to statistics with Python (there are plenty for R!), so you have to dip into a number of different resources.

### [All of Statistics](https://www.stat.cmu.edu/~larry/all-of-statistics/) ([PDF available here](https://link.springer.com/book/10.1007/978-0-387-21736-9))
Perhaps not *all*, but Larry Wasserman has written a very approachable introduction to statistics here. The link includes the few data sources given in the book, but it’s very much a textbook. At 500 pages it’s a bit daunting, so I recommend focusing on chapters 1–11 first, then the chapters on linear regression and multivariate models, which is about 200 pages total. Read along with the [SciPy docs](https://docs.scipy.org/doc/scipy/reference/); in addition take a look at [pythonfordatascience.org](https://pythonfordatascience.org/inferential-statistics/) which calls out useful functions in SciPy and statsmodels.

### [OpenIntro Statistics](https://www.openintro.org/book/os/)
An alternative (and possibly a better alternative) to AoS, this textbook is available with an optional contribution, and used by a number of colleges in the U.S. I’ve not read it, but a closer look, it appears to be pretty great. As with AoS you’ll have to read along with the SciPy and statsmodels docs.

### [Linear Algebra Done Right](https://link.springer.com/book/10.1007/978-3-319-11080-6)
Currently available for free from Springer, this covers a lot of ground in ~300 pages. Less immediately applicable than the stats books, but definitely worth keeping for the future

### [Python Data Science Handbook](https://jakevdp.github.io/PythonDataScienceHandbook/)
Jake VanderPlas is the author of the excellent [altair](https://altair-viz.github.io/) plotting library and a pretty bright chap. This book serves as a good introduction to NumPy, Pandas, Matplotlib and Scikit-Learn, and the link includes its full text as Jupyter Notebooks, which is awesome. You needn’t bother with the Scikit-Learn chapters unless you want to jump ahead.

### [Python for Data Analysis](http://shop.oreilly.com/product/0636920050896.do) and the [pandas docs](https://pandas.pydata.org/docs/user_guide/index.html)
Which of these you prefer is largely a matter of preferring one medium over another, but PfDA’s second edition is already slightly outdated for pandas 1.0.3, though certainly not enough that it’s not a very useful resource.

### [Data Science from Scratch](https://www.oreilly.com/library/view/data-science-from/9781492041122/)
Joel Grus’s book kinda *does* do what I assert isn’t possible—take you from zero to data scientist hero in a relatively short text. The criticism I would level at it is that it (necessarily) doesn’t go into sufficient depth everywhere, but what it does brilliantly is implement most things from scratch (duh!) to give you a good grounding in the basics.

### [Anatomy of Matplotlib](https://youtu.be/6gdNUDs6QPc)
This is a great video to get a better understanding of how to work with Matplotlib, which is definitely the least Pythonic library still in use by data analysts today. It’s also slightly outdated, but hugely valuable.

### [Introduction to Survival Analysis — lifelines docs](https://lifelines.readthedocs.io/en/latest/Survival%20Analysis%20intro.html)
Great introduction to survival analysis, which will either help you look like a superstar or be completely irrelevant.

### [Winning with simple, even linear models](https://youtu.be/68ABAU_V8qI)
I was at this talk at PyData London a few years ago and it was the best of the conference in my opinion. Vincent makes the argument that people are too quick to leap to ML/DL methods when simpler models could do as well or if not better.

### [The Visual Display of Quantitative Information](https://www.edwardtufte.com/tufte/books_vdqi)
If you buy one book on visualisation, it should be this. (If you buy two, it should be this an *The Grammar of Graphics*)

## Data Science
Briefly, here’re a few resources that cover data science proper, but don’t expect to get here any time soon!

- [r/datascience](https://www.reddit.com/r/datascience/wiki/resources?utm_source=share&utm_medium=ios_app&utm_name=iossmf) (includes all the other resources in this section)
- [The Elements of Statistical Learning](https://web.stanford.edu/~hastie/ElemStatLearn/) and [An Introduction to Statistical Learning](http://faculty.marshall.usc.edu/gareth-james/ISL/) (the former goes into more detail on the maths than the latter)
- [Pattern Recognition and Machine Learning](https://www.springer.com/gp/book/9780387310732)
- [Andrew Ng’s Machine Learning course](https://www.coursera.org/learn/machine-learning)

## Data Sources
As mentioned before, if you’re interested in a particular industry then see if you can get data related to it. Otherwise, these are some general sources of good-quality data.

- [Scikit-Learn data](http://scikit-learn.org/stable/datasets/index.html) has some really good ‘toy’ datasets that are useful for playing around with descriptive and inferential statistics, besides the skl estimators
- [data.gov.uk](https://data.gov.uk/) and [data.gov](https://www.data.gov/) have hundreds of thousands of data sets. Many of these offer a great opportunity to practice cleaning up data with pandas because they come in all shapes and sizes
- [OpenIntro Statistics](https://www.openintro.org/data/) data sets used in this textbook

## Out-of-scope
The following topics haven’t been mentioned in this post yet, because I consider them adjuncts to the main theme, but will probably be of importance:

- SQL (probably very important!)
- Big data (possibly less so, but in general the problems of big data are about finding efficient ways of doing the same stuff with… big data) inc. e.g. PySpark etc.
- Continuous integration/continuous delivery
- Docker/Kubernetes

## Postscript
The original version of this post appeared ~3 weeks ago and the number of links in it got it marked as spam and it was deleted by the mods; thanks to /u/novel_yet_trivial for sorting it out!",Sí,1178
naqwnk,"""Automate the Boring Stuff with Python"" online course is free to sign up for the next few days with code MAY2021FREE",2021-05-12 15:06:36,AlSweigart,https://www.reddit.com/r/learnpython/comments/naqwnk/automate_the_boring_stuff_with_python_online/,85,"I'm a bit late with this month's free code, but it is now active.

https://inventwithpython.com/automateudemy (This link will automatically redirect you to the latest discount code.)

You can also click this link or manually enter the code: MAY2021FREE

https://www.udemy.com/course/automate/?couponCode=MAY2021FREE

This promo code works for three days (I can't extend it past that). Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later. I'll change it to MAY2021FREE2 in three days.

Udemy has changed their coupon policies, and I'm now only allowed to make 3 coupon codes each month with several restrictions. Hence why each code only lasts 3 days. **I won't be able to make codes after this period**, but I will be making free codes next month. [Meanwhile, the first 15 of the course's 50 videos are free on YouTube.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. Expect that update to happen in mid-2021. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with. Check out /r/ProgrammingBuddies",Sí,1177
ikocy5,"""Automate the Boring Stuff with Python"" online course is free to sign up for the next few days with code SEP2020FREE",2020-09-01 17:11:39,AlSweigart,https://www.reddit.com/r/learnpython/comments/ikocy5/automate_the_boring_stuff_with_python_online/,90,"https://inventwithpython.com/automateudemy (This link will automatically redirect you to the latest discount code.)

You can also click this link or manually enter the code: SEP2020FREE

https://www.udemy.com/course/automate/?couponCode=SEP2020FREE

This promo code works until September 4th (I can't extend it past that). Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later. I'll change it to SEP2020FREE2 on the 4th.

Udemy has changed their coupon policies, and I'm now only allowed to make 3 coupon codes each month with several restrictions. Hence why each code only lasts 3 days. **I won't be able to make codes after this period**, but I will be making free codes next month. [Meanwhile, the first 15 of the course's 50 videos are free on YouTube.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

You can also purchase the course at a discount using my code SEP2020FREE or clicking https://inventwithpython.com/automateudemy to redirect to the latest discount code. I have to manually renew this each month (until I get that automation script done). And the cheapest I can offer the course is about $16 to $18. (Meanwhile, this lets Udemy undercut my discount by offering it for $12, and I don't get the credit for those referral signups. Blerg.)

**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. Expect that update to happen in late-2020. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with.",Sí,1176
q8iyu7,I automated a part of my job that usually took me 2 hours to do in 2 seconds,2021-10-15 07:08:24,dadsinamood,https://www.reddit.com/r/learnpython/comments/q8iyu7/i_automated_a_part_of_my_job_that_usually_took_me/,219,"I have to send out a hundreds of personalised emails for a literary magazine I run and writing the emails usually takes ages. But I wrote a simple script using requests, smtplib, and the sheety API and completely automated the task. Terrified when I hit run, but it actually worked! 

I love this language. I haven't been learning long but it just feels so intuitive.",Sí,1163
neg3hb,MIT offers free online course in Computer Programming using Python,2021-05-17 13:21:00,ivaylos,https://www.reddit.com/r/learnpython/comments/neg3hb/mit_offers_free_online_course_in_computer/,90,"***The course offered by MIT is an introduction to Computer Science as a tool to solve real-world analytical problems using Python 3.5***

Massachusetts Institute of Technology(MIT), one of the most premium technical educational institutes in the world, has recently announced a free online course in Computer Programming using Python. The course is available on the edX e-learning platform and the registrations are open until June 2. Here are the course details.

**About course**

The course is named "" **Introduction to Computer Science and Programming** **using Python**"". The objective of this course is to provide learners with a brief introduction to many computer programming concepts so as to give them an idea of what is possible when they need to think about how to use computation to accomplish some goal later in their career. That said, this is not a ""computation appreciation"" course but a challenging and rigorous learning path on which the students spend a lot of time and effort learning to bend the computer to their will.

Python is the most sought-after programming language skill by IT professionals and the demand for skilled Python developers is also very high in the job market. In this course, learners will be taught the nuances of programming using Python 3.5.

**Course format**

The class will consist of lecture videos, lecture exercises, and problem sets using Python 3.5. The lecture videos are broken into small pieces usually between eight and twelve minutes each. Some of these may contain integrated ""check-yourself"" questions. Even if you have knowledge of Python 2.7, you will be able to easily transition to Python 3.5 in this course. There will also be programming assignments and standalone exams/quizzes, which are not part of the video lectures.

**What is in it for learners**

* A Notion of computation
* The Python programming language
* Some simple algorithms
* Testing and debugging
* An informal introduction to algorithmic complexity
* Data structures

**Course instructors**

The course is instructed by 3 MIT professors:

* John Guttag, Dugald C. Jackson Professor of Computer Science and Electrical Engineering at MIT
* Eric Grimson, Bernard Gordon Professor of Medical Engineering, Professor of Computer Science at MIT
* Ana Bell, Lecturer, Computer Science and Electrical Engineering at MIT

**System requirements**

You need to have a computer running one of the following operating systems: Microsoft Windows, version XP or greater (XP, Windows Vista, or Windows 7)Apple OSX, version 10.2 or greater.

Linux - most distributions that have been released within the past two years should work

In addition, you will need the ability to download, install, and run software on your computer.

**Other important details**

* This is an instructor-paced course; however, students can watch the lectures at their leisure and do not need to watch the lectures live or at any set time.
* The course starts on June 2 and will end on August 5. So, you are required to enrol before June 2.
* The course is free.

**How to enrol**

To enrol in this program, you can visit the [MITx course page on edX here](https://www.edx.org/course/introduction-to-computer-science-and-programming-7).

[Source](https://content.techgig.com/mit-offers-free-online-course-in-computer-programming-using-python/articleshow/82678099.cms)",Sí,1160
l0lyh2,"Thank you guys and Python for giving me joy (NEW PYTHON PROGRAMMERS, READ THIS).",2021-01-19 15:24:03,Ok-Improvement-6388,https://www.reddit.com/r/learnpython/comments/l0lyh2/thank_you_guys_and_python_for_giving_me_joy_new/,127,"I have been using Python for over a year, and have practiced every single day. Python led me to a place in life I never knew would become possible. It has gotten me through tough times, entertained me, given me food and shelter, and most of all, given me joy. Sometimes I remember when I was watching those Tech With Tim tutorials on Youtube. So big thanks to Tim(Tech With Tim) also! Following his and a few other YouTubers tutorials, I have tried tons of different stuff like game dev, web dev, desktop application dev, scripting, AI, and more.

About 3 months ago, I watched Tech With Tim's series on Kivy. Kivy is a library for Python that allows Python devs to create mobile apps using Python, instead of languages like JS, Swift, etc. Before then, I had been using Sublime. Although it had been getting very messy(For my likings) with file explorer, cmd prompt, Sublime, and Chrome all open on my small laptop screen. So I downloaded PyCharm so I could have all my tools in one application. Well lemme tell you, PyCharm is INSANE. It really speeds up dev time with all those features. I tried Kivy out a bit and got a little confused. Not confused about how to do it, but confused about how I loved it so much. Before, I HATED web dev, desktop dev, so on. I thought I just hated front end development and was going to focus on AI, scripting, and overall software engineering. But somehow I became obsessed with Kivy.

I kept practicing and practicing, teaching myself the ropes. I never once thought about taking a break from Kivy, I just kept programming. It was 2 days until December, and I made a decision that would change my life forever. I decided I would start making money with my code. I considered this before but never could decide what I would code, and how I would make money. I didn't want a full-time job because I had no degree and I liked my current job. But now that I found Kivy, I knew I wanted to do mobile dev. I signed up for Fiverr and put up a simple gig post. I ended up getting two sales, but that motivated me. I recently signed up for Upwork, and I've gotten a few jobs. This is fine because for me it's about the coding, not the money.

Why am I sharing this with you? Simple, to thank all of you for helping me get to this place. I wouldn't know how to program without this subreddit. So again thank you. I wish I could do something more to thank all of you. For all those new Pythonistas, I hope this motivates you. I hope this lets you see the light at the end of the tunnel. When I first started, I thought I would never make it. Somehow I did though, and now I'm here. Sure I'm not making 6 figures, but I don't care about that. Because at the end of the day, you learned programming to do the impossible and have fun.

Edit:

Thanks for all the love guys! Didn’t think I would get a lot of views. I hope this motivated you guys! Feel free to PM me if you want help with anything or want to talk.",Sí,1152
s89bpz,Raise your hand if your scripts are littered with commented-out code that you are hoarding like it's the end times,2022-01-20 03:48:54,ResetPress,https://www.reddit.com/r/learnpython/comments/s89bpz/raise_your_hand_if_your_scripts_are_littered_with/,176,"✋

EDIT: wow, I did not expect such a reaction from this community! Thank you all for your lively discussion. I should clarify that I am coding for personal use and usually the commenting is different ways of achieving a specific feature. I don’t know what I like best until it’s done. I also hoard old emails, bookmarks, free ebooks… so I guess you could call it a character flaw 🙃",Sí,1141
obq077,"""Automate the Boring Stuff with Python"" online course is free to sign up for the next few days with code JUL2021FREE",2021-07-01 16:55:20,AlSweigart,https://www.reddit.com/r/learnpython/comments/obq077/automate_the_boring_stuff_with_python_online/,80,"https://inventwithpython.com/automateudemy (This link will automatically redirect you to the latest discount code.)

You can also click this link or manually enter the code: JUL2021FREE

https://www.udemy.com/course/automate/?couponCode=JUL2021FREE

This promo code works until the 4th (I can't extend it past that). Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later. I'll change it to JUL2021FREE2 in three days.

Udemy has changed their coupon policies, and I'm now only allowed to make 3 coupon codes each month with several restrictions. Hence why each code only lasts 3 days. **I won't be able to make codes after this period**, but I will be making free codes next month. [Meanwhile, the first 15 of the course's 50 videos are free on YouTube.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

Side note: My latest book, [The Big Book of Small Python Projects](https://inventwithpython.com/bigbookpython/), is out. It's a collection of short but complete games, animations, simulations, and other programming projects. They're more than code snippets, but also simple enough for beginners/intermediates to read the source code of to figure out how they work. The book is released under a Creative Commons license, so it's free to read online. (I'll be uploading it this week when I get the time.) The projects come from this [git repo](https://github.com/asweigart/pythonstdiogames).

**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with. Check out /r/ProgrammingBuddies",Sí,1106
o16gvr,I Actually Got a Job!,2021-06-16 14:41:07,cellularcone,https://www.reddit.com/r/learnpython/comments/o16gvr/i_actually_got_a_job/,95,"Two years ago, I didn’t have much to brag about. I had spent six years in undergrad bouncing around between humanities majors before settling on international relations. I know you’re probably saying international relations is useless. I knew that, but I was also struggling with crippling depression and anxiety. Anything remotely technical or career-oriented would send me into a state of panic. I found that out the hard way when I failed freshman year and nearly got kicked out of school. I had always been interested in programming ever since I booted up my dad’s old Macintosh II as a kid and played around with True Basic. The idea of actually doing it for a living though, or even in an academic setting terrified me. Obviously everyone else would be so far ahead of me there would be no way I could compete. 

Well, after graduating and immediately going back to school for a one-year masters in marketing (turns out it’s very difficult to get hired with an international relations degree), I found myself frequently looking up coding tutorials in class. After randomly selecting python because some Reddit thread suggested it, I spent most of my downtime between lectures doing basic courses on Udemy and eventually graduated to some random connect four tutorial. For some reason, I was actually absorbing and retaining information. 

When I graduated and eventually got my first shitty agency job, I tried to use python for every single thing I could. There were so many tedious reports that needed to be put together every day that required visiting dozens of media sites, copying data between spreadsheets and so on. It was the perfect opportunity to learn web-scraping and data manipulation with pandas. I ended up saving the office about two hours of work a day. Needless to say, my boss was very impressed. It was great until he got laid off, and his replacement quit. Then I got laid off too. 

I spent the next year and a half working at a media agency. While my official job title didn’t reflect it, I ended up being able to shift my responsibilities away from simple ad placement to finding ways to automate  campaign budget allocation and media upload / allocation as well as reporting. I even got a chance to create some data infrastructure as the company had none before my arrival.  

After failing to get any sort of raise, I decided to start applying to junior developer and data analyst jobs in my area. I would highlight all the technical aspects of my previous jobs in my applications and include my GitHub portfolio. After 50 something applications, I finally got a lead with a multi national logistics company for a data analyst position. The interview went well and they gave me a python and sql assessment which I went overboard on completing. 

It’s been four months since I put in my notice at my last job and I just passed my probation period as a data analyst / engineer with a 60% salary increase. Instead of rushing to meet deadlines for campaigns and mindlessly scrolling excel files I get to spend the work day building data pipelines and automating reports without someone breathing down my neck. 

TLDR Thanks to stack overflow, reddit, and a resume that only highlighted my technical achievements, I managed to go from a depressed college student to someone with a good job, a fiancé and a house (albeit rented). So that’s pretty cool I guess.",Sí,1098
lmi2lg,From a Beginner to Beginners: From print('Hello World!') to Tutorial Hell to Getting my First Job!,2021-02-18 08:40:40,MikeDoesEverything,https://www.reddit.com/r/learnpython/comments/lmi2lg/from_a_beginner_to_beginners_from_printhello/,129,"Hello all,

It finally happened! I became employed as a Data Engineer after self studying Python for around 8 months and SQL for around a month or two.  For reference, I'm based in the UK and older than 30.

I lost my job as a traditional scientist around August last year and had been at the mercy of a company doing data science/engineering incorrectly (overfitted models, zero subject matter expertise, dog shit data).  So, I took it upon myself to teach myself and prove they were doing it wrong.  Little did I know, I ended up discovering something I really enjoyed - making sure everybody is getting the right data.

After around 2 months of applying for jobs, I was contacted out of the blue by a company's HR department which was local who were looking for somebody to join their team as a Data Engineer.  This was pretty much nothing to do with my skill level and was 99% luck and being in the right place at the right time as the technical questions weren't as hard as other roles and the role itself is very new in the company.  I say nothing to do with my skill level because I really don't think I'm qualified for this job yet.  I also happened to be interested in a field which is popping off at the moment, so entering a market into a huge demand definitely contributes to success.

I had a total of 5 interviews:

* Data Engineer (webscraping)
 
* Python Developer/Consultant (I still don't really know what this job is, I took the interview because it was an interview)

* Test Automation Engineer

* Data Engineer (business intelligence)

* Data Engineer (financial services)

All of that aside, I think it's worth going over some stuff which might useful.  A lot of the skills in the learn programming subreddits are often a technical discussion and help.  Even from a science background there's a lot of similarities in the job search - the assumption good skills alone are enough to land the job.  Unfortunately, due to an influx of anybody being able to call themselves a recruiter, job hunting is definitely another skill that all programmers looking to get their job should learn in order to navigate getting strong armed into less than desirable positions for less than desirable conditions.

I was unemployed back in the tail end of the 2008 financial crash as well and, over time, I realised having the experience of job hunting and dealing with job specs, interviews, offers, recruiters was extremely helpful.  I completely understand that a lot of people in here may have never been in full time employment before so I thought it'd be useful to highlight what's still relevant:

**Culture, Prospects, Location, Money**

I would say these are pretty much the things that should drive your decision to get a job.

* You want to work with fun, decent people in a place which don't think you're a robot.

* You want a job which can either take you places at that company or kick start your career.

* It has to be somewhere you don't hate living.

* You want to get paid fairly.

Of course, not everything is set in stone and it's very much recommended to decide what you skimp on.  I'll echo something I learnt in science - offering to be paid less than the market value might help you now, but really hurts the industry as a whole.  Know your worth and stick to it.

For reference, here's the lowdown on a job I turned down vs the job I accepted:

Turned down:

* Recruiter constantly asked me the same questions over and over again (is the location okay because you live far away and are you sure you have experience using Python to which I answered yes)

* I did 3 interviews for them.  First stage was a classic verbal interview where the director literally left on the minute of the time we had allocated for the interview, cutting me off mid sentence.  Second stage was a technical task which I received feedback of ""not being great"" (this was because it was below the level of a developer.  At no point did I say, or suggest, I was at a developer level.  I was also applying for a junior level role) although invited me back for a third interview.  Third interview was a series of quick fire technical questions with right/wrong answers.  This whole process took 5 weeks.

* Spent another 2 weeks telling me they were still looking at other candidates.  So we are at 7 weeks for an interview process.

* Threw me an offer mid week and wanted me to start Monday.

At the beginning, I was so excited for this job although over time began to despair that this is the only job I might get.  Took all of this shite on the chin anyway and began planning my exit strategy.  Fortunately, a different job came through:

* Interview was carried out as a HR staff member found my CV directly on LinkedIn, emailed, and called me to schedule an interview.

* Manager was extremely personable and interested in hearing my motivations, giving me plenty of time to express myself.  Also over ran the interview by ten minutes as we were getting along.  They called me back on the within two hours to arrange a second stage interview.

* Second stage interview was with said manager and the analytics director.  Same format of being relaxed and asking a mix of scenario and experience based questions in order to see my approach to solving problems rather than how well I knew the documentation.  They also took the time at the end of the interview to get to know me more which was a really positive sign.

* I was offered the job about 3 hours after the second stage with an explicit instruction I'll be mostly working from home for the forseeable future and my start date will be at the very earliest in two weeks.

* This whole interview process took one week.

The relief and joy I experienced when I got this job was immense and made me realise that being desperate is a dangerous thing.

**Know What You're Looking For**

Googling is a highly underrated skill and it can be pretty crazy seeing people who are amazing at Googling for solutions to programming problems although completely forget all of that whilst job hunting.

What not to search for:

* Software developer jobs london

* Software engineer jobs wales

These are honestly the worst things you can search for because they will give you every result for every language and you'll spend a lot of time sifting through shite you don't want to apply for.

How you should search:

* Language + developer/engineer/general job title + location + jobs

* e.g. javascript front end developer new york city jobs

**Sometimes, It's Better to be Lucky Than Be Good**

I mentioned earlier getting the position I did was not about skill and more about being in the right place and that's something I want to touch on here.

In the end, as self taught programmers, university graduates, and people looking to change careers, all we want is a chance to prove ourselves.  In order to get that chance, you might have to face a few rejections and apply for stuff you might not necessarily be qualified for *right now*.  Although, if you honestly believe it's a job you can do given some time and training and you want to prove that, then every time you see a job application, just send your CV/resume in.  It doesn't cost anything and the worst thing that happens is they say no and you aren't ready yet.

Mindset whilst jobhunting is just as important as technical ability because with a weak mindset, you'll never get the opportunity to show what you're really good at.

I hope this was useful to somebody and good luck with everybody also looking to get their first job.

Special thank you to you guys at r/learnpython for helping people getting answers to their problems and just generally being a non-judgmental helpful sub.  You guys are dope af.

EDIT: 

**What courses did you use?**

[Courses I did here](https://www.reddit.com/r/learnprogramming/comments/lmi0zp/from_a_beginner_to_beginners_from_printhello/gnwfwv9/).

I also used Kaggle's free courses to get an introductory feel of Data Science.

In terms of study plan, it was extremely unstructured and I kind of liked that because it meant I could work on what I wanted to work on instead of following a regime which would mean learning stuff I didn't want to learn or wasn't ready to learn yet.",Sí,1101
t8tvfp,"TIL that a software engineer filed a Freedom of Information Act request to get access to NSA's training material for teaching Python, the popular programming language. The material is now available for free online for anyone who wants to learn Python using it.",2022-03-07 17:03:37,vvinvardhan,/r/learnprogramming/comments/t8pc7n/til_that_a_software_engineer_filed_a_freedom_of/,33,,No,1088
nmpvtl,Don't Give Up! Learning to code is damn hard.,2021-05-28 04:38:25,thehappyorchardblog,https://www.reddit.com/r/learnpython/comments/nmpvtl/dont_give_up_learning_to_code_is_damn_hard/,128,"This is bloody hard. I have learnt to do a lot of things in my life, and coding is up there as the hardest. I am currently just learning python and I'm struggling.

But we need to give ourselves permission to struggle. Tell yourself it's ok to be confused. To not know the answer.

To you, whoever you are. You got this. Just keep turning up. To struggle is to learn.

I am writing this for me as much as everyone else.

You can learn to code. I can learn to code. We can learn to code.

Today's beginner is tomorrow's master.

Edit: Thank you for all the support, especially from the masters in the subreddit posting advice. A great way to learn is to teach. For those struggling with motivation, I write about motivation and similar topics twice a week here [www.thehappyorchardblog.com](https://www.thehappyorchardblog.com). If you are ever struggling or need help you can reach out to me on the site and I'm happy to talk (If this link is not allowed, moderators let me know and I will remove it).",Sí,1071
10h4tsu,I just wrote my first script to do mindless busy-work for me. Over the moon with glee!,2023-01-20 18:48:37,Techrob25,https://www.reddit.com/r/learnpython/comments/10h4tsu/i_just_wrote_my_first_script_to_do_mindless/,113,"I know the first rule of automating your job is to not tell your co-workers that you automated your job. But I had to tell someone. So I'm telling you all.

I've got a load of repetitive paperwork to fill out and I ignored it for far too long. So I've got a serious back-log.

Pyautogui to the rescue! My bot locates the correct form, opens it, fills in the blanks correctly and completely, closes the form out and then begins looking for the next one. All while I drink coffee and supervise.

I wrote it with 114 lines of python code, but I realize now that I could have done it in 50 if I had defined my own functions instead of being so programmatic. And I built in a lot of sleep delays to make sure the screen has time to load before the next command goes through. BUT IT WORKS!

I wrote this program in 4 hours, and it's going to do over 50 hours worth of work for me. And I had fun making it!

This has totally reinvigorated my desire to learn more Python. Thanks for being an awesome community and helping the little guys like me.

&#x200B;

UPDATE: So over a week later, my program has completed its task! It ran for over 50 hours and worked at a steady human pace. It saved me a LOAD of grief. It would have taken me MONTHS working during my downtime to clear that backlog. I'm going to make a few changes to it today to make it run on a schedule and take care of this task daily so I will never have a backlog again. I will make sure that it needs me to sign in so it doesn't run when I'm home sick or something. And it will not store login credentials.

Just as this is wrapping up, my company asked me to start digging into a gigantic spreadsheet with loads of different types of data so I guess I'll be looking into Pandas this week! My goal now is to quietly automate more of my job and learn a lot more python in the process. Thanks again for being an awesome community! I wouldn't be here without /r/python!",Sí,1063
jwgatc,"Going from print('Hello World)' to tutorial hell to building my own ""data pipeline"" - From a beginner to beginners",2020-11-18 14:03:19,MikeDoesEverything,https://www.reddit.com/r/learnpython/comments/jwgatc/going_from_printhello_world_to_tutorial_hell_to/,131,"Hello all,

I recently wrote a post about [getting my first paid job on Upwork](https://www.reddit.com/r/learnpython/comments/jrwi6d/just_completed_my_first_job_on_upwork/).  I got rehired by the same person to do even more work with the conversation going like this:

Client: This work is great.  Now, can we do the same for everything please?

Me: As far as I'm aware, all of the fields are filled.  Could you give me some more detail?

Client: *sends me a search page* You see all this info here? All 39 pages? Could we do exactly the same for all of these please? (client said it much nicer than this)

To avoid any confusion, I got asked to scrape a whole website of financial data and condense it into a spreadsheet.  This was a pain in the tits for the following reasons:

* The pages in the first post were static.  This is a dynamically loaded website.

* It's a lot more data - it ended up being over 18,000 data points.

* It needed a lot more code.

Long story short, I managed this and got it in on time and got paid! I enjoyed it so much I ended up making it a ""data pipeline"" (if you can even call it that) where it scrapes the data, passes it to a function which saves it to a CSV, and then passes the CSV to Pandas to have it cleaned and formatted.  All in one Jupyter Notebook cell!

5 months ago, I didn't know a single thing about code and now I can do this.  It's amazing and I'd love to be able to give some people a realistic opinion, as a beginner, to other people starting out. 

**Tutorials are a bit misleading**

As with all people learning, I'm sure you've probably watched tons of videos.  Whilst they're useful, it can be very disheartening watching somebody cane out code in 10 minutes which takes you 3 hours.

[Here's a video which made me feel better](https://www.youtube.com/watch?v=uIOhRD9J9oU&)

I saw this as I was transitioning out tutorial hell and it was very sobering how a lot of what he said happened.  I spent a lot more time searching for solutions, and running the same blocks of code with minor adjustments over and over again until it did what I want than I did watching my code work.  Also, actual time spend coding was a lot less than checking for ridiculously small things like unmatched brackets.

My code was literally trash and a mess which didn't make any sense whilst I was doing the job.  Huge chunks of code which worked and commented out as I was trying to fix things, code which didn't work and I forgot to delete, random comments I made whilst I was angry.  My code *worked* though and it's something the client never sees.  After I finished, I took the code and made it WAY cleaner just in case anybody would want to see it.

Judging from what more experienced people have said, this is the normal cycle of programming and thinking you're going to one-shot code is the mindset to failure.  Programming is about problem solving and problem solving involves running into a lot of problems and when I say problem solving, I mean a lot less ""If Jack has 3 apples and Jill has X-n^2 apples, come up with an algorithm which sorts out a list of even numbers and every odd number produces the word 'lmao'"".  I would say problem solving can be summarised with 'figuring out why your code isn't doing what you want it to do'. 

**Googling stuff and copying code is normal**

I used to feel like such a joke googling stuff for solutions and being unable to rattle stuff of the top of my head.  Same with copying code other people have done and subbing my own variables in there.

After about 2 months of doing this, this is pretty much what programming is like.  So don't feel bad if you do - this is normal.  Nobody feels guilty when they copy a recipe off youtube to impress somebody and nobody should feel bad for taking publicly available code and adapting it for their own purposes (within reason).

**Getting out of ""tutorial hell""**

I spent about 4 months in this stage.  I've done three courses overall and felt the same all the way through, 'me following along means I'm learning!'.  Unfortunately, this isn't true.  I ended up wondering why people were doing stuff the way they were doing it rather than understanding what was going on.

One of the most asked questions on here is 'I'm a beginner.  What should I build?' and usually people say the same projects which are projects 100 other people have documented and fine tuned. The obsession with using some sort of phrase involving the word 'build' or 'building' gets bandied a lot around here and I do think the concept is poorly explained although is correct.  I think the more apt advice for getting out of tutorial hell is:

""Come up with your own ideas and then build them""

Building what you're interested in and is useful to you is very different than churning out programs hundreds of other people have done and is the beauty of being self taught - getting over that hump and generating your own ideas is a steep, very rewarding learning curve.  Ultimately, from what I've learn from tutorials, is that zero courses teach you how to be creative and if you can't be creative, programming is really really hard.

My example projects before this huge one above was a password manager and a program to automate my computer to begin mine crypto when my electricity is cheap.  I also made loads of other stupid shit like a bot which spams annoying messages in chat channels with a sleep timer to avoid getting timed out, spamming email boxes of people who have sent me junk mail with scary pictures.  I came to the conclusion that all of the stuff I *like* to build is incredibly troll and that's totally cool as long as I don't use my powers for evil on a grand scale.

Which brings me to my next point...

**Have some fun**

Learning Python and programming always felt like a race to me.  ""How much time will it take for me to become a paid, full time programmer?"" was always on my mind and, to be honest, it ruined a lot of the learning for me.  I've had a lot of down days because it felt like I was ""slow"" compared to these people on youtube who became Software Engineers for the FAANG groups in 6 month, or these 15 year old kids winning Google coding competitions. I felt like I was ""missing out"" on earning a lot of money because of a lack of ability, rather than realising the only person that sets the goals posts is me.  Comparison is the thief of joy, after all.

Putting yourself under a lot of pressure to get somewhere is definitely a path to burning out.  My missus told me the other week that I ""looked tired"" and when I looked up at the clock, I had been sat at my computer for 6 hours without a break.  Whilst I don't disparage working hard, I do disparage disconnecting from your health.

Take a break.  Go for a run.  Spend some time with your family.  Build stupid shit which nobody will ever see every once in a while.

**Build your Github as soon as you can**

This is something I learnt far too late.  EDIT: Elaborated on below:

I say build a Github because a lot of people's goals are to become a software engineer or developer and a lot of people are also self taught although there's no really ""good"" way of showcasing your projects and what you've done on your resume/cv. Github is what developers use as part of their pipelines and a lot of jobs expect you to be able to use, so if you have a Github showcasing your work it shows your portfolio and suggests you at least know what Github is.

If you start late, like I did, you'll have a bunch of concentrated commits into your repository which doesn't look very professional and isn't visually very encouraging. A steady stream of projects over time shows that you've put a bunch of effort into either submitting projects or contributing towards other projects and helps boost the strength of your application.

**Your career aspirations can change, and that's okay too**

I have a background in chemistry and was enamoured with the idea of becoming a data scientist.  What I learnt from doing python is two things -

* I really like collecting data and automating things.

* I really hate analysing data.

And that's alright with me.  I know what jobs I should be looking for now!

Of course, this is all just my opinion based on personal experience.  I always recommend going out there and getting your own.  I hope this was helpful to some beginners!

EDIT: Wow, holy shit.  This is a lot bigger than I thought.  Thank you for all the awards and the nice comments.  Also, big thank you to much more experienced people weighing in - it's what makes this community!",Sí,1047
nrh5km,"""Automate the Boring Stuff with Python"" online course is free to sign up for the next few days with code JUN2021FREE",2021-06-03 16:10:57,AlSweigart,https://www.reddit.com/r/learnpython/comments/nrh5km/automate_the_boring_stuff_with_python_online/,102,"https://inventwithpython.com/automateudemy (This link will automatically redirect you to the latest discount code.)

You can also click this link or manually enter the code: JUN2021FREE

https://www.udemy.com/course/automate/?couponCode=JUN2021FREE

This promo code works until the 4th (I can't extend it past that). Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later. I'll change it to JUN2021FREE2 in three days.

Udemy has changed their coupon policies, and I'm now only allowed to make 3 coupon codes each month with several restrictions. Hence why each code only lasts 3 days. **I won't be able to make codes after this period**, but I will be making free codes next month. [Meanwhile, the first 15 of the course's 50 videos are free on YouTube.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. Expect that update to happen in mid-2021 or late-2021. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with. Check out /r/ProgrammingBuddies",Sí,1046
11eg5af,Beginner's Python Cheat Sheets (updated),2023-02-28 18:37:22,ehmatthes,https://www.reddit.com/r/learnpython/comments/11eg5af/beginners_python_cheat_sheets_updated/,120,"Hi everyone! When Python Crash Course first came out, I made a set of cheat sheets to go along with the book. Over the years this resource has proven useful to a much wider audience than just PCC readers. I just finished updating the full set of sheets, and wanted to share them here first.

You can download a pdf that includes all the sheets in color in [one document](https://github.com/ehmatthes/pcc_3e/releases/download/v1.0.0/beginners_python_cheat_sheet_pcc_all.pdf). For a full description of the overall set, including printer-friendly black and white versions, see [here](https://ehmatthes.github.io/pcc_3e/cheat_sheets/). Individual sheets cover Python basics, and the following libraries: pytest, Pygame, Matplotlib, Plotly, and Django. There's also an additional sheet covering Git basics.

Last year I tried offering these through Leanpub and Gumroad, so people could pay for them if they wanted to. There was an option to download them for free, but both platforms have made it more difficult to download resources for free. It was never my intention to put them behind a paywall, so the full set is free to download from GitHub, and will remain so as long as Python Crash Course is in print.

Thank you, and I'm happy to answer any questions anyone may have. (Also, if you find any mistakes please let me know and I'll get them updated quickly.)",Sí,1034
jxr209,My dad is a programmer and I want to hand-sew a simple program as a gift to him. Feedback on the program I came up with?,2020-11-20 15:29:20,hydroscopick,https://www.reddit.com/r/learnpython/comments/jxr209/my_dad_is_a_programmer_and_i_want_to_handsew_a/,147,"Edit 2: Project completed. :) Here it is: [link](https://imgur.com/gallery/ta90l8K).

Edit 1: Thanks so much, everyone! Here's my final draft ([link](http://imgur.com/gallery/RgpfUjJ)). I'll post a picture of the piece when I finish it. :)

Not homework help!

I want to embroider a simple program for a Christmas gift to my dad, a computer science professor and self-proclaimed ""geek"". Here's what I came up with ([link](http://imgur.com/gallery/EyjT9iE)).

Does this make sense? Should I change anything? All feedback is welcome. I barely know Python and don't want my gift to make him cringe.

Thanks so much!",Sí,1033
gxycd2,"I love Visual Studio Code so much, especially for learning Python",2020-06-06 20:23:11,bbt133t,https://www.reddit.com/r/learnpython/comments/gxycd2/i_love_visual_studio_code_so_much_especially_for/,159,"When you're starting out like me learning Python, these are the 12 recommended extensions that I currently have installed. I hope it helps you in your learning journey as it is doing wonders for me:

&#x200B;

1. Bracket Pair Colorizer
2. indent-rainbow
3. Python
4. Python Docstring Generator
5. Python Preview
6. Trailing Spaces
7. Visual Studio Intellicode
8. Gitlens
9. Docker
10. Dracula Theme
11. Material Icon Theme
12. Settings Sync

&#x200B;

Let me know if you have other cool extensions that I can add.

Thanks!

&#x200B;

Edit:

* Added:  Gitlens (for those already learned git/github), Docker (only install if you learned Docker), Material Icon Theme, Settings Sync, Dracula Theme
   * Considerations:
      * Themes: Monokai Pro (very cool, I tried it), Material (most popular)
      * Code-Assistant/Auto-Complete: Kite, TabNine
      * Webdev: Minify, Prettier, Paste JSON as Code (for those learning html, css and js)
* Removed:  vscode-icons (sorry microsoft), Code Spell Checker (confusing with other syntax errors)",Sí,1019
gfaq9s,Handy Python Functions For All,2020-05-07 17:15:16,impshum,https://www.reddit.com/r/learnpython/comments/gfaq9s/handy_python_functions_for_all/,76,"A small collection of snippets that I use quite frequently. Feel free to use them for whatever you want. Go crazy!

Lonk: https://recycledrobot.co.uk/words/?handy_python_functions",Sí,1018
drnc0z,Automate the Boring Stuff FREE on Udemy,2019-11-04 20:10:47,TechsInTheCity,https://www.reddit.com/r/learnpython/comments/drnc0z/automate_the_boring_stuff_free_on_udemy/,96,"The great Al Sweigart is now on Udemy and is hooking us up with a FREE coupon thru 11/7.  Get some, and maybe show him a little social media love for all he does.

https://mobile.twitter.com/AlSweigart/status/1191436575659311105",Sí,1016
mivbxe,"I was finally hired as a junior software developer, and it only took me.... seven years! Here's a quick write up on my journey for those on a similar path.",2021-04-02 22:29:23,NotTreeFiddy,https://www.reddit.com/r/learnpython/comments/mivbxe/i_was_finally_hired_as_a_junior_software/,46,"I began learning to ""code"" when I was a teenager. I got very into the scene of making websites for hosting sprite comics (despite making no more than two or three strips in my life time ha). I spent time at htmldog learning HTML, and the very basics of CSS but actually spent more time in Photoshop creating layouts and splicing them up. I then learned more of CSS as I moved on to creating templates for forums (do we all recall proboards for our favourite video games, hobbies and tv shows?). During this time, I also learned some JavaScript and ActionScript (because no worthwhile site at the time didn't have a flash based splash screen). This all stopped at the ripe old age of 16.

Flash forward to my early twenties. I got the urge to pick up programming again, with the idea of learning to become a web developer (mostly as a hobby). I did however, have an awful ""career"" in retail and was hopeful I might one day be able to transition into a programming career. It was at this time I also discovered Python (thanks Reddit). I spent the next 12 months learning both webdev skills (html, css frameworks and now properly learning JavaScript) and slowly falling in love with Python. I subscribed to every Python subreddit, forum, learning resource and YouTube channel I could find. In particular I went through the entirety of Learn Python the Hard Way, which gave me a solid foundation and also went through the Codecademy track and FreeCodeCamp.

Unfortunately, this was the point that I fell into tutorial hell. I became completely reliant on tutorials. I wasn't able to think up projects and implement them by myself. All I could do was follow a tutorial from beginning to end (and not even always to the end), and honestly not understand half the code that I was typing. I did make a conscious effort not to copy and paste code, but without truly understanding what the code I was typing did, it didn't really make much difference. This began a yearly cycle of ""getting into"" Python, following tutorials until I burned out, not learning much and then just stopping. This rinse and repeat process happened over and over until I hit my late twenties.

I had spent literally years wanting to be a professional developer, but had never felt confident enough in my skills to go for it. I occasionally sent out a job application for junior positions hoping they'd take me on in the form of an apprenticeship, but looking back I can see just how laughable my applications were. I had _nothing_ to show in the form of a portfolio. Nothing that wasn't just a rehashed tutorial project with a few variable names changed and some different choices of colours. During this period, I did manage to escape the dreaded world of retail. I landed a customer service position in Supply Chain for a large company, and from this managed to form a real career working through the various departments that existed there. This was great for my self-confidence and my wallet, but it absolutely did not excite me. 

I had started doing things like Project Euler, Advent of Code and other similar coding challenges, and I found that I loved them. They gave me a challenge without many clues of how to solve it, and I had to just go at it with Python to try and get a solution. Obviously, I would get stuck and then hit the search engines, but this was one of the greatest lessons I had every learned - it is okay to search for the gaps in your knowledge. These challenges pushed me to learn all kinds of programming concepts I'd never really come across before, and they did it in the form of a game. I learned about recursion, regex, proper uses of functions, classes and dictionaries (and creative ways to iterate through them) and so much more. Best of all, once I'd solved these problems I'd head over to their communities and look at other peoples solutions. This was a game-changer. Now I could see how my brute-forced (but successful) attempts were clumsy, and how I could have written them more elegantly and efficiently. I'd go through this very positive feedback loop of solving these problems, searching when I needed help and then comparing with others and repeating, and it felt great. Eventually, I realised that I'd built up enough skills doing this that I could actually automate a few of the more boring tasks at work. I read through the highly recommended 'Automate the Boring Stuff' by Al Sweigart and off I went.

In about 12 months I had automated nearly every report I had involvement with, automated all date collection from our various suppliers and customers, and even managed to use PyAutoGUI to automate some of the mind numbing and repetitive tasks I had to do in SAP (where I was only allowed access to the GUI, no scripting...). I created a few Flask apps that allowed me to do some of this and share a bit of it with some close co-workers too, but mostly I kept this to myself. Early on in the process of doing Project Euler I had created a GitHub to host my solutions, so I regularly added and updated my scripts on there to.

At this point, I had completely fallen in love with programming. I wanted more. I needed more. I knew at this point, that I would only become more miserable in my current career and decided at this point that I would aim to gain employment in a junior software position within 12 months. And then COVID came... This was a blessing and a curse. The job market became a mixture of stagnant and more competitive due to all of the lay-offs. But I had way more time on my hands thanks to permanent remote working. During this time I threw together a few simple web dev projects so I had something of a portfolio, but more importantly I tidied up all of the scripts I'd been using at work and threw on some READMEs explaining what they do and why I'd created them. I sent out regular job applications during this time, for all kinds of positions. Then in January, it happened. 

I applied to a small company that specialises in open source software and they got back to me asking if I'd like to interview. I spoke with the managing director and explained to him why I'm interested in the role, why I thought I'd be a good fit and then went through some typical interview questions. We got on well, and it turned out that the software they create is similar to the software that I was using and automating every day (SAP). I then went on to a second interview, this time with HR and their lead developer, where I was asked some question on how I would solve several problems in general terms (I didn't have to actually code anything). This went well and I was offered a junior position the following week.

I'm now just over 6 weeks in role, and I feel absolutely in over my head. Every day I hit wall after wall of problems I have no idea how to solve, and feel like I'm constantly fighting our framework of choice. But I love it. I'm finally doing it every day, and someone is actually paying me to do so. I can hardly believe it. I have a long way to go, but the team I'm in is super supportive and I can't wait to get the training wheels of and really get stuck in to something.

All in all, going from an interest in python to working as junior python developer took me a little over seven years. Could this have been done quicker? No doubt. If I had the right focus from the beginning, this probably could have been a year or two. But if my grandmother had wheels she'd be a bicycle. This is the pace it took me, and ultimately I'm really happy.

I know many of you learning have read similar stories before, and I know mine may not be that different from others, but hopefully a few of you might get some helpful takeaways from my story. If I was to summarise the keys steps that landed me employment, it would be these (this is the TLDR):

* Learn the basics of the language, and learn them well. Learn about data types, for loops, while loops, how to iterate through lists, take inputs. Learn about booleans and boolean logic. Learn about functions and classes (and perhaps a bit about object oriented programming). I spent far far FAR too long on this step...

* Learn how to make something. This can be anything. For me this was simple calculators and games to begin with, and moved on to simple programs that could rename files in my media folders.

* Take part in challenges that make use of programming. I adore Advent of Code and the community surrounding it, but there is also Project Euler, Code Wars and I'm sure plenty of others. Take your time with these. Don't cheat (by searching for other solutions before completing your own), but do feel free to use search engines, Reddit and Stack Overflow for ways to achieve sub tasks within your solution. When your done definitely go and compare against other people's solutions, and make note of why someone else's might be better.

* Make use of tutorials and and websites such as Codecademy, but don't *rely* on them. For anything you make during a tutorial, make something similar but different making use of your new skills and using stack overflow to fill gaps in your knowledge for features that weren't covered in the tutorial and that you don't already know.

* Create a GitHub and upload everything you make. Tidy things up and and README files to them.

* Soft skills / related skills: These are all the things you can transfer from other employment such as leadership, teamwork, effective communication etc, but also related tech skills. On my journey I learned how to use Linux, became comfortable with the command line and set up my own VPS on Digital Ocean (and one on Linode). This is NOT as difficult as it might sound if you've never done it before, but it does take some learning.

* Find ways to implement what you learn in to your current job if possible. Automate some processes. Scrape useful data. 

But really, all of the above can be shortened to: Study the language, build things, showcase what you've built.

A massive thank you to /r/learnpython as this has been one of the biggest sources of support for me over the years, and I'd never have gotten this far without it. If anyone is in a similar position to me prior to getting the first job, feel free to ask any question or reach out for some encouragement.

---

Edit: Thank you very much to those who have given me awards for this post. I'm glad that this could be useful to many of you, and it means the world to me that you felt strongly enough to send such a kind gesture. But please can I implore anyone else who is inclined to do so: Please spend your money on another good cause instead! Send a donation to doctors without borders, Reddit has plenty of money :)

I've tried to answer any question you guys have posted, but if I've missed anyone I'll try to make sure I get back to you shortly.",Sí,1017
k51frp,Got my first offer as a python developer,2020-12-02 03:40:52,rujole13,https://www.reddit.com/r/learnpython/comments/k51frp/got_my_first_offer_as_a_python_developer/,146,"I’ve been consulting for this company as an accountant and I just started writing scripts to automate some of the work they were doing. I also mentioned some ideas I have to automate a huge chunk of their AP process.

 I got a call tonight from the CFO with an offer to work full time, big raise, fully remote as a junior python developer/data analytics. I’ve been working my ass off trying to get a base knowledge of python over the past months. I just didn’t expect this quick of a turnaround and am so happy. I can’t believe I don’t have to trudge through a day of doing shit I don’t want to do before I get to code, now I get to do It at work. I’m ecstatic.

Thank you to everyone who has answered my questions in here. Happy holidays ❤️

*EDIT: I see all the questions under this post I’m going to answer all of them tonight",Sí,1009
y38qqx,"New, free book from Al Sweigart: Python Programming Exercises, Gently Explained",2022-10-13 20:14:10,AlSweigart,https://www.reddit.com/r/learnpython/comments/y38qqx/new_free_book_from_al_sweigart_python_programming/,83,"Hello, I've released my new book ""Python Programming Exercises, Gently Explained"". You can read it for free at:

https://inventwithpython.com/pythongently

Description: Many books and websites have aggressive programming challenges for top coders. However, *Python Programming Exercises, Gently Explained* is for the rest of us. We want challenges that improve our coding skills, not leave us confused and discouraged. Other tutorials and books have taught you the basics of Python, but the 42 programming exercises in this book let you practice what you've learned. Selected for their simplicity, these programming problems include gentle explanations of the problem, the prerequisite coding concepts you’ll need to understand the solution, and helpful templates to put together the programs if you have trouble starting from scratch.

This is the perfect book for beginner and intermediate programmers who want to test their Python skills but aren’t ready to begin professional-level software development. You don’t need the frustration of being expected to create complex algorithms and computer science theory; you need a large set of programming challenges that meet you at your level, with gentle explanations.",Sí,1000
j0d2xj,I got an invitation from Google's Secret Hiring Challenge!,2020-09-26 20:20:53,LaaNeet,https://www.reddit.com/r/learnpython/comments/j0d2xj/i_got_an_invitation_from_googles_secret_hiring/,140,"Today in the afternoon I was typically googling some stuff about Python, minding my own business. A normal day for a normal programmer, right? Not for me this time! Suddenly, from one of my searches, I got the message from Google page saying: ""You're speaking our language. Up for a challenge?""

For the first few moments, I did not realize what was going on. Did I open some shady Google-like website? Was this an ad...? The layout itself seemed kind of mysterious. Like it led you to a secret, dark room for a mission to save the world from publicly unknown powers. lol. Regardless, I clicked the ""I want to play"" button.

The page looks like a typical command-line interpreter. There are 5 total levels, one challenge for the first level, two challenges for the second, three challenges for the third, and so on...

I was so thrilled that I've been coding non-stop for almost 7-8 hours. They are super fun to do and they surely get harder along the way! I've recently completed level 3 and the page asked for my personal information so they can contact me for an interview (maybe, who knows?!).

Obviously, as a second-year student, I did not expect this kind of opportunity at all. I don't even know where all of this will lead me to, but one thing is sure, as I keep doing these challenges, it brings valuable experience and knowledge to the table!

I am really excited about this. I wholeheartedly wish you, too, the best of luck in the near future!

BTW, the platform is called Google FooBar.

[Image of the Website](https://imgur.com/a/RzR5lTI)",Sí,995
gmcgvc,Holy fuck I get it now my dudes.,2020-05-18 23:04:34,juanthrustman,https://www.reddit.com/r/learnpython/comments/gmcgvc/holy_fuck_i_get_it_now_my_dudes/,115,"I've been learning python for the past several weeks, and I'm working on creating an FTP program using PyQt. I was struggling understanding the vocabulary so I just spent the past 1.5 hours rewriting down the terms trying to understand them. Everything just clicked and I think I finally understand how OOP works.

**EDIT:** Lots of people where asking how I studied. I'm working on writing down all of my notes Understanding the code is important but I think if you can't explain the terms or what you're coding. It will only hold you back.

**EDIT 2:** Below are the vocabulary terms, I've been trying to memorize. I've been trying to use these terms to explain to myself how my code works. This has been helping me ""connect the dots"" I have some examples below.

EDIT 3:

Okay this was actually a lot fucking harder than I thought it would be. If the definitions or code needs to be corrected. **PLEASE LET ME KNOW I DON'T WANT TO SPREAD INCORRECT INFORMATION!!**

&#x200B;

* byte code -  representation of the python program in the interpreter
* complex numbers - extension of the familiar number system which all numbers are expressed as real and imaginary
* decorator - A function that modifies another function. Return value is a callable object
* dictionary - A python datatype composed of keys + values. Can be a variety of data types
* duck typing - object properties determine what it is.
* first class object - Object that can be created dynamically, stored in a variable, passed to a function, returned as a result (ex: variables, lists)
* greedy regular expressions - Regular expressions that match the longest string possible, \* + ? Counterparts are \*? +? ?? these are non-greedy (shortest string)
* hash - number used to relate objects for storage in a hash table.
* hash table - An object that maps keys to values
* hashable - An object is hashable if it implements hash.
* list - A series of values that can be changed
* tuple - similar to a list. However this is a sequence of values that cannot be changed
* nested scope - Where a function inside a function, can refer to values in the outer function.

TIME FOR THE SUPER IMPORTANT ONES:

* **Immutable Object** \- An object with a fixed value. Immutable objects cannot be altered. A new object has to be created if a different value has to be stored. ex: tuple
* **Mutable  Object** \- An object that can be changed after it is created
* **Attribute** \- Values associated with an individual object, accessed using dot syntax. Ex: a.x means fetch the 'x' attribute from the 'a' object. **Can be also called properties**. Accessible though object creation.
* **Functions** \- A reusable block of code written to preform a single related action. A block of code written to do one thing.
* **Classes -** Define the general behavior objects can have. A template for creating user defined objects.
   * **Instantiation** \- Making of an object from a class
   * **Instance** \- Creation of an object from a class.
   * **Object** \- Any data with attributes + values, and defined behavior (methods)
      * *From my research An* ***Instance*** *and an* ***Object*** *can be referred to as the same thing, these words can be used interchangeably. If someone has a clearer explanation, please feel free to comment.*
   * **Class attributes** \- Variables owned by a class and shared by all instances of a class.
   * **Instance attributes** \- Attributes that are owned by once specific instance of a class and not shared between instances
   * **Methods** \- Functions that ""live"" inside of a class. The functions work the same as normal functions. They are just called methods to differentiate them from functions that don't ""live"" inside of a class.
   * **\_\_init\_\_** \- is a method (function that lives inside of a class) that runs when an instance is created. It is used to create instance variables.
   * **self** \-  'self' is nothing special, it is a word used to reference the object the  class is assigned to. when you create instance variables with **init** or other methods. self is passed to connect the methods to the object. Also prefixing variables with self, allows every method in the class to access the variable, and any instance(object) created from the class can access the variable.
* Classes -> Blueprint, Instances -> Things that can be made
* **super()** \- Helps python make connections between parent and child classes.
   * Classes can inherit from other classes
* **Multiple Inheritance** \- When a class inherits the characteristics of more than one class
   * This  creates the famous diamond problem AKA ""The Deadly Diamond of Death""  (sounds way cooler tbh). If Class D inherits from B and C, in what order  does the class inherit.

A

/          \\

B            C

\\            /

D

* Method Resolution Order (MRO) - Looks to solve this problem, used primarily to  determine the order in which methods(functions apart of classes) should  be inherited in the presence of multiple inheritance.
* Python uses the [C3 Linearization Algorithm](https://en.wikipedia.org/wiki/C3_linearization) for MRO - This algorthm is difficult to understand. I think python provides a built in function to determine what methods are inherited first.

&#x200B;

**I CAN USE DEFINITIONS ALL DAY LONG BUT LETS TRY TO VISUALIZE EVERYTHING**

&#x200B;

    class cat():
    '''
    This is a class attribute(property), it can be accessed by all methods inside  the class by invoking the class name followed by the property ex: class.cat
    We can define class properties that will effect all the methods(functions)     inside the class
    '''
        breed = 'calico' 
    
        '''init function used to create instance(object) variables.'''
        def __init__(self, name, age):
        
    '''we preface self with a variable name so every method in the class can    access the variable, and any instance(object) created form the class can access the variable.'''
            self.name = name 
            self.age = age 
    
    
     
        def sit(self):
    '''We're calling a instance variable defined in another method'''
            print(self.name.title() + ' Likes to sit on the table')
    
    
        def cat_type(self):
     '''We're calling a instance variable defined in another method and calling a class attribute'''
            print('My cat is ' + self.age + ' years old and is a ' + cat.breed)
    
    
    '''This creates an instance(object) and defines instance variables self.name='Max', self.age='6'. Instance variables are unique to that instance. We're instantiating(creating) the my_cat object from the cat class'''
    
    my_cat = cat('Max', '6') 
    
    '''This creates a different instance(object) and defines new instance variables'''
    
    another_cat = cat('Sophie', '8') 
    
    '''Here we're looking at the sit attribute associated with the object my.cat'''
    my_cat.sit()
    
    '''Here we're looking at the cat_type attribute associated with the object another_cat'''
    another_cat.cat_type() ",Sí,989
huezhd,7 Beginner Python Project Ideas,2020-07-20 04:35:20,CuriousExpert24,https://www.reddit.com/r/learnpython/comments/huezhd/7_beginner_python_project_ideas/,101,"# 7 Beginner Python Project Ideas

These are some of the beginner project ideas that I have done when I was learning Python. Hopefully, it helps anyone who reads this too. Here are the project ideas:

1. **Any Type of Card Game** \- I personally made Blackjack due to its simplicity, but any other type of card games such as rummy would also work. Building most types of card games can help you master fundamental concepts of Python.
2. **Hangman Game** \- Hangman is a great game to test a person's knowledge of the beginner programming concepts such as lists, loops, and conditional statements. A simple Hangman game on the console is usually recommended for beginners
3. **Strong Password Generator** \- These can make use of the random module that is present in python in order to create random strings of numbers, letters, and symbols. You can also use the String module as I did for the project.
4. **Guess the Number Game** \- This is recommended for the very new Python beginners who only have a few days or a few weeks of experience. This also uses the random module to create a random number that the user has to guess.
5. **Login System -** This is where the program lets a user login to the system and lets them create an account if they haven't. This takes advantage of Python's ability to read and write to text files, which can be used as mini-databases. Highly recommend trying this project out
6. **Mad Libs Generator -** This is probably one of the most common project suggestions that you would find on the internet. But, it's a good one to try. It gives you a chance to experience all the beginner topics in a fun way.
7. **Text-Based Adventure Game -** This might also be one of the most commonly suggested ones, and it does take a long time to build a well-designed, long, and complex game. But, it's definitely worth trying to do as it will be very rewarding in the end.

Let everyone know any other idea in the comments for this post so that they will have a greater variety of options to choose from. Also, feel free to suggest any other types of project ideas (pygame, GUI, intermediate) project ideas that you want to know. I could also share the best youtube tutorial links for particular projects to anyone who wants guidance through these projects. Hope you have great fun building these projects and advancing your Python skills!",Sí,967
etwubn,From struggling with for loops to a government database administration job-- in one year,2020-01-25 21:22:02,NovateI,https://www.reddit.com/r/learnpython/comments/etwubn/from_struggling_with_for_loops_to_a_government/,57,"TL;DR-  I'd like to thank all of r/learnpython from the bottom of my heart for being an amazing and helpful resource from day 1 of my python journey.  Never give up on programming, and never stop learning. Practice, practice, practice.

One year ago, I started out with zero programming experience and zero security experience. I got placed in my high school's technology course to fill out my schedule. I spent about two weeks watching Bob Ross and following along in MS Paint before my teacher recommended that I learn something useful. He mentioned something called Python, and told me to look into it. I immediately fell in love with it. It was fun to use, easy to write, and extremely flexible. I struggled a lot when I first started, and my first program took me longer than I care to admit. It was extremely simple:

    num = int(input(""Enter the number: ""))
    if num == 1000:
        print(""The number is 1000"")
    elif num > 1000:
        print(""The number is greater than 1000"")
    elif num < 1000:
        print(""The number is less than 1000"")
    for i in range(num, 0, -1):
        print(str(i))

I struggled for three days with type errors and the loop threw me for a loop. It was frustrating, but the feeling of reward and pride when I saw those numbers printed out correctly inspired me to stick with it. Those, in my opinion, are the two most useful virtues to have when learning programming: passion and perseverance. I poured time into Python, spending 6-7 hours a day programming and the rest thinking up projects and reading reddit posts about programming.

Not long after, I decided to move on from small programming exercises and start a real project. I found that picking a project that forced me to learn new things about python greatly helped me. I wrote a text based dungeon crawler, and it taught me about classes, function, and dictionaries. It's a hot mess (4k lines of insane code- [you can see it here, in all its nasty glory](https://github.com/Mili-NT/Dungeon-Of-The-Silver-Key)). I was proud of it, and I honestly still am. The location system was insanely difficult for a new programmer, and it even drove me to tears on a few occasions. I was so proud I decided to enter it in my state's technology competition in project programming.  I won local and districts, but didn't place at state.

&#x200B;

After that, I discovered my other passion: cybersecurity. Like I did with Python, I fell in love with it and spent hours upon hours reading, doing CTF exercises, and messing around with networking. I decided that cybersecurity was what I wanted to do with my life. Just like python, what helped me most here was hands-on practice and time. Getting stuck in a cycle of reading and not practicing is easy, but you only really learn by doing. Doing hack the boxes, Capture The Flags (such as the ones at [over the wire](https://overthewire.org/wargames/)), and messing around with vulnerable VMs like DVWA and Metasploitable was crucial to learning for me.

Over the summer, I got an entry level IT support job with a contractor that worked with my high school. It was a lot of grunt labor at first, hauling obsolete systems off for disposal and such. As the summer progressed, we started updating chromebooks by hand for 9 hours a day. I was bored as all hell, so I turned once again to python. I wrote a small script to scrape public text documents off of pastebin. It was slow, got banned every 40 minutes or so, and really was just a stream of random data deposited in a onedrive folder for me to look through.

&#x200B;

Over the summer and through the year, I honed it into the crown jewel of my python projects. It went from a shitty script made from boredom to a tool for malware collection and data analysis. I dubbed it [BinBot](https://github.com/Mili-NT/BinBot) and worked on it constantly. I decided to enter it in the tech competition again. I swept locals, and impressed the judges so much that one judge offered to put in a recommendation to a manager he knew for a part time job at the google HQ in Atlanta.

Today was the regional competition. I presented BinBot as an open source threat intelligence program. I demonstrated how it worked, what it's potential in a security workflow was, and to accompany it, I walked the judges through an analysis of an Emotet sample I did. I showed how BinBot alerted me to a potentially malicious URL, how I retrieved the malicious word doc and deobfuscated the powershell payload, and fetched the live payload from a compromised domain and ran it through HybridAnalysis. They were extremely impressed, and I won first place.

&#x200B;

Afterwards, the regional IT supervisor and the head of the board of education came up to me and offered me a job as a Database Administrator. They said the old admin has retired, and that they wanted to hire me. The work is fully remote and has government benefits, which means I can continue doing it when I go off to college. I'll be setting up, writing queries for, and maintaining every database in the entire district. I'm extremely excited and grateful.

Thank all of you for helping me, answering my stupid questions, and never stop learning. Hack on, brothers.  


edit: Link to a markdown version of the emotet analysis [https://pastebin.com/FgcDQt3g](https://pastebin.com/FgcDQt3g)",Sí,959
vbjg65,It’s insane how easy learning is when you have an end goal.,2022-06-13 18:55:34,timmeedski,https://www.reddit.com/r/learnpython/comments/vbjg65/its_insane_how_easy_learning_is_when_you_have_an/,120,"When I say an end goal I don’t mean an end goal of “learn python”.

For me I’ve tried to get into python for years but I never really had a simple use for it at work. I’m sure I did, but it never came to mind.

I recently started a new role, and a lot of the role is cleaning data via excel. I figured this can easily be automated and save like 30 of my 40 hours a week. So here I am running code to clean data instead of spending all my time manually cleaning the data. Plus I’m understanding so many things I never understood before because I had no “goal” for it.

Codes not done yet and it can be improved upon greatly, but I’m so happy to be using it.",Sí,948
j8su3p,Don't quit,2020-10-10 21:36:31,jonnycross10,https://www.reddit.com/r/learnpython/comments/j8su3p/dont_quit/,132,"Idk who needs to see this out their but if you're struggling to find the motivation to keep learning python or programming in general, don't give up. What worked for me is finding a project that would challenge me, and set aside time every day(or however often you can) and just struggle through it. Once you make it through, it's one of the most rewarding feelings ever. Every hurdle you jump over in the learning process is one less that you have until you meet your goal. You can do it! I spent 6 hours yesterday struggling to learn canvas' api and I finally got it to work perfectly and now I know so much more about requests, headers, responses, and more. And I'll continue to keep struggling and learning until I've met my goals and move onto whatever's next :). Good luck out there, I believe in you!",Sí,951
gabj9m,Finally did something I am proud of - Helping others with Python!,2020-04-29 15:26:19,LittleEaster,https://www.reddit.com/r/learnpython/comments/gabj9m/finally_did_something_i_am_proud_of_helping/,76,"I have been dabbling in programming for a few years now, but with a full-time job and other commitments, I never really made the time to create something truly useful. 

I went through the web scraping phase, made simple scripts to move files out of my downloads folder and place them into the respective folder based on their extension, and I was quite content with this kind of simple stuff. 

But now I finally feel like I made something worth while! While quarantined with the fam, I overheard my mom trying to resize 100s of product images for her e-com site. 

Mom is not technologically incapable, she knows how to google ""Image Resizer"" or something along those lines, but she always does them one-by-one. A huge time sink. I did not know she does this every time she gets new images from her vendors. 

**Mom:** ""This is going to take me forever! This vendor never sends me the right image size, every quarter this takes hours, ARGHHH!""

**Python Noob:** ""I think I can get this done in a few minutes for you, mind if I give it a go?""

After some googling I proceeded to use the Pillow module to iterate through all of the images in a folder and plop them into a new folder, nicely resized. This took me like 10 mins to resize all of the images, she was blown away. 

I went one step further though because I knew this was a recurring thing for her. I needed to make a proper desktop icon for her to clickity clack and immediately have 100s of images resized anytime. A few youtube videos later, and she was able to double click an icon on her desktop to resize product images anytime without needing the command prompt. 

It took just a few minutes to teach her how to put the original images in folder X, double click the image resizing icon, and the new images would be in folder Y shortly thereafter. 

Needless to say, she is super happy to be able to resize all of these images in bulk, saving her HOURS of her time. I am on Cloud 9 as well because I feel like I've finally put my programming wherewithal to good use by helping my mom with something so practical. 

I'm excited to continue learning new ways to make life easier with the ""magic"" of python. 

TL;DR - Finally did a thing in python and feeling quite good about it!",Sí,940
mtwjwy,I created an app in PYTHON.,2021-04-19 09:01:55,AkshatCha,https://www.reddit.com/r/learnpython/comments/mtwjwy/i_created_an_app_in_python/,132,"Hey! I am 14 years old and I have made a free and open source app in PySide2.

Its name is MrPlayer and it is Mp3 Player which plays songs from local folder with lyrics which is extracted from [genius.com](https://genius.com/) but for lyrics you need to create a genius API token which is very simple. It is a full fledge app, please check it out on [https://AkshatChauhan18.github.io/MrPlayer](https://akshatchauhan18.github.io/MrPlayer) every detail is provided in website.

Please star the GitHub repository and all contributions are appreciated. It also have a CLI.

Please tell how it looks and what improvements can i make",Sí,935
e59vzp,"""Automate the Boring Stuff with Python"" Udemy course is free to sign up for the next 48 hours: DEC2019FREE",2019-12-03 02:13:49,AlSweigart,https://www.reddit.com/r/learnpython/comments/e59vzp/automate_the_boring_stuff_with_python_udemy/,92,"You can use this code to sign up for the Udemy ""Automate the Boring Stuff with Python"" course for free:

https://www.udemy.com/course/automate/?couponCode=DEC2019FREE

During the month of December, you can also use DEC2019 to sign up for $14 instead of the usual $50: https://www.udemy.com/course/automate/?couponCode=DEC2019

Due to the way Udemy now does promotions, I'm limited in how many discount codes I can make each month, so there's no way for me to make more after the 72 hour period, which ends roughly Wednesday night 7pm Pacific time.

I'll have the second edition of the book in HTML format online, uh, soon. I've had some delays getting it ready. The online course follows the 1st edition, and I won't be able to update it until probably mid-2020. I'll write up a blog post about what exactly is new in the 2nd edition soon too. Go ahead and get started: the Udemy course is still useful.

The 1st edition is free online under a Creative Commons license, but if you want to buy a print copy of the book, I recommend getting it directly from the publisher instead of Amazon; you get DRM-free ebook copies in PDF, Kindle, and epub formats for free with the print book: https://nostarch.com/automatestuff2",Sí,932
mhw66i,Beginner's Python Cheat Sheets (updated),2021-04-01 14:12:40,ehmatthes,https://www.reddit.com/r/learnpython/comments/mhw66i/beginners_python_cheat_sheets_updated/,57,"Hello everyone. I've been wanting to update the Beginner's Python Cheat Sheets that accompany Python Crash Course for a while now. I finally made time over the last month to go through the entire set. I originally developed the sheets in Word, which was not a particularly sustainable approach.

I rewrote all of the sheets in a proper desktop publishing app (Indesign, if you're curious), so I can easily revise them as needed from this point forward. If you find any errors or issues that haven't been addressed, please let me know and I'll get them fixed promptly. I also made a number of other improvements in the process:

- There's an entirely new sheet that focuses on using Git.
- All sheets are available in the original full-color design, and a printer-friendly black and white set is included as well.
- The download includes a single 28-page document which includes all the sheets, as well as a folder where each sheet is its own document. This can be helpful if you're focusing on one specific area of Python.
- A number of minor errors and outdated sections have been corrected.
- As always, they're not specific to Python Crash Course; they've been helpful to many people, regardless of your primary learning resource.

The updated sheets are hosted on [Leanpub](https://leanpub.com/beginners-python-cheat-sheets) and [Gumroad](https://gumroad.com/l/python-cheat-sheets), and there's an option to download the full set at no charge on both platforms. Although I'm making it optional for people to pay a small amount for the set from this point forward, they will remain available at no charge as long as Python Crash Course is in print.

Thank you, and I wish you well in your Python journey. :)",Sí,930
iwdr8s,I actually used Python to do a thing!,2020-09-20 13:22:24,ManyAWiseMarklar,https://www.reddit.com/r/learnpython/comments/iwdr8s/i_actually_used_python_to_do_a_thing/,83,"I've been learning Python for maybe a month now, mostly with Al Sweigart's Automate the Boring Stuff, and last week at work I actually managed to write a script to automate something. My boss asked me to copy a list of file names (70+) in a network folder into a spreadsheet; this is not difficult to do manually but it's a faff so I thought I'd try using os.walk and... it worked!

I wanted to post here partly because I'm feeling smug, but also to try to encourage any other beginners who are thinking of / scared of / struggling with learning Python. I was always keen to try to learn something like Python but I'm crap at learning unless there's a real world application; Al's course is brilliant at teaching concepts, but then relating them to how you can actually use them to get things done in the real world, and that's made learning a lot more fun and doable.

Thanks also to everyone on this community for being friendly and supportive. I'm now going to go and delete all the comments from my script so none of my colleagues will ever be able to reverse engineer it...",Sí,914
bdzedl,"""Automate the Boring Stuff"" author refactoring beginner's code on a live stream Wed 4/17 at 7pm pacific",2019-04-16 21:22:21,AlSweigart,https://www.reddit.com/r/learnpython/comments/bdzedl/automate_the_boring_stuff_author_refactoring/,62,"EDIT: Thanks for checking out the stream. If you missed it, it's at https://www.youtube.com/watch?v=y2W1PiHctnE

Hello, Reddit! I'll be going over a short Python game written by a beginner and showing how I'd refactor the code so that it does the same thing but with shorter, more readable code.

I'll be streaming tomorrow evening, Wednesday 4/17/2019 at 7pm Pacific at https://www.twitch.tv/alsweigart/ and answering questions folks post to the chat room. If you can't make it, this stream will be recorded and later posted to [YouTube](https://www.youtube.com/user/Albert10110).

Some of the themes I'll cover are:

* How to avoid ""Choose Your Own Adventure"" style code, which depends on flow control instead of data structures.
* How to remove duplicate code (and why you'd want to).
* When you should replace multiple variables with a list or dictionary.
* How you can save yourself effort by using the Python standard library.

If you have programs you'd like to see me refactor, feel free to PM me or post as a comment here your pastebin.com link. To make sure the audience can follow along and it's easy to stream, I'd like to ask that they:

* Generally be between 10 and 300 lines of code in a single file.
* Only use the Python standard library and not require additional modules.
* Not require additional files, like files that need to be on your computer, or account info or special permissions or environment setups.

See you then!",Sí,905
n3yrpl,I found a job (Thanks to ya'll),2021-05-03 15:21:31,Dap0k,https://www.reddit.com/r/learnpython/comments/n3yrpl/i_found_a_job_thanks_to_yall/,88,"Ill try to keep it short but here it is: I was made to take a exam on the industry of the company, SQL and Pseudocode. 

Although, I didn't have any experience with SQL at all and only 4 days to get a basic understanding of it for the exam. The fact that I had some experience with Python made the the task a lot less intimidating. 

SQL and Python are hardly similar at all but having experience in another language and being able to think somewhat programmatically really helped in getting me a basic understanding of SQL 

When I took the test I got most of the SQL questions and the industry questions correct but according to my interviewers they were the most impressed with how I answered the pseudocode question

The Pseudocode they gave me was essentially Python Code!! it only had some missing bits but it was essentially a simple while loop with the same exact indentation that Python code is known for so it was an easy answer for me.

Later on, subsequent interviews they asked me about how I knew how to answer the question and I mentioned that I practiced Python on the side and they tested me on my knowledge of the language and I got most of their questions right (Keep in mind that I haven't programmed in Python for months but the knowledge stuck!)

It's all thanks to roaming this subreddit for years and all of your great suggestions for learning material THANK YOU ALL!.

TL;DR : I recently got a job at a large multinational company, due in no small part to all of you. thank you again!!",Sí,891
cvl5jy,Nothing is more liberating than learning python well enough to be able to answer questions on Stack Overflow,2019-08-26 08:17:01,GeneticalTM,https://www.reddit.com/r/learnpython/comments/cvl5jy/nothing_is_more_liberating_than_learning_python/,45,Seriously! Actually makes me feel vaguely skilled at the language!,Sí,875
w88ygy,a program I wrote 5 years ago was finally useful. feeling weirdly proud about this.,2022-07-26 03:30:49,TrainquilOasis1423,https://www.reddit.com/r/learnpython/comments/w88ygy/a_program_i_wrote_5_years_ago_was_finally_useful/,72,"5 years ago I started learning python so try and get a better job. I quit so many times, but slowly worked up enough knowledge to bullshit my way into decent career as a data engineer. 

Well tonight my wife, a teacher, was mad that she couldn't used any YouTube videos in her classroom because the network locked it out. Well 5 years ago just for learning I wrote a python program using youtube_dl that could download whole videos when given a url. Lucky I'm a data hoarder and still had it in an old hard drive. I showed it to her and 20 minutes later she had everything she needed. I'm feeling weirdly proud of this stupid little thing I made that was finally useful 5 years later. 

Don't give up, or at least don't give up completely. It might take longer than you had first hoped, but if my dumb ass can do this shit so can you.",Sí,872
fo6lbo,META: Pandas shouldn't be recommended to a beginner who wants to read a CSV.,2020-03-24 15:05:41,eyesoftheworld4,https://www.reddit.com/r/learnpython/comments/fo6lbo/meta_pandas_shouldnt_be_recommended_to_a_beginner/,130,"I'm on this subreddit a good bit, and any time anyone mentions wanting to work with data, without fail one of the first 
things that gets brought up is Pandas. I'm not convinced that is the best advice for people who are trying to learn 
Python, and I wanted to bring it up to the community to see what others thought.

Here's an example block of code that a poster might write if they want to open a CSV and show rows where a 
column matches a certain value:

    import csv
    
    f = open('path')
    reader = csv.reader(f)
    
    for row in reader:
        if row[0] == 'some_value':
            print(row)

It might not look like much, but opening a file using the `csv` module exercises a significant number of the fundamental 
aspects of the Python language. Among the highlights we have:

 - importing a module
 - assigning a variable
 - opening a file (using python's `open` builtin)
 - using imported code
 - `for` loops, iteration in general and the syntax for it
 - the concept of a list (because that's what rows are by default)
 - using list indexes to get a value
 - `if`/`else` statements
 - boolean expressions / the `==` equality operator
 - the print function

By slowly writing the code to perform this task and running it, they get exposed to all of these important concepts! We 
could even modify this example to use a `with` statement for the file, and show yet another important piece of Python.

Let's compare that to the same operation in Pandas, from a [very popular stackoverflow answer](https://stackoverflow.com/a/17071908/4453925):

    import pandas as pd
    
    df = pd.read_csv('file path')
    select = df.loc[df['column_name'] == some_value]

Sure, this is less code, and is ""easier"" as a result, maybe, but even as an experienced Python user, this block of code takes a 
minute to unpack, and what it fundamentally *does* is not immediately obvious. The poster probably copy + pastes it, runs it to see what it *does* and then moves on without any deeper understanding of what it means, programmatically, to search through a dataset for an item. It has the added negatives of doing three other things which are decidedly not good:

 - it renames an import, which has a time and a place, but to a brand new learner is both not obvious and not helpful
 - it shows overloaded behavior of `[]` which is uncommon and potentially confusing if they don't have a good understanding of the slice / `__getitem__` constructs
 - almost every Pandas example I've seen uses the same damn variable name, `df`, for any `DataFrame`, which doesn't do
any good to hammer in the importance of good, descriptive variable names. I'll admit this might be a silly gripe.

This example leads directly on to the next point: Python can be *beautiful*. It is a concise, yet expressive language, and 
one of the most amazing things about it is that the creators have worked hard to make sure it has a certain feel to it: 
when an API is written ""pythonically"", you can intuitively understand how to work with it, if you are familiar
with how Python works. The `csv` module is no different, and it starts to give users an idea of what that means. 
This is another place where Pandas falls short for the beginner: it does not tend to exemplify this important aspect of the 
Python language.

All this said, Pandas is an awesome, powerful library and it has an important place in data science and Python in general. 
When you work with data  *all the time*, having a very concise way to express your data manipulation is 
both helpful and desirable. However, I do not believe that it should be enthusiastically recommended to new 
users of Python because pointing someone towards Pandas and telling them to use it when they work with 
data is not a useful or effective way for folks to learn about the fundamental underpinnings of the Python language.",Sí,874
htyr40,I made a script that automatically adds all songs from youtube playlist to spotify playlist.,2020-07-19 11:04:16,ELIMINADO,https://www.reddit.com/r/learnpython/comments/htyr40/i_made_a_script_that_automatically_adds_all_songs/,40,"This project was super fun to make and i learnt a lot.

Github repo:  [https://github.com/piyx/add-yt-songs-to-sptfy-playlist](https://github.com/piyx/add-yt-songs-to-sptfy-playlist)",Sí,858
gd70np,I wrote my first useful Python program!,2020-05-04 07:25:49,8rnlsunshine,https://www.reddit.com/r/learnpython/comments/gd70np/i_wrote_my_first_useful_python_program/,122,"For the first time in my life, I wrote a Python program from scratch to automate my work. My boss gave me the task of copy/pasting all the fields from a long online application form to a word doc and I wrote a code to do that in 5 minutes. It shaved off at least 40 minutes from my workload. It might not seem like much, but I'm over the moon :)

Edit 1: Thank you all for your kind words. Being part of this community has helped me immensely. I’m truly grateful to have found it.

For those who asked for the code, here it goes - https://github.com/abhisu30/OnlineFormExtraction

Edit 2: For those who asked, no I didn’t use my work computer. My boss asked me to email her the word file with the form fields so I executed this code on my home computer and emailed it to her.",Sí,857
nur6o9,TIL I’ve been making debugging statements harder than they needed to be.,2021-06-07 23:52:26,jwburn19,https://www.reddit.com/r/learnpython/comments/nur6o9/til_ive_been_making_debugging_statements_harder/,91,"I don’t know if I’m the only one who missed this, but today I learned that adding an ""="" sign to the end of an f-string variable outputs ""variable_name=value"" rather than just the ""value""

Makes writing quick, clean debug statements even easier!

    In [1]: example_variable = [1,2,3,4,5,6]

    In [2]: print(f""{example_variable=}"")
    example_variable=[1, 2, 3, 4, 5, 6]

    In [3]:

Edit: Works in Python 3.8+, thanks /u/bbye98",Sí,854
m7cbsl,Just want to say THANK YOU to all the kind people always willing to help!!! It encourages people new to programming to keep pushing instead of giving up! It helped me!,2021-03-17 22:21:55,Sprincle,https://www.reddit.com/r/learnpython/comments/m7cbsl/just_want_to_say_thank_you_to_all_the_kind_people/,39,"I've asked a couple of times here for advice or help.


There were always people willing to help or share their opinion. No one was mean!


Did the same with Stack Overflow - it was disgusting. Almost made me want to quit learning because I thought there is no one that will try to help you.


This sub - a different world! 


**So thank you kind people that still remember that once they were beginners too! You have no idea how much it helps a newbie when s/he sees that there is a place to ask for help and no one is judging you!**",Sí,857
ld5c3e,5 Projects For Beginners To Learn Python,2021-02-05 11:33:33,NoSide005,https://www.reddit.com/r/learnpython/comments/ld5c3e/5_projects_for_beginners_to_learn_python/,87,"I have been involved in many discussions on here where i tell people the best way to learn is by doing but I never mention what to do. Below are the projects i think would be best for Python beginners.

1. **User inputs** \- Create an app that asks the user to input one character that must be a vowel. Continue asking for the input until a vowel is inputted. You can also give user feedback every time a non-vowel is entered or upon a successful input.
2. **Write a function** \- Write a function that takes in a positive integer and returns its multiplicative persistence, which is the number of times you must multiply the digits in the integer until you reach a single digit. For example the integer 39 returns 3. You get this by taking 39 and multiplying its digits 3\*9 which equals 27. You then multiply 27's digits 2\*7 = 14. Lastly 1\*4 = 4 which is a single digit. You had to multiply 3 times so you return 3. The integer 999 would return 4.
3. **Calculator app** \- Build a calculator app that performs multiple operations. Use the skills learned in projects 1 & 2. Try using many functions in your app, one for each operation (ex. addition, subtraction, multiplication, division).
4. **Read & write files** \- Build an application that reads a txt file and outputs a csv file. The app should take each line of the txt file, split the line into an array of words, and write each line to the csv file with each line being a row and each word being its own column in that row.
5. **Bots & webscraping** \- Using everything you have learned in projects 1-4, build a bot that scrapes data from a webpage and writes the data to a txt file. For example, you can have a bot go into instagram and pick a random person following you. Output their name to the first line of a txt file. Then go into their followers and repeat the process by outputting the name of this chosen person to the second line of the txt file. Run this until you get to 10 names. Make sure you add random time pauses in your code so that your bots don't get recognized by the sites you are scraping. If you have trouble starting this one, take a look at using Selenium Webdriver here: [https://selenium-python.readthedocs.io/installation.html](https://selenium-python.readthedocs.io/installation.html)

Write your answers to 1 & 2 in the comments. If you struggle with any of these projects we can provide guidance and solutions in the comments.",Sí,856
p249dn,"Beginner learning Python at 40 here. Any friend like me, please raise your hand!",2021-08-11 02:45:21,Elegant_Inflation457,https://www.reddit.com/r/learnpython/comments/p249dn/beginner_learning_python_at_40_here_any_friend/,299,"Yes, everyone said that we can learn programming at 40! But the key success is about how can we over come the challenge.

I have started python two months ago. (slowly). and it's been painful. Even I am a believer in life long learning but sometimes age get in your way. 

I think one of the key success here is that we have a strong community support (or at least, I need a moral support) so I want to create a thread where people can ask question safely and some place where they can vent out their frustration. 

so anyone who start programming fresh at 40s please shout out here!",Sí,851
ao3zq2,"Al Sweigart, author of the legendary 'Automate The Boring Stuff' book (and many others) now streams beginner-friendly live coding on twitch!",2019-02-07 13:59:17,callmelucky,https://www.reddit.com/r/learnpython/comments/ao3zq2/al_sweigart_author_of_the_legendary_automate_the/,52,"Find him here:

- https://www.twitch.tv/alsweigart

Thanks to u/fersloth for posting this info in r/Python, this is super exciting news for anyone who watches twitch and wants to learn to code from a professional programmer and educator in an interactive environment!
",Sí,853
hv9r5u,5 interesting Python modules,2020-07-21 15:49:39,CuriousExpert24,https://www.reddit.com/r/learnpython/comments/hv9r5u/5_interesting_python_modules/,100,"# 5 Interesting Python Modules

These are some modules that might not have day-to-day use for Python programmers but are still fun to try out and experiment with. Here are the modules:

1. **Wikipedia -** It turns out that you can import the whole Wikipedia into your Python Program! Simply run `pip install wikipedia` on your computer and import the module. There are multiple functions in the module such as summary(), search(), set\_lang() which can be used to create multiple interesting projects. More info at [https://pypi.org/project/wikipedia/](https://pypi.org/project/wikipedia/)
2. **Emoji -** This is a cool module that you can use to add emojis to your project. The emojis will be displayed in the command line for your project. To install it, run `pip install emoji`. More info at [https://pypi.org/project/emoji/](https://pypi.org/project/emoji/)
3. **Turtle -** This is one of the most well-known interesting Python modules. It comes pre-installed with the default Python3 package. Import turtle for graphics and simple 2d games. This is a module primarily used for creating graphics and cool visuals. More info at [https://docs.python.org/3.3/library/turtle.html?highlight=turtle](https://docs.python.org/3.3/library/turtle.html?highlight=turtle)
4. **PyDictionary -** This is a module containing the whole English dictionary! It can be used to find the definition, synonym, antonyms, and translations of words. To install it, run `pip install PyDictionary`. More info at [https://pypi.org/project/PyDictionary/](https://pypi.org/project/PyDictionary/)
5. **Arrow -** This is an interesting module used for advanced functions with date and time. This is the more advanced version of the dateandtime module that is built into Python. You need to run `pip install -U arrow`. More info at [https://pypi.org/project/arrow/](https://pypi.org/project/arrow/).

I highly encourage everyone to try these modules and use them for useful/important projects, at least for some of them :). Hopefully, I have given some inspiration for everyone to check out the many more interesting and useful modules that Python has. There are many more interesting modules in Python, but these are the most interesting ones that can suit beginners and intermediates. Feel free to add your own suggestions in the comments for this post. Also, you can add your own opinions about these modules so that the readers can also get another perspective for these modules. Thank you all for taking the time to read this post!",Sí,846
ocvfzr,"I'm a Computer Science Teacher in the UK, thanks to this subreddit and a few notable Python Youtubers - I'm now able to help more young people get into coding.",2021-07-03 10:22:18,MatiasUK,https://www.reddit.com/r/learnpython/comments/ocvfzr/im_a_computer_science_teacher_in_the_uk_thanks_to/,57,"Just wanted to say thank you, really - to anyone that contributes on this subreddit, you are playing your small part and giving people real genuine life skills. 

I've also managed to start my own YT channel which focuses around using Python to fight back phishing scam emails/texts. It's given me a new lease of life.

So just once more, thank you.",Sí,830
dob4kd,For begginers who are searching for what to do after finishing a course,2019-10-28 16:22:38,whole_extraordinary,https://www.reddit.com/r/learnpython/comments/dob4kd/for_begginers_who_are_searching_for_what_to_do/,68,"I have been lurking around in this subreddit for quite a while and what I have noticed is people ask the following questions a lot:

* What to do after I finish a course?
* What projects should I build?
* What should I learn next in python?

So if you are asking one of these questions this article is for you.

Enjoy!

I would first recommend anybody to learn the following interesting and helpful modules in python like:

1. Beautiful soup to do web scraping.
2. Tkinter for building basic GUI/apps.
3. PyGame for game building with GUI.
4. Os to mess with files and folders.

I would also recommend you'll to go through the book, [""Automate the boring stuff with python""](https://automatetheboringstuff.com/) from [chapter 7](https://automatetheboringstuff.com/chapter7/) if you'll are familiar with most of the stuff in python otherwise start with [chapter 1](https://automatetheboringstuff.com/chapter1/). Some projects which could be done with those modules are:

1. A very common project with beautiful soup module is scrapping every day's weather forecast.
2. Building a calculator, attendance recorder or an image hub like [pexels.com](https://pexels.com/) with Tkinter.
3. With PyGame there are endless possibilities and trust me game making is not so easy with PyGame though basic projects you'll could build are a flappy bird, a racing game, a top-down shooter game or a side scroller like Mario(well don't try to make the exact replica of Mario because that's tough!!).
4. If you'll want to build something very very basic try building rock paper scissors, cross and nuts, battleship without any GUI and output in the terminal itself.

Another thing which I would recommend is solving problems by going to these few sites

1. [Hackerrank.com](https://hackerrank.com/)
2. [geekforgeeks.com](https://www.geeksforgeeks.org)

Solving problems might get you'll to be demotivated and to be honest, it got demotivated too but I continued and I got my more confidence back afterwards.

And that's all. Doing these will give you guys a massive skill, knowledge and a confidence boost in python.",Sí,835
xcqs55,"I'm Al Sweigart, author of Automate the Boring Stuff with Python. I'm currently doing an AMA about my latest book on recursive algorithms.",2022-09-12 22:53:03,AlSweigart,https://www.reddit.com/r/learnpython/comments/xcqs55/im_al_sweigart_author_of_automate_the_boring/,34,"Please post question to the AMA thread rather than on this post. Thank you!

https://www.reddit.com/r/IAmA/comments/xcp6jv/im_al_sweigart_author_of_several_free_programming/

EDIT: Heyas, I'm done for the day. Thanks to everyone who asked questions!",Sí,833
hmvnt1,My Python regex ebook with hundreds of examples and exercises is currently free,2020-07-07 14:34:57,ASIC_SP,https://www.reddit.com/r/learnpython/comments/hmvnt1/my_python_regex_ebook_with_hundreds_of_examples/,41,"Posting with mod's permission.

---

Hello!

I recently updated my **Python re(gex)?** ebook. I had first released it at the beginning of last year (https://www.reddit.com/r/learnpython/comments/aevgbi/i_wrote_a_book_on_python_regular_expressions_it/).

My initial motivation was to add **epub** format and separate out **third-party regex** module content into a separate chapter. An email exchange with a reader, a look at feedback from the past year and my own improvements as a writer resulted in a significant overhaul. It took me about 6 weeks to complete the revision instead of 1-2 weeks that I estimated. Sounds familiar right? I’m definitely pleased with the changes, but along the way I added a long list of TODOs that will probably need months of work. Future me is not going to be pleased.

To get pdf/epub versions, use any of these links:

* https://gumroad.com/l/py_regex
* https://leanpub.com/py_regex

As a bundle (Python/Ruby/JS regex and grep/sed/awk cli tools):

* https://gumroad.com/l/regex
* https://leanpub.com/b/regex

I made **all my books free** at the end of March when the pandemic hit my country. The virus doesn’t seem to be going away anytime soon, so I’ll probably start charging again after I finish updating the Ruby and JS regex books, which will take me at least till end of July. You can still pay if you wish.

You can read the *entire* book from the GitHub repo - https://github.com/learnbyexample/py_regular_expressions. The repo also contains the **code snippets** used in the book and a handy way to access all the **exercises** in a single file. You can also find the **solutions** there. 

---

I’d highly appreciate your feedback. That’s been a major motivating factor to keep writing as well as for improving the content.

Happy learning :)",Sí,827
n6yd44,"Finally feel I've graduated from complete beginner and finished my first small project thanks to this sub. Here's the learning path you all recommended, and a small open source project I have to show for it so far.",2021-05-07 13:21:33,sam0jones0,https://www.reddit.com/r/learnpython/comments/n6yd44/finally_feel_ive_graduated_from_complete_beginner/,115,"Pretty much the entirety of my learning experience was guided by this sub in one form or another. From book recommendations to general path guidance. So thanks to all the posters here new and old.

The path I took was roughly as follows:

1. [Automate The Boring Stuff](https://automatetheboringstuff.com/2e/chapter0/). It's a popular recommendation and is available for free in it's entirety online. Goes from the absolute basics to useful things really quickly.
2. [Python Crash Course](https://nostarch.com/pythoncrashcourse2e) moves into more project-orientated learning. Great for when you want to start focusing on programs that span more than one file.
3. [Problem Solving with Algorithms and Data Structures using Python](https://runestone.academy/runestone/books/published/pythonds3/index.html) gets you thinking about program design, data structures and program complexity.
4. Kinda got stuck in ""tutorial hell"" for a bit at this point. Was looking for more books/tutorials to read and wasn't sure where to go next. Ended up doing a lot of [Codewars](https://www.codewars.com/) to gain confidence in non-guided coding.
5. While completing katas on codewars I found [https://realpython.com/](https://realpython.com/) and [https://docs.python-guide.org/](https://docs.python-guide.org/) to be endlessly helpful.
6. Wrote a few scripts to help admin my own computer before asking some friends if they had any mini-project suggestions. Which lead to me writing the project link I'll post below.

I have to say, doing a small project of *something* (jeez, is it hard to think of project ideas) is so very helpful for the learning process. It forces you to learn about things I didn't read too much about during any of the aforementioned books, like packaging, testing, typing, code documenting and properly using source control like github.

Anyway, the project I made:

[https://github.com/sam0jones0/amazon\_wishlist\_pricewatch](https://github.com/sam0jones0/amazon_wishlist_pricewatch)

&#x200B;

>*Periodically check your public Amazon wishlist for price reductions.*  
>  
>This package will send you a notification (SMTP email and/or telegram) each time a product on your **publicly available**  wishlist reaches a new lowest price. Price still not low enough? You'll  only receive another notification for the same product when the price  drops further.

&#x200B;

Perhaps this sized project doesn't really need tests, types and documentation of this level. But I did it primarly to learn, and to that end - succeeded!

Feedback and contributions welcome from devs of all skill levels, **happy to help others learn** whether you've never used github before. So **reach out here or on github if you need help with anything** or have an idea for an extension of this project or whatever. Can be isolating learning by yourself and I'm sure some people including myself could benefit from one another.",Sí,824
ng3nq0,"What are some ""must learn"" libraries in Python",2021-05-19 11:49:04,TaranisPT,https://www.reddit.com/r/learnpython/comments/ng3nq0/what_are_some_must_learn_libraries_in_python/,134,"Hey guys, I'm done school for 3 months and I'd like to go deeper in my python learning during that time. Since we didn't touch libraries at all, I feel like it could be a good thing to look into. 

So as the title says, which ones should I go an try to learn by myself? And are there good resources to learn them? I know we're going to be moving to other languages next semester, but I'd like to think that I can use python properly too. 

Thanks in advance.

Edit: Wow thanks for all the answers. I have a lots of stuff to check out now. Probably more than my 3 months will allow me too lol.",Sí,821
ozrbh4,Wrote this program to skip Spotify Ads using Spotify API,2021-08-07 11:07:05,ELIMINADO,https://www.reddit.com/r/learnpython/comments/ozrbh4/wrote_this_program_to_skip_spotify_ads_using/,61,"No one likes interruptions! right? So i wrote this program that detects when an advertisement plays by monitoring the type of the track that is currently playing, using the Spotipy API. When an ad is detected, the program restarts Spotify by the os module and plays it via pynput, which skips the ad and starts right where you left off. Its kinda cool and i am proud of it.

Here is the repo- [https://github.com/daspartho/SpotiByeAds](https://github.com/daspartho/SpotiByeAds)

I would love to get some thoughts and feedback on the project.",Sí,814
in1gv6,Begginers do not use Google search often enough,2020-09-05 13:53:18,KW__REDDIT,https://www.reddit.com/r/learnpython/comments/in1gv6/begginers_do_not_use_google_search_often_enough/,160,"I dunno if this should be on r/learpython or r/unpopularopinion but figured that it should rather be posted here.

As an intermediate programmer I find that many of my problems can easily be solved by just googling the problem. Unfortunately I have seen many beginners that for some reason are to shy to ask for help even if it means being stuck on the same problem for impossible amount of time. 

I had this problem too actually. I dunno if it was a really toxic part of programming community or just my personal pride but I simply would not ask for help even if it ment being stuck and not accomplishing anything at all. 

If u r beginner and find yourself pinned and u can't figure out the problem please do ask questions. U are just learning, it is OK not to now everything at first. Find healthy balance between figuring problem yourself and being stuck and wasting time.",Sí,807
ep2xb8,[Rave] Finally able to prove the value of Python,2020-01-15 14:23:40,Fywq,https://www.reddit.com/r/learnpython/comments/ep2xb8/rave_finally_able_to_prove_the_value_of_python/,138,"This is just at celebratory post because I finally managed to actually show my manager and the local Excel/Database guy that python is worth investing time in.

Basically we have a problem with some data in a laboratory intercalibration test that is off the mark compared to the intercalibration average. In order to find the problem I had to extract between 6 and 15 values from each of around 100 excel workbooks. This was further complicated by the fact that we have password protection on our workbooks which meant power query (which I am not that familiar with to begin with) was complaining.

Instead I went to openpyxl, and managed in an hours time (including several iterations to improve the data extraction) to put together a script that opens the workbooks, extracts the data and returns min, max and averages as well as plotting histogram and historic development of this particular test result to see if we have seen a general trend in some direction (turns out we have).

My manager was happy that I could present the data visually, and my colleague (who is generally supportive, but usually only works in VBA and SQL) was thrilled that I could get so much data from so many workbooks in a minute, rather than when he has to make VBA open each workbook in excel to extract the data. This opens up the option to efficiently extract tons of data in old excel files and get them into our SQL database. Something he has been putting off for a while.

This is the first time I have produced actual value with Python at work, and it feels great to finally be at a stage where that is possible. Next up is to automate our microscopy analyses with openCV!

Sorry if this does not contribute much value here. I am just happy :)

I am cleaning up the code then I can publish it if there is interest, but currently it is a mess, because I didn't have a clear plan and just kinda made it up as I went along.

Edit1: So you don't have to find my comment below:
Here is the code (anonymized/company data replaced) https://pastebin.com/8Vg85WBG

Edit2: Wow this took off and may well end up as my highest rated post ever. Thanks for the kind words everyone, I love this community.",Sí,802
ovth0a,"""Automate the Boring Stuff with Python"" online course is free to sign up for the next few days with code AUG2021FREE",2021-08-01 14:50:18,AlSweigart,https://www.reddit.com/r/learnpython/comments/ovth0a/automate_the_boring_stuff_with_python_online/,53,"https://inventwithpython.com/automateudemy (This link will automatically redirect you to the latest discount code.)

You can also click this link or manually enter the code: AUG2020FREE (uh, I forgot what year it was and it doesn't let me change it: the code is 2020 not 2021)

https://www.udemy.com/course/automate/?couponCode=AUG2020FREE

This promo code works until the 4th (I can't extend it past that). Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later. I'll change it to AUG2021FREE2 in three days.

**I'm also working on another Udemy course** that follows my recent book ""Beyond the Basic Stuff with Python"". So far I have the first 15 of the planned 56 videos done. You can watch them for free on YouTube:

https://www.youtube.com/watch?v=kSrnLbioN6w&list=PL0-84-yl1fUmeV_2bBSguF_S0TVZk8wow&index=1

Udemy has changed their coupon policies, and I'm now only allowed to make 3 coupon codes each month with several restrictions. Hence why each code only lasts 3 days. **I won't be able to make codes after this period**, but I will be making free codes next month. [Meanwhile, the first 15 of the course's 50 videos are free on YouTube.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

Side note: My latest book, [The Big Book of Small Python Projects](https://inventwithpython.com/bigbookpython/), is out. It's a collection of short but complete games, animations, simulations, and other programming projects. They're more than code snippets, but also simple enough for beginners/intermediates to read the source code of to figure out how they work. The book is released under a Creative Commons license, so it's free to read online. (I'll be uploading it this week when I get the time.) The projects come from this [git repo](https://github.com/asweigart/pythonstdiogames).

**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with. Check out /r/ProgrammingBuddies",Sí,794
tbba69,Why you can't progress at Python,2022-03-10 22:50:01,ELIMINADO,https://www.reddit.com/r/learnpython/comments/tbba69/why_you_cant_progress_at_python/,145,"Every few days there is a new post on this sub that describes the same problem: ""I've taken so many courses on Python, yet I can't even write a simple program. What gives?"" The answer is very simple: you aren't practicing. Courses don't count as practice. You will not even be able to write a simple program in Python (or any programming language) until you start writing code yourself. Stop relying on courses to learn. At most, courses should be used to learn the very basics. After that, it is just practicing through writing code yourself. 

So please, if you've already gone through a Python course, do yourself a favor and stop looking for the next course and instead go write some code. You're welcome.",Sí,794
da0eqv,I made a bot that accuses random celebrities of being in 6ix9ine's 'Nine Trey Bloods' gang.,2019-09-27 13:28:17,pattyperk,https://www.reddit.com/r/learnpython/comments/da0eqv/i_made_a_bot_that_accuses_random_celebrities_of/,58,"IDK why I did this, but [here it is](https://twitter.com/bloods_bot).

 Every day, it accuses the most famous person on [Famous Birthdays](https://www.famousbirthdays.com/) of being in [6ix9ine](https://en.wikipedia.org/wiki/6ix9ine)'s '[Nine Trey Bloods](https://en.wikipedia.org/wiki/Nine_Trey_Gangsters)'.

Here's how it works:

* Uses bs4 to scrape Famous Birthdays for celebrity name & picture.
* Uses Tweepy to search Twitter for the name, returns the most relevant user (if the celeb doesn't have a twitter, it still tags the first result which is kinda funny).
* Uses Tweepy to attach media & tweet.

[Full code.](https://github.com/lilblizzard/blood_bot)

p@",Sí,794
layd52,Newbie Here🙂,2021-02-02 15:36:11,Red_Maxx,https://www.reddit.com/r/learnpython/comments/layd52/newbie_here/,154,45 year old dad here. Laid off in the pandemic now learning Python. Regretting that I didn't take it up earlier in my life.,Sí,786
hirzuh,I just wanted to say a massive thank you to the community.,2020-06-30 17:34:57,PapercutPoodle,https://www.reddit.com/r/learnpython/comments/hirzuh/i_just_wanted_to_say_a_massive_thank_you_to_the/,53,"I wanted to share something with all of you that meant a lot to me. I hope that's ok.

I work as a lab assistant for a huge company, I've been there for over a year and I've
felt like my life is going nowhere for some time. In order to give myself a boost I decided
to take up learning Python. I've sat at a computer since I was a kid so it felt like a natural
choice. [I started following this video lesson](https://www.youtube.com/watch?v=rfscVS0vtbw)
It's a blast, and I go back to work Monday evening having sat through just under 3 hours of it.
Around 2am at work I get an idea.

  
I decide to give myself some homework, something I **think** I should be able to do with what I've
learned so far, but still very tricky for a beginner like myself. I decide to make a little keypad program.
I outline my idea on a piece of paper, what I hope to make it do and rough ideas how, I come home
and I go to bed.

  
I wake up, start pycharm on my brand new laptop and I'm stuck, completely. I have no idea what to do.
So I decide to write something, anything to get going. I print a simple message for the user:

""You're standing in front of a door with a keypad. You need the correct 4-digit code to unlock it"".

Then it slowly starts rolling. If statements, while loop, elif, user inputs, else, I'm feeling on fire at this point.
It's constantly three steps forward, two steps back, sometimes everything breaks and I'm downing coffee
like it's the last day on earth but after a few hours, there it is. I did it. The very last thing I do is add a break
if the user successfully enters the right numbers in the right order, print a final message to the user:
""This is where the adventure begins, are you ready?"" Super cheesey I know.

  
I'm on cloud 9. I had an idea, I outlined it, started, worked through the problems, finished it. It might not be pretty but it WORKS!

  
I get it now, I get how addicting it is and tonight when i'm at work, you can bet I will come up with another 
piece of homework to myself. Thank you all so much, you are all amazing.",Sí,779
x6px4m,"2,000 free sign ups available for the ""Automate the Boring Stuff with Python"" online course.",2022-09-05 20:09:17,AlSweigart,https://www.reddit.com/r/learnpython/comments/x6px4m/2000_free_sign_ups_available_for_the_automate_the/,82,"**NOTE:** The codes are all used up. [But you can watch the first 15 of the 50 videos for free on YouTube.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW) If you want to buy the rest of the course, the https://inventwithpython.com/automateudemy link redirects to a discount code that lowers the price to $13. The course follows the info in the book, which is for free in full at https://automatetheboringstuff.com/

If you want to learn to code, I've released 2,000 free sign ups for my course following my Automate the Boring Stuff with Python book (each has 1,000 sign ups, use the other one if one is sold out): 

~~https:// udemy .com/course/automate/?couponCode=SEP2022FREE~~

~~https:// udemy .com/course/automate/?couponCode=SEP2022FREE2~~

Udemy has changed their promo code and severely limited the number of sign ups I can provide each month, so only sign up if you are reasonably certain you can eventually finish the course. [The first 15 of the course's 50 videos are free on YouTube if you want to preview them.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

Instead of having unlimited free sign ups for 6 days per month, Udemy only lets me make 2,000 free sign ups per month. >:(

**NOTE: Be sure to BUY the course for $0, and not sign up for Udemy's subscription plan. The subscription plan is free for the first seven days and then they charge you. It's selected by default. If you are on a laptop and can't click the BUY checkbox, try shrinking the browser window. Some have reported it works in mobile view.**

Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later.

Some people in India and South Africa get a **""The coupon has exceeded it's maximum possible redemptions""** error message. [Udemy advises that you contact their support if you have difficulty applying coupon codes, so click here to go to the contact form.](https://support.udemy.com/hc/en-us/requests/new?type=student)

**I'm also working on another Udemy course** that follows my recent book ""Beyond the Basic Stuff with Python"". So far I have [the first 15 of the planned 56 videos done. You can watch them for free on YouTube.](https://www.youtube.com/watch?v=kSrnLbioN6w&list=PL0-84-yl1fUmeV_2bBSguF_S0TVZk8wow&index=1)

Side note: My latest book, [The Big Book of Small Python Projects](https://inventwithpython.com/bigbookpython/), is out. It's a collection of short but complete games, animations, simulations, and other programming projects. They're more than code snippets, but also simple enough for beginners/intermediates to read the source code of to figure out how they work. The book is released under a Creative Commons license, so it's free to read online. (I'll be uploading it this week when I get the time.) The projects come from this [git repo](https://github.com/asweigart/pythonstdiogames).

**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with. Check out /r/ProgrammingBuddies",Sí,776
n5a6fo,Do you know any Python projects on Github that are examples of best practices and good architecture?,2021-05-05 07:28:24,AddictedToTech,https://www.reddit.com/r/learnpython/comments/n5a6fo/do_you_know_any_python_projects_on_github_that/,69,"I'm looking for some projects to learn from. To ""read"".

I'd love to see the correct way of doing things.",Sí,774
kmwrve,What libraries do you wish you discovered earlier?,2020-12-30 06:23:20,White_and_tall,https://www.reddit.com/r/learnpython/comments/kmwrve/what_libraries_do_you_wish_you_discovered_earlier/,238,What libraries do you wish you discovered earlier?,Sí,776
i13byl,Feeling too fucking dumb for Python and programming in general,2020-07-31 07:30:46,MrNesian,https://www.reddit.com/r/learnpython/comments/i13byl/feeling_too_fucking_dumb_for_python_and/,212, I am 28 and have only just begun an introductory course in Python and have never felt more fucking dumb than I do now! From the realization that I need to take algebra lessons to knowing that I am not comprehending the bare basics is fucking demoralizing. Though I find having my hand held through courses like Codeacademy comprehensible. Mostly I feel this way as the introductory course through a Technical College I am enrolled in has an indicative time to complete their first project as 3 hours. All I can say is thank fuck its online because I've been working on it for legit 2 weeks. GOD FUCKING HELP MY DUMBASS LEARN!!,Sí,769
jkcy74,I finally used Python for work!,2020-10-29 16:11:20,endisnearhere,https://www.reddit.com/r/learnpython/comments/jkcy74/i_finally_used_python_for_work/,44,"I was tasked with the small project of making a bot for our Discord server. It’s really simple so far and just reminds certain users to complete their tasks and takes them off the reminder list when they use a command, but after two years of coding as a hobby, I’m finally actually using it! I’m definitely using this as leverage into a raise when my review comes around.

Stick with it!",Sí,773
ize2jn,Learning other languages will make your Python better.,2020-09-25 05:50:57,CatolicQuotes,https://www.reddit.com/r/learnpython/comments/ize2jn/learning_other_languages_will_make_your_python/,138,"Python is great, but it's not used everywhere. Web dev is Javascript. Embedded C/C++. (by default at least)

But! Don't be afraid to learn other language.  Just how Blue is more Blue when it's next to Red. And Hot is more Hot when next to Cold, that's how you will know better Python when next to Javascript or any other language. Just keep on learning.

Good luck!",Sí,767
mgxib8,I've Realized I Officially Love Coding,2021-03-31 03:51:43,Satori_Orange,https://www.reddit.com/r/learnpython/comments/mgxib8/ive_realized_i_officially_love_coding/,51,"I hated it when I first started, and felt really dumb trying to learn it.  The beginning was easily the worst.

&#x200B;

5 years later, I love it.  Part of me has always enjoyed it, but tonight I realized that I truly love it.  I had a really long day at work and got off late, and to destress I began learning PyQt so I can build a GUI for a stock script I spent that past week or so building in my freetime.

&#x200B;

I still have a long ways to go, however I've come a very long way as well.  I started my career right out of college 3 months ago and even though the learning process is quite painful I've proven to be an asset on the team as a newcomver just because of my coding skills, which has been a huge motivator for me to keep improving them.

&#x200B;

Just wanted to throw this out there for those of you doubitng yourself.  For many of you reading this, now is the hardest part.  Don't give up, and don't doubt yourself; with consistency and discipline you'll be able to do great things.",Sí,772
o7kvjp,I want to learn how to make a personal text-to-speech reader for my spouse before I die.,2021-06-25 10:18:31,Rabbitbluechalk,https://www.reddit.com/r/learnpython/comments/o7kvjp/i_want_to_learn_how_to_make_a_personal/,46,"I apologize if the title is too depressing. I have a gene that makes me more prone to get cancer, and I want to leave something meaningful for my spouse before I die. When we first met, they said how much they love voice, and how it was their most favorite sound, they would say how they always wanted to get into reading as well, but their eye health has never been the best, and they have dyslexia. So, they'd ask me to read little things for them here and there, but because I'll be dead first, and possibly a lot earlier than them, I'd want at least the voice they love so much to continue reading them those books long after I'm gone.

tldr: is there a way to make a personalized text-to-speech reader in my voice for my spouse? (cannot tell if my question is more dystopian, or wholesome)",Sí,766
t2m2g3,"From a Beginner to Beginners: Learning print(""Hello world!"") to freelancing to full time employment. One year on!",2022-02-27 11:11:55,MikeDoesEverything,https://www.reddit.com/r/learnpython/comments/t2m2g3/from_a_beginner_to_beginners_learning_printhello/,95,"Hello /r/learnpython,

Time really does fly! After losing my job as a Chemist, I've been a full time Data Engineer for just under a year now and have learnt so much.  I still feel a bit of the imposter syndrome stress, especially as I've had a great first year.  Needless to say, the pressure is rising but that's okay because you never stop learning!

This will be my last post in this Beginner to Beginners series.  The series was made as a bit of insight into a self taught programmer's journey into the world of tech/IT as well as a way for me to share my own experience with like minded individuals.  

For lists of courses and generally more detail, you can find the other posts from my series here:

* [Just completed my first job on Upwork!](https://www.reddit.com/r/learnpython/comments/jrwi6d/just_completed_my_first_job_on_upwork/)

* [Going from print('Hello World)' to tutorial hell to building my own ""data pipeline""](https://www.reddit.com/r/learnpython/comments/jwgatc/going_from_printhello_world_to_tutorial_hell_to/)

* [From building my own data pipeline to my first technical interview.](https://www.reddit.com/r/learnpython/comments/l7drly/from_a_beginner_to_beginners_from_building_my_own/)

* [From print('Hello World!') to Tutorial Hell to Getting my First Job! ](https://www.reddit.com/r/learnpython/comments/lmi2lg/from_a_beginner_to_beginners_from_printhello/)

* [Dealing with ""First Job Imposter Syndrome"", ""What project should I make?"", and an OOP Epiphany.](https://www.reddit.com/r/learnpython/comments/mez5jk/from_a_beginner_to_beginners_dealing_with_first/)

If you've enjoyed this series, please consider [following me on medium](https://mikedoeseverything.medium.com/).

I'll do the usual openings and then get to the actual content further down.

**Background**

I am an experienced Chemist who lost his job during the pandemic in 2020.  During the process of losing my job, I worked for a company who touted themselves as trying to be ""data first"" with extremely tenuous approaches to data management, data science, and infrastructure.  I thought I could do a better job than the management team so I taught myself.

Originally, the goal was to become a Data Scientist.  I was already a scientist, how much harder can it be? The more I learnt about Data Science, the more I hated.  It was a slog, learning was boring, and I was never inspired, but I carried on anyway.  I did my Python courses, I did a Data Science course, and just didn't really know what to do.  At this point, I started looking at freelance jobs and found some for my favourite thing to do - webscraping.  It was here I had the revelation I loved automating the collection of data, thus, I accidentally discovered the world of Data Engineering.  This was over the course of around 5 months.

I carried on working on my portfolio, I carried on trying to do freelance work (it's competitive), I carried on working on my CV.  Whilst struggling to find opportunity, I signed up for a free ""Zero to Hero"" style bootcamp in Python, HTML, and CSS, thinking it would help.  In a good way (I guess), I had already done significantly more advanced projects in my spare time than the level of the course offered, although I was optimistic that they'd see that and help me get a job.  During this bootcamp, I started to get job interviews and eventually got offered and accept my current role.  This was over the course of around 4/5 weeks.

**What I Do Now**

I'm a full time Data Engineer in financial services.  My day to day job involves creating new pipelines for internal customers, managing access to data to users, maintaining existing pipelines and services, working on very simple front ends, and vetting new tools for the company.  I work both on premise and in cloud, although primarily I work in the cloud.

**Notes, Qualifications, Caveats**

For the reasons of transparency, I think it's always important to define a lot of this information to help people manage their expectations.  I have a Masters degree in Chemistry from a good university in the UK.  I have never written code before I started learning in late 2020, do not have any experience in my current field of financial services, tech, or IT, and did not get referred.  I do have experience being employed though and happened to be interested in a field (Data Engineering) which went, and is still going through, an unprecedented hiring spree and happened to have learnt the relevant stack and skills along the way.  Luck is always a huge factor when it comes to jobs.

**Actual Content**

**The job market for Data Engineers is insane**

Life as a Chemist was usually spent finding the very few jobs around and competing with everybody in the area for it.  Life in the world of data engineering (can't possibly comment on the wider field of tech), has been the complete opposite.  I get bombarded with jobs in calls, emails, messages on LinkedIn and my profile isn't really even that good.  I think I speak for the wider field of data that if that's what you're into, then it's a really good time to be in said field.  Make no mistake though, it's still competitive.

**Imposter syndrome doesn't go away, you just kind of live with it**

Like many self taught people, imposter syndrome is a proper thing.  There are some days where I get requests and I just think, ""How the fuck am I meant to do any of this?! Do they think I'm way better than I am?!"" and there's a bit of panic in my head whilst somebody is explaining the request.  Once you start working on it though, applying good principles and design concepts, you start to get it and can get on with producing a good piece of work.  So, my tip is if you're still feeling like you aren't good enough and it never goes away for a long time, then that's alright.  A good team will always gives you time to get better and improve so long as you want to.

**Never stop learning**

I always imagined once I had ""made it"" in my job, I'd just kind of hang out and coast through the day.  The reality is you kind of never really do and the moment you stop wanting to keep up is when you get left behind.  Of course, there are limits to everything.  Being on the forefront and fluent in every single technology is pretty much impossible, although striving to be aware of what's out there and how industry standards change is definitely really key for moving forward. 

**Advice for new programmers**

I always love to provide advice on how to go about getting a job in tech when you're self taught.  I think even after working for a year, my advice hasn't really changed:

* Find a job you're interested in first.  Do a lot of research here, it might take a while. 

* Recognise the stack you're interested in and start learning that stack.

* Build projects you are interested in first.  This in itself is a skill and will need time to learn.  I would say this is the critical point because being able to design and build projects is essentially you being a programmer.  So, if you can't do it straight away, that's alright.  Just keep trying.

* Apply for jobs you're interested in.  

* Keep refining your CV and your project portfolio.

* Most importantly - don't give up! Burnout is a very real problem.  If you are feeling exhausted and a bit defeated, then take a break.  The job market isn't going anywhere and taking a day or two for your own mental health is never a bad thing.

Whether you've been here since the start of my entire coding journey or you're brand new and looking for inspiration, thank you! As always, questions are welcome and even if will take a while, I will try to answer all.",Sí,763
jyz6xd,Does anyone else dread asking questions on stackoverflow?,2020-11-22 17:11:38,ampawluk,https://www.reddit.com/r/learnpython/comments/jyz6xd/does_anyone_else_dread_asking_questions_on/,262,"I’ve posted what I think are legitimate questions I’ve encountered while learning Python, only to get trolled and shut down by people who are really advanced developers. I’m learning online and sometimes it’s helpful for me to ask someone with more experience rather than bang my head off a wall trying to figure it out. 
Is there another place to ask maybe more intro to intermediate questions without being made to feel like an idiot for wanting to learn? Am I the only one who is started to hate stackoverflow for this reason?

Edit: thank you for all the responses! I see a lot of “you need to ask the question properly and make a strong research effort prior to going to SO”. I’ve really only gone there after I’ve exhausted every available avenue and still came up short or found things somewhat similar, but it still didn’t solve the problem I was facing. I see this has also been the majority experience with SO. Thankful for this group!",Sí,755
dr6jzi,Automate the Boring Stuff is so much better than video tutorials,2019-11-03 20:53:35,Aeur__,https://www.reddit.com/r/learnpython/comments/dr6jzi/automate_the_boring_stuff_is_so_much_better_than/,71,I've been making my way through [https://automatetheboringstuff.com](https://automatetheboringstuff.com/) and it is so much more detailed and helpful than any of the tutorials on YouTube I've tried,Sí,754
g0vamb,How would you guys feel about a daily / weekly whatever challenge that would offer a problem to be solved. We can then share GitHubs solving said problem in hopes of learning new approaches and prospectives?,2020-04-14 00:34:04,Biaswords_,https://www.reddit.com/r/learnpython/comments/g0vamb/how_would_you_guys_feel_about_a_daily_weekly/,85,Just a thought,Sí,747
hah264,My first python script that works.,2020-06-17 01:12:03,Ke5han,https://www.reddit.com/r/learnpython/comments/hah264/my_first_python_script_that_works/,102,"Started on the 1st of June, after 2 weeks of ""from zero to hero"" video course I decided to try something ""heroic"".  Asked my wife yesterday ""what can I do to simplify your work?"". She is a translator and one of the client has most of works in PPT.  For some reason PPT word count is never accurate, well at least for invoicing purpose.  
So they agree to copy and paste contents in word and count.

I just write a script that read all the text contents in PPT and save them in a text file.  So she can easily count the words there.

Although it took me almost 4 hours for only 25 lines of code, but I am still happy that I can apply what I've learned so far.",Sí,743
gix1qt,"I automated part of my job and I now have to present it to my Vice Chief CTO, any tips?",2020-05-13 11:15:44,CharlyWingate,https://www.reddit.com/r/learnpython/comments/gix1qt/i_automated_part_of_my_job_and_i_now_have_to/,137,"Hi,

I recently began learning Python and automated part of a task that 40 staff members have to do a month. It typically takes 2-3 hours a month and I've managed to shave 30-45 minutes off for every person which equates to about 360 hours saved a year.

I work for a Market Research firm that runs a forum where we ask consumers questions and we have to pay these consumers incentives in the shape of Amazon vouchers. We also have to post these winners on the forum for the sake of transparency. We create a pretty image which involves Excel and Powerpoint which is very tedious.

My script is basically a form that will take the long list of winners in an excel file, allow you to put in your login details to the forum, the number of people you want to win, the message you want to send to the winners and title to your post. It will then spit out the Excel file in a pretty image and upload it to the forum as well as your message and title without you having to login at all.

I showed this to my Head of operations and she loved it so much that she instantly booked a meeting with my Vice CTO, Director of product innovation, a senior UX Designer and two senior software developers.

My original presentation for my Head of Operations was very process-oriented, whereas this interview will be full of technical people. So I was wondering, what type of questions are my CTO and Senior software developers likely to ask? And how should I prepare?

For example, should I list all of the packages I have used and write out their permissions? Should I create a very technical process tree that shows the complete process and what happens in the back end?

Thanks,",Sí,738
109njot,Corey Schafer has returned to YT making tutorials!,2023-01-12 02:21:40,ELIMINADO,https://www.reddit.com/r/learnpython/comments/109njot/corey_schafer_has_returned_to_yt_making_tutorials/,72,"My favorite channel from when I first started out. He disappeared 2 years ago but has returned a few days ago with a tutorial on simulating the powerball lottery. 

https://www.youtube.com/@coreyms

His Python videos specifically 
https://www.youtube.com/playlist?list=PL-osiE80TeTt2d9bfVyTiXJA-UTHn6WwU",Sí,730
uo7ufj,"Got to say it, IMO, the book 'Python Crash Course', is far superior for a beginner than 'Automate the Boring Stuff'",2022-05-12 18:36:53,ParanoidPete,https://www.reddit.com/r/learnpython/comments/uo7ufj/got_to_say_it_imo_the_book_python_crash_course_is/,85,"I read upto lists and dictionaries in Automate the Boring stuff, and watched the videos on youtube for those chapters. The excercises seemed to ask for stuff that i had not learnt or were far ahead of my learning so far. 

Dived into 'Python Crash Course' and haven't looked back. This book is fun, engaging, and all the excersises are relevant to what you have just learnt. 

I will go back to 'Automate' but was overwhelmed and skipped most of the chapter excercises, as they seemed too difficult",Sí,736
lra4l2,It's finally paid off!,2021-02-24 10:59:12,geo-special,https://www.reddit.com/r/learnpython/comments/lra4l2/its_finally_paid_off/,38,"I've been trying on and off with Python for years and have always got frustrated and never managed to complete an introductory course.

I think now it's because these courses went too deep into statistical nuances that really had no baring on my capability to learn python.

I've been working through DataCamp since the new year (Yes I know evil datacamp boohiss) and have finally managed to do something useful with my knowledge today.

I'd been given some pdfs at work with tables containing information I needed. However I needed the information in excel format. It would take me hours to manually copy the data by hand into a spreadsheet.

I managed to find [https://pypi.org/project/tabula-py/](https://pypi.org/project/tabula-py/) which can read tables in a pdf, convert them into a pandas dataframe and then export them as a CSV.

After installing the library and using the documentation I did it!

Probably sounds very simple but a massive success for me!",Sí,731
e8uo6c,My first 100 hour of learning programming(28 days),2019-12-10 18:39:58,ConstantINeSane,https://www.reddit.com/r/learnpython/comments/e8uo6c/my_first_100_hour_of_learning_programming28_days/,104,"hi everyone one month ago i decided to learn programming. I always enjoyed the idea of programming but never tried it. So i started a udemy course on python and i was addicted from the first line of code(actually from the second!! i really hated the ""hello world"" programs). I have a batchelors degree in a different field(as you can see not in English!!!) so i never thought about programming as a new career, i just wanted to start a new hobby. 28 days later i really consider to change path to programming, or maybe find a master combining my field with programming. So for the last 28 days i studied and wrote code for 100 hours!!

Let me tell you about my progress from hour to hour and what i managed to make so far!

**hour 0:** Hello world!!

**hour 1-15:** learning the basic python syntax

**hour 20:** i created 2 simple projects. one simple dictionary where you give an input and the script returns the meaning ofthe word from a json file. The second program is a simple script for runners  which gets some user input about your running speed duration and heart rate and returns an estimation of your running fitness. Sound like a lot but it is just a simple calculator with some fancy equations i found online

**hour 23**: Things are getting interesting. As i learn about webscraping instead of building(copying) the program my tutor was making i instead decided to create a scraper on a different website.Theres a site called polar flow where running data from sport watches are stored. so i created a webscraper that scrapes my data from my past acticities and using the equation from my last progress estimates my running fitness from every activity of mine!!

**hour 23-40**. Studied about numpy,pandas,selenium webdrive,BeautifulSoup,csv files.matploid,bokeh and other libraries

**hour 45**: learned how to do linear fitting of scatter data in bokeh. Actually i have a good math background from my university studies so the math part was not hard. I created my first graph in bokeh using the running data of my previous project to calculate how my running fitness increases over time

**hour 45-60**: Learning some basic things about oo programming and classes and pyqt5 graphical interface library

**hour 60**: created my first one window program with pyqt5. now i had to decide. Create simple one window boring programs copying code from my tutor or take notes about the various code lines and how they work together and create a graphical interface for my running app project. i chose the later!!

**79 hour**: almost 20 hours laters most of which was me looking at a screen and wondering why my program doesnt work (cried twice) i managed to create a 4 window program. The concept of the program is to get some running data input from a csv file and calculate running performance and vo2max(estimate). Then using some fitted equations which i created on my own by fitting data from 20 athletes the program estimates your training speeds as (easy, tempo,intervals ect). The third screen calculates your heart rate zones and the forth screen shows a graph on how your stats change over time. I want to add more functions to my program but i left it on the side for now to study more.

&#x200B;

**hour 79-92**  started reading more about some oop cause i don't really get it! started rewriting my code without using  copy and paste even from my one previous scripts and studied various online resources

**hour 92-101**: created a ""shady"" instagram webscraper which does the following.

visits a profile and scrapes all the usernames that follow this profile. Then it visits every each one of them   and scrapesfollower and following number data. Then calculates the ratio of following and followers andchecks from its last posts if it is an active account. If it is an active account and follows more people than hasfollowers the program saves his link and username in a database.The concept is that people who followmore people than get followed are good future follower candidates. Now i want to add a function to theprogram to auto like 5 posts on each of this account. I created a second account to test all this and i won't tryto use it on my primary account. I will get banned obviously!

&#x200B;

So that was my first 100 hours of programing, i would be happy to answer your comments and questions and about your programing journey too!!

&#x200B;

**Edit**: heres some photos of my running fitness project     [https://imgur.com/gallery/LDTkPlZ](https://imgur.com/gallery/LDTkPlZ)  the dots in the plot are running fitness scores for individual runs and the line is the last 3 activities average. Something i want to clarify is that i am not good at programming yet. My programs are buggy and my code is most of the times unreadable. i use google and stack overflow all the time and i get stuck every 5 seconds at something.

&#x200B;

**Edit2:** The reason i remember so clearly what i did in every hour is cause i logged every minute studing and coding in a productivity timer app. I am a master procrastinator so doing things like this keeps me motivated. i also kept notes of what i accomplised every hour to a spreadsheet knowing that one day it may motivate and help someone else do the same.

i won't stop here!!! i am planning to write about my journey here or on a new post as i reach 200-300 hours. The next 2 months will be a little slow but i believe until summer i will reach 300-500 hours

&#x200B;

**Edit 3** : ***I want to add some more things to the post(advices,thoughts and future plans)***

* edx and coursera has plenty of more ""university"" like courses on programming even from universities like MIT and other known institutions, all of the courses there are FREE to watch, you only pay if you want to get a certificate. Also there is a financial aid program if you cant pay the full price but still want to get a certificate. I plan to start a data science/Machine learning course in the future
* the strugle with online courses is that most of them cover the basics and then you are pretty much on your own, so i now i feel a little lost on where to go on and what to learn
* another strugle i have is that i don't know how to organize my code properly. I don't know where it makes more sense to create classes, when to split my script to two or more files and things like that, as my projects grow in size i get the feeling that my code is like a giant with glass legs one little thing goes wrong and the whole thing colapses and sometimes i have to rewrite whole sections just to make it work. I believe that if i learn to organize my code better i won't have such problems in the future
* use jupyter notebooks!!!! google it!
* visit [codewars.com](https://codewars.com) it is a great site where you solve problems riddle like using programming. You start from easy problems and as you solve them you go to harder ones
* do your own projects not the one your tutor does. you will fail miserably but in the process of finding why you failed you will learn more stuff
* play with the code. when i find a line of code online and put it in my project i switch little things to see how it breaks and trying to find out why. This way i learn what every word and symbol in the line of code does and whats it's role
* try to not copy paste code even if you wrote it in a previous project.
* read a libary's documentation. When you start learning a new library don't google everything take some time to read the documentation, you will get a better idea of what you can do with this library in the future",Sí,733
pm6jf4,I'm 43. Want to be a software engineer. Am I crazy?,2021-09-11 12:27:26,newbietofx,https://www.reddit.com/r/learnpython/comments/pm6jf4/im_43_want_to_be_a_software_engineer_am_i_crazy/,276,"Hi. I tried my hands at the most easiest quizzes at leetcode.com. I sucked without knowing list expressions even though I went through almost all of w3 introduction of python. Am I trying to eat a cake that is too big for my aspiration?

*Thank you very much for your kind words and encouragement. Wise words and advices from the expert and experienced. Heartfelt gratitude to those who have taken the time to read and reply with thought.",Sí,734
irytd1,My first Python program - Fifty years in the making!,2020-09-13 14:03:34,tuffdadsf,https://www.reddit.com/r/learnpython/comments/irytd1/my_first_python_program_fifty_years_in_the_making/,85,"Hello everyone!

I am a seasoned SQL programmer/reporting expert who's been working in Radiology for the past 20+ years. I had always wanted to learn another programming language and had many starts and stops in my road to that end. I was able to understand the process of programming but never really pushed myself to have any real work/world applications to try it out on.

So for my 50th birthday I made a promise to myself that this would be the year that I actually learn Python and create a program. I started with the ""Automate The Boring Stuff"" course and then figured out what problem I wanted to solve.

Once a month I have to collect test results on the monitors that the radiologist use to read imaging (xrays) on. The Dept of Health says we need to be sure the monitors are up to snuff and we have proof that this testing is happening. Normally I would have to click through a bunch of web pages to get to a collection of PDFs (that are created on the fly)  that contain the test results. Then I'd have to save the file and move it to the appropriate directory on a server. Very manual and probably takes 30 minutes or so to get all the reports.

It took a bit of time but my Google Fu is strong so I was (for the most part) able to find the answers I needed to keep moving forward. I posted a few problems to Stack Overflow when I was really stumped.

The end result is the code below which does the whole process in about a minute. I am so proud of myself getting it to work and now I have this extra boost of confidence towards the other jobs I plan to automate.

I also wanted to post this because some of the solutions were hard to find and I hope if another programmer hits the same snag they could find it in a Google search and use part of my code to fix theirs.

I'm on fire and have so many more new projects I can't wait to create!

EDIT: changed any real links to XXX for security reasons.

    from selenium import webdriver
    from selenium.webdriver.common.by import By
    import time
    import shutil
    import os
    from datetime import datetime 
    
    ##Set profile for Chrome browser 
    profile = {
        'download.prompt_for_download': False,
        'download.default_directory': 'c:\Barco Reports',
        'download.directory_upgrade': True,
        'plugins.always_open_pdf_externally': True,
    }
    options = webdriver.ChromeOptions()
    options.add_experimental_option('prefs', profile)
    driver = webdriver.Chrome(options=options)
    
    ##Log into monitor website
    driver.get(""https://xxx.com/server/jsp/login"")
    
    username = driver.find_element_by_name('j_username')
    password = driver.find_element_by_name('j_password')
    
    username.send_keys(""XXX"")
    password.send_keys(""XXX"")
    
    driver.find_element_by_css_selector('[value=""Log on""]').click()
    
    ##Start loop here
    monitors = [""932610524"",""932610525"",""932610495"",""932610494"",""932610907"",""932610908"",""932610616"",""932610617"",""932610507"",""932610508"",""1032422894"",""1207043700""]
    for monitorID in (monitors):
        url = ""https://xxx.com/server/spring/jsp/workstation/complianceCheckReport/?displayId={}"".format(monitorID)
    
        driver.get(url)    ##Driver goes to webpage created above
    
        workstationName = driver.find_elements_by_class_name('breadcrum')[3].text ##Grabs workstation name for later
    
        badWords =['.XXX.org']    ##Shorten workstation name - remove url
        for i in badWords:
            workstationName = workstationName.replace(i, '')
        
        driver.find_element_by_class_name('css-button2').click()    ##Driver clicks on top button that leads to webpage with most recent PDF
    
        driver.find_element_by_class_name('href-button').click()    ##Now we're on the pdf webpage. Driver clicks on button to create the PDF. Profile setting for Chrome (done at top of program) makes it auto-download and NOT open PDF
    
        time.sleep(3)    ##Wait for file to save
    
        dateTimeObj = datetime.now()    ##Get today's date (as str) to add to filename
        downloadDate = dateTimeObj.strftime(""%d %b %Y "")            
           
        shutil.move(""C:/Barco Reports/report.pdf"", ""Y:/Radiology/DOH monitor report/All Monitors/"" + (workstationName) +""/2020/""+ (downloadDate) + (monitorID) + "".pdf"")    ##Rename file and move
    
    driver.close()
    time.sleep(3)
    driver.quit()

UPDATE: since posting this I have done some major updates to the code to include almost everything that commenters had suggested. I think I am done with this project for now and starting work on my next automation.

&#x200B;

    from selenium import webdriver
    import time
    import shutil
    import os
    from dotenv import load_dotenv
    import requests
    
    # Set profile for Chrome browser
    profile = {
        'download.prompt_for_download': False,
        'download.default_directory': r'C:\Barco Reports',
        'download.directory_upgrade': True,
        'plugins.always_open_pdf_externally': True,
    }
    options = webdriver.ChromeOptions()
    options.add_experimental_option('prefs', profile)
    driver = webdriver.Chrome(options=options)
    
    # Loads .env file with hidden information
    load_dotenv()
    
    # Log into BARCO website
    barcoURL = os.environ.get(""BARCOURL"")
    
    # Check that website still exists
    request = requests.get(barcoURL)
    if request.status_code == 200:
        print('Website is available')
    else:
        print(""Website URL may have changed or is down"")
        exit()
    
    driver.get(barcoURL)
    
    username = driver.find_element_by_name('j_username')
    password = driver.find_element_by_name('j_password')
    
    name = os.environ.get(""USER1"")
    passw = os.environ.get(""PASS1"")
    
    username.send_keys(name)
    password.send_keys(passw)
    
    driver.find_element_by_css_selector('[value=""Log on""]').click()
    
    # Start loop here
    
    barcoURL2 = os.environ.get(""BARCOURL2"")
    
    with open('monitors.csv', newline='') as csvfile:
        for row in csvfile:
            url = (barcoURL2).format(row.rstrip())
    
    # Driver goes to webpage created above
            driver.get(url)
    
    # Grabs workstation name for later
            workstationName = driver.find_elements_by_class_name('breadcrum')[3].text
    
    # Grabs date from download line item
            downloadDate = driver.find_element_by_xpath('/html/body/table/tbody/tr[2]/td/table/tbody/tr/td[2]/table/tbody/tr[2]/td/table/tbody/tr[2]/td/div[@class=""tblcontentgray""][2]/table/tbody/tr/td/table[@id=""check""]/tbody/tr[@class=""odd""][1]/td[1]').text
    
    # Remove offending punctuation
            deleteDateComma = [',']
            for i in deleteDateComma:
                downloadDate = downloadDate.replace(i, '')
    
            deleteColon = [':']
            for i in deleteColon:
                downloadDate = downloadDate.replace(i, '')
    
            sensorID = driver.find_element_by_xpath('/html/body/table/tbody/tr[2]/td/table/tbody/tr/td[2]/table/tbody/tr[2]/td/table/tbody/tr[2]/td/div[@class=""tblcontentgray""][2]/table/tbody/tr/td/table[@id=""check""]/tbody/tr[@class=""odd""][1]/td[4]').text
    
    # Remove offending punctuation
            deleteComma = [',']
            for i in deleteComma:
                sensorID = sensorID.replace(i, '')
    
    # Get workstation name - remove url info
            stripURL = ['.xxx.org']
            for i in stripURL:
                workstationName = workstationName.replace(i, '')
    
    # Driver clicks on top button that leads to webpage with most recent PDF
            driver.find_element_by_class_name('css-button2').click()
    
    # Now we're on the pdf webpage. Driver clicks on button to create the PDF
            driver.find_element_by_class_name('href-button').click()
    
    # Profile setting for Chrome (done at top of program)
    # makes it auto-download and NOT open PDF
    
    # Wait for file to save
            time.sleep(3)
    
    # Rename file and move
            shutil.move(""C:/Barco Reports/report.pdf"", ""Y:/Radiology/DOH monitor report/All Monitors/"" + (workstationName) + ""/2020/"" + (downloadDate) + "" "" + (sensorID) + "".pdf"")
    
    driver.close()
    time.sleep(3)
    driver.quit()
    
    # Things to update over time:
    # Use env variables to hide logins (DONE),
    # gather workstation numbers (DONE as csv file)
    # hide websites (DONE)
    # Add version control (DONE),
    # Add website validation check (DONE)
    # Add code to change folder dates and
    # create new folders if missing

&#x200B;",Sí,728
i4sbct,My dad thinks that a road in his hometown in Tasmania is the longest constantly curved road in the world. I want to prove him either right or wrong.,2020-08-06 14:00:52,RadiatorSam,https://www.reddit.com/r/learnpython/comments/i4sbct/my_dad_thinks_that_a_road_in_his_hometown_in/,109,"Driving along [this road](https://www.google.com.au/maps/dir/-41.0025882,145.7407935/-40.9849608,145.6996683/@-40.997629,145.7194357,14.18z/data=!4m2!4m1!3e0) takes a few minutes but at no point do you have to move the steering wheel much.

The plan was to pull google maps data, plot points along major roads, and do some math to those points based on my currently undefined curvature criteria. Does anyone have any idea if this is feasible? It would be cool to be able to validate his claim, or find a bigger curve.

Ideally the map data will include road endpoints and it will be possible to plot points along each road to be tested. I'd then run a check that determines the deviation of point 3 relative to points 1 and 2. If the deviation of point 4 relative to points 2 and 3 was within tolerance a counter would increment and the longest succesive run of successful checks would give me the longest constant curve on that road. 

I'd then aim to check every road I could, with some filters around high population areas and filters based on total road length if available to optimise where I could.

Does this seem feasible?

Thanks in advance.",Sí,722
tf3929,"My career path going from zero experience, to a Sr. Engineer @ FAANG. No college or bootcamps, completely self taught.",2022-03-15 23:16:40,Tali_Lyrae,https://www.reddit.com/r/learnpython/comments/tf3929/my_career_path_going_from_zero_experience_to_a_sr/,58,"Good afternoon everyone!

I made a post on another users post here:  
https://www.reddit.com/r/learnpython/comments/ctkypf/im\_100\_self\_taught\_landed\_my\_first\_job\_my/ that I would also do a  
write-up of my experience as I am similar to the user in the above post. I'll try and follow the same format as people  
seemed to like it.

This will be my story on how I went from (essentially) zero IT experience to becoming a Senior Engineer @ FAANG.

Location: US  
Age: 28

My start isn't as philosophical as the above posters, I worked a couple service industry jobs through my teens and 20's, I didn't really have a plan in mind at the time, but I was a pretty big gamer, and had always been somewhat interested in computers throughout my life. I knew some really basic networking to get my computer to have a static IP and knew the old ""DNS is names pointed to numbers"". I'm not sure if I would consider myself the most motivated person, but I think I  
would fall into the category of ""If I have an itch, it needs to be scratched."", and most of my itches came in the form of wanting to know how things worked.

My first job I got when a manager of mine at In-N-Out managed to get himself a position as a Jr. SysAdmin and knew I was interested in computers at the time. We had talked about computing and gaming over our time together at In-N-Out, so he had suggested I apply and put in a good word for me (He's ""@WadingThruLogs"" on twitter go throw him a follow).

I'll link the resources that I've used throughout the years, but I didn't really follow too many YouTube channels specifically, most of my experience comes from what I do on my own and the people that have taught me things along the way.

\------------------------------------------------------------------------------------------------------------------------

Most of my book recommendations will be for programming but to be honest I didn't do much programming until I became a devops engineer.

Book 1: Design Patterns: Elements of Reusable Object-Oriented Software  
Authors: Erich Gamma, Richard Helm, John Vlissides, Ralph Johnson (The Big 4)

I feel like this is the first on everyone list, but use it more as a reference manual rather than sitting down and reading it front to back. The things you build now may not be enterprise grade or all that fancy, but its good to understand design patterns now and think of ways they can be applied when solving a specific problem. If you find yourself writing a lot of boilerplate code over and over, there's probably a better way to do it.

10/10 Recommended

\------------------------------------------------------------------------------------------------------------------------

Book 2: Code Complete (2nd edition)  
Author: Book by Steve McConnell

Another book in everyone's list. This one is a beefy boy but essentially is an encyclopedia of best practices and pragmatic guidance. It comes with tons of examples and digrams that help explain best practice concepts and teach you how to be a better programmer by thinking of things differently that you would originally. Are you refactoring code? Here's the recommended way to go about it. Starting unit testing? Well you're code will ALWAYS have bugs, but here is how you can build fault tolerance into your software. Etc Etc

10/10 Recommended

\------------------------------------------------------------------------------------------------------------------------

Book 3: Refactoring  
Author: Martin Fowler

This book is quite good for when your getting into a new position, and you need to take on a new codebase. Often times we find ourselves walking into a dumpster fire of code, and need to know the best way of approaching a refactor. This can take time and introduce more unintended side effects into the code than was there originally. You should start adopting the idea of ""Leaving the code cleaner than you found it"" now, so that when the time comes you don't have to take 3 sprints to refactor a complete codebase, but it's all done as you revisit different sections of the code in your  
normal workflow.

8/10 Recommended

\------------------------------------------------------------------------------------------------------------------------

From here on out I don't have many book or video recommendations, but I will talk a little about my progression through my career as that may help some people in understanding ""Where do I go next?"" after they have gotten their first position.

Position 1: Jr. Systems Administrator  
Location: Datacenter  
What I learned: Problem-Solving, Critical Thinking, How to break down problems to small chunks  


Just a note here, this position while the title is misleading, I was a glorified help desk operator taking calls and working on tickets. I think the title only existed because I was slotting servers and doing basic administration.

My very first IT job bright-eyed and bushy-tailed, the company was a small datacenter located not too far from where I lived at the time in a small business park. At this point I didn't really know much so I had to do a ton of self leaning on the job, as I went. My company had required that I pass the Microsoft MCSA certification for Windows Server 2012 which involved the 70-410, 70-411, and 70-412 certifications. I was wholly unprepared because even Microsoft themselves recommended at least 4 solid years of experience as a dedicated Windows administrator before even attempting  
the test and I didn't even understand what Windows Active Directory EVEN WAS.

Needless to say I failed the first exam twice, and never ended up getting any part of the MCSA, but more importantly I got moved to night shift where we got very few calls and tickets. This time was spent now learning any new technology I thought was interesting while also looking for things I could improve on for my daily working life.

For example, when we deprecated old bare-metal servers we would need to wipe the hard drives that came out of them and install our baseline linux image to get them ready to be reslotted. I knew that PxE booting was a thing but not really a whole lot on how it worked, so I read the wiki, watched a few videos, and ended up standing up my own pxe boot server for us to use that would automate the process of wiping the hard drives and installing an image automatically. All while it just needs to be plugged into the network port on our test bench. My process was all about taking small bites out of  
a large problem and just googling how to do it until I had a grasp on what was happening.

I also learned basic bash scripting to install a LAMP (Linux, Apache, MySql, PHP) stack on a linux system by just writing the script line by line and re-running it until it worked. The main point being just how important it was to sit down and try things until you understand how they work.

\------------------------------------------------------------------------------------------------------------------------

Position 2: Cyber Security Operator I  
Location: SOC  
What I Learned: Understanding of IT security, More scripting but this time with Python!  


Didn't see that one coming did you? Jr SysAdmin to working in cyber security? Well it turns out the same manager that had helped me out getting my first job developed a more specific interest in IT security and while I wasn't as interested in it, the position paid way better that what I was doing at the datacenter, and I absolutely hated working nights. So I applied at the same place and ended up getting offered the position.

I started working with what I had learned from my previous position, basic networking, a concept of firewalls, active directory, how basic websites worked, etc. and learned very quickly about the security of all these things in my own time. A huge shoutout here to the /r/netsec community, as they were essentially my every day read for new security write-ups, open source software that I found interesting and cool, and an all around nice community! After a few months of studying I went and took my Network+ CompTIA certification.  


The same concept that I applied in my last position I applied here, I'm very lazy and so I want to build something that would make my life easier at work. At the time I had been playing EvE online for quite a few years before coming across a corp member that also happened to be a like 10 year C/C# programmer. He helped me really get into the idea of programming with an actual language rather than just bash scripting, and I chose python. My first program I ever wrote was a calculator for how many times a ship or number of ships would need to pass through a wormhole to cause it to  
collapse on while you were stuck on the correct side.

Moral of that story is that any example you can find of something to automate or write something about you should make a project out of! I ended up also creating an auto hotkey script that would write the number of security event tickets required of me per day, so essentially all of my day was spent understanding how these open source software I found on /r/netsec worked, and I came across a term or concept I didn't understand I would do some learning about what it was.

\------------------------------------------------------------------------------------------------------------------------

Position 3: Security Engineer  
Location: Electronics Conglomerate  
What I Learned: More in-depth security, Basics of engineering and the cloud (AWS)!  


This job isn't super remarkable for what I learned specifically but was nice was getting a title bump and essentially doubling my salary at the time. Which leads me to my next point, a title change can be the difference in entire job families. Now there isn't really much of a difference between a Cyber-Security Operator and Engineer, as long as when you write your resume you're selectively putting your job duties that focus on building things. Breaking into the engineering tier with job titles is very beneficial because once you have that title on your resume, you basically can  
always be an engineer anywhere you go. Same goes for Operators, Analysts, Architects, etc.

An example being I didn't really do any engineering when I was an operator, but I did know how to write scripts and in my time learning on the job, I did some reading on design patters (see above book) and put on my resume that I built scripts to automate the workflow of security events within my daily activities. I didn't technically lie about any of that I did actually do it, it just wasn't in my job description. So always tailor your resume to the job you're applying for, even going back to previous positions and tailoring your experience there to be more geared to the current position your trying to get.

What I learned here mostly was the basics of AWS, like what is EC2, S3, Load Balancers, VPC's etc, and how to administrate a security appliance. In our case it was a Secrets Management System that I wrote a commandline utility for.

\------------------------------------------------------------------------------------------------------------------------

Positions 4,5,6: Senior Devops Engineer  
Location: Tax, Healthcare, FAANG Companies (Current Position)  
What I Learned: Everything under the sun that has to do with infrastructure as code  


This post is getting to be a little long-winded, and I'll probably just end up repeating myself but essentially getting into devops was the same process as the previous jump from sysadmin to security, tailoring your resume and making sure to apply your time outside of work and the downtime you have inside of work to learn about new things. In this case it's for Development Operations (DevOps). It's the new fullstack engineer because of the vast quantities of technologies you need to be familiar with to be effective. To list the ones I use in my day to day off the top of my head:

AWS (EKS, CloudFormation, EC2, S3, SSM), Helm, Kubernetes, Bash, Docker, Golang, Python, Groovy (Java), Networking,  
Various different programming specific frameworks.

Over time I've had to learn a ton of other technologies that all do similar things but just differently enough that the knowledge didn't directly translate. Like Jenkins and Octodeploy, or Ansible and Salt-Stack essentially do similar things but their operating model and capabilities are different.

\------------------------------------------------------------------------------------------------------------------------

Closing notes & Tips  


Interviewing:  
\- In the beginning you'll pretty much have to take the positions that are offered to you, until the time you gain   
the confidence to interview the company, rather than the company interviewing you.  
\- If you're comfortable teaching yourself things, don't limit your job searches to things that only include your   
area of expertise, if you like use Django, look for positions in python webdev, not just Django jobs and teach   
yourself the framework they use.  
\- WORK ON YOUR SOFT SKILLS! This is probably one of the most important tips, soft skills get you in the door and get   
people to like you. If people like you, they are more willing to help you out or give you a break. I was a bar rat   
for a couple of months, and it really helped me harness my natural charisma and general conversation. Find a social   
hobby that puts you in uncomfortable situations to help out with this.  
\- There's always more money in the budget for your role than you think there is. If the average for a role is 100k   
the money on the table is probably closer to 120-140% of that. If you're confident, you can ask for the world.  
\- I agree not to put technologies you don't completely know on your resume, but it's fine to put things you have a   
small about of experience with. Just indicate in the interview as such ""How much do you know about framework X?   
Oh I build a small personal project with it, here's a short description and the parts of the framework I used.""  
\- Dress well  
\- If you don't know the answer to a question, tell them! You should also however follow up with your best guess at   
how it should be done conceptually. Anyone can google how to use a hash map, but when interviewing I care more   
about \_when\_ you would use one. How you think is more important than what you know most of the time as it's   
easier to fix.  
 

Thats really it! If you have any specific questions I'll be posting responses in the comments.  


Thanks!  
\~ Tali",Sí,722
gky9cs,To beginners (or anyone honestly) here are some helpful keyboard shortcuts (and keys themselves) that could greatly improve your efficiency or just make life easier,2020-05-16 17:12:07,NFLAddict,https://www.reddit.com/r/learnpython/comments/gky9cs/to_beginners_or_anyone_honestly_here_are_some/,111,"Was recently helping out a family member of mine, with their programming assignment. Kid is in college, some intro to cs type class that involved python. I don't know why it bothered me, but seeing how slow he navigated through the file / docs in general - I couldn't help myself. i showed him a handful of easy keyboard shortcuts, that I suppose Ive just incorrectly assumed most people know about them- but apparently not: after a little practice, he's told me it was some of the most helpful advice ive given him. sometimes the little things can really make a difference: like - quickly reaching the start/end of your line. quickly moving things around in your file, by highlighting to copy paste..etc...I typically am of the belief a mouse should rarely be used. that's not only brutally inefficient, it (for me at least) would cramp the hell out of my hands if i was using a mouse all day. to clarify- i say that as it pertains to writing code. obviously using a mouse to open different browsers or diff apps is a reasonable time to use it.    
 
experienced programmers: I imagine you use these along with others, so this isn't so much directed at you: but feel free to chime in, and add anything you think might be useful. figured this can at least help some people out:   
  
should be noted these are done on my windows computer. not all will be doable on mac: and might require diff commands  
  
Ill start with the `Home` and `End` keys that apparently few people seem to actually know about:  
  
`Home` moves your curser to the start of the line  
`End` moves curser to the end of the line its on  
`ctrl` + `Home` moves your curser to start of doc | `ctrl` + `End` moves your cursor to the end  
   
`shift` + `Home` will select/highlight everything on the line cursor is on up to the curser  
`shift` + `End` will select/highlight everything on line after the curser  
if you wanted to quickly highlight a line to copy: you press `home` to get to start of the line: then press    
`shift+End` to highlight the line. (you could also do the reverse...where you press `End` followed by
`shift+Home`)    
    
`ctrl+shift+End` : wherever my cursor is, everything after it in the doc gets selected/highlighted  
`ctrl+shift+Home` will highlight everything in the doc up to cursor  
  
`ctrl+left/right arrow` to move your 'jump' your cursor to the previous/next word on the line. Ex: you want to edit the 3th word on a line. hit `Home` then `control+rightarrow`to quickly get there    
  
`ctrl+shift+ left/right arrow` to select the whole word. if you wished to select multiple words- keep ctrl+shift  held and continue to press left/right arrow to add  
`shift+ up/down arrows` to select lines either above or below to include - (useful if you want to move those lines elsewhere with a ctrl+x to cut/paste. or just copy/paste)   
  
`ctrl+backspace` - to delete word  (cursor starts at end of word)
`ctrl + Delete` -  to delete word (cursor at start of word) can keep pressing backspace/delete in both ex to delete more than one word.  
If you wish to delete full line can - highlight the line + del [ hit home, then shift+end then delete]  
    
others:  
`ctrl` + `/` : will comment/uncomment line the curser is on. you can highlight however many lines you wish, and it will comment/uncomment all selected  
`ctrl+n` : new file   
`ctrl+o` : open file  
`ctrl+z` : undo  
`ctrl+y` : redo  
`ctrl+f` : find certain word  
`tab` : indent to the right  (can be multiple lines if multiple lines are highlighted)  
 `shift+tab` : 'unindent' or indent to the left  
`ctrl+c` : copy | `ctrl+x` cut  --> `ctrl+v` :paste  
`ctrl+a` select ALL ..selects everything  

edit:  will add a few more upon reading comments:    
 the same indent/unindent can be done with `ctrl`+`]` to indent and `ctrl`+`[` to unindent  
some shortcuts can be done in more than one way, and are more matter of preference and what feels more natural. its a perfectly fine alternative  
  
additionally- `ctrl` + `H` :Find and Replace 

can be another great one. rather than simply hit ctrl+f to find a word...find and replace not only locates the word. but offers the ability to replace that word with a different word of your choice. you can choose to replace only one instance, specify youd like to replace the next as well, or you can replace all. (maybe you spelled something wrong, or updated a name, and instead of scrolling through the entire file, to locate each instance, you simply hit CTRL+H to find the word you wish to replace, and enter the word you want to replace it with.  
its worth noting, this can get more complex with the inclusion of `regex`, so ill leave that out of this post, but any beginner who's interested in learning about regex, its incredibly helpful to know [this is one ex: that explains it](https://docs.python.org/3/library/re.html) but there are countless others. don't be discouraged when you see it. few people I know actually memorize every element of regex -  rather develop a familiarity, recognize common patterns, but don't feel discouraged if you cant memorize it all...its extremely unique to what most of youve likely seen - b4 everybody jumps in at me lol- im strictly addressing begginers here who could easily have never seen regex before- by no means feel obligated to learn it... but it quite powerful so at some point it certainly can be quite helpful. combined with CTRL + H can do some cool things  
  
lastly: [heres another nice reply](https://www.reddit.com/r/learnpython/comments/gky9cs/to_beginners_or_anyone_honestly_here_are_some/fqvgoz8/)  
now you should all know how to format your code in reddit lol. 

im sure there are others Im not thinking about. but for beginners I figured this may be helpful. feel free to add other shortcuts you like/find useful",Sí,728
em32nj,I wrote a program that allows you play Hangman with a random comment from Pornhub,2020-01-09 02:21:06,ELIMINADO,https://www.reddit.com/r/learnpython/comments/em32nj/i_wrote_a_program_that_allows_you_play_hangman/,85,"I spent a solid day working on this just to practice.

Here's the [source code](https://pastebin.com/Dfg5dzWd) compatible with python 3.8+. The third-party libraries, [bs4](https://pypi.org/project/bs4/), [requests](https://pypi.org/project/requests/), and [lxml](https://pypi.org/project/lxml/), are required to run the source code.

There's a few improvements and implementations I would like to make, but I think it's at a presentable stage. Feel free to leave a comment or suggestion on this project.

EDIT: I optimized various parts of the code and added a few features.

* Added commands. You must enter a `/` followed by the command. You can get a list of commands with `Hangman.commands.__doc__`.

* Added `prompt_vid` parameter to the `main()` function. This will prompt the player with the option to open the related video in the default web browser after a game. `prompt_vid` is set to `False`  by default.

* Added `comment_len` parameter to the `main()` function. This allows you to control the length of the comments to avoid lengthy comments. `comment_len` is set to `(5, 50)` by default.

* Made various tweaks to the code's logic for better optimization and to be made compatible with the new features.

Here's the [source code for the updated version](https://pastebin.com/G8U5Y1EG).",Sí,719
jjpq3t,"Out of curiosity, how many of you guys started your journey with 'Automate the boring stuff'?",2020-10-28 15:21:03,Friendly_Signature,https://www.reddit.com/r/learnpython/comments/jjpq3t/out_of_curiosity_how_many_of_you_guys_started/,130,"The video course has been a real 'ice breaker' for me, very glad it exists.",Sí,720
jjaf3q,Finally understand why virtual environments are so important...,2020-10-27 21:31:02,ImperatorPC,https://www.reddit.com/r/learnpython/comments/jjaf3q/finally_understand_why_virtual_environments_are/,73,"It never quite clicked to me exactly why virtual environments are so important.. until today.  I don't use python a whole lot, but use it for some automation / data processing.  I've been trying to incorporate it more leveraging 3rd party libraries.  I've generally only had a couple of projects that almost all utilized the same libraries (requests, pandas etc.)

Well, those third party libraries are potentially built using other third party libraries.  In their [setup.py](https://setup.py) file they contain the versions of those libraries they use.  Well today, I installed csvmatch and noticed it removed my dedupe library and replaced it with a much older one.  This would have broken another program I created.

Going forward I will learn how to properly use virtual environments so I don't screw up other projects.

Dumb I know, but sometimes you need to see it for yourself to truly understand how and why something works or its intention.

Thanks for coming to my ted talk.",Sí,712
m8epf6,Python helped me get a job!,2021-03-19 10:57:15,Messist11,https://www.reddit.com/r/learnpython/comments/m8epf6/python_helped_me_get_a_job/,60,"So some background: I'm an econs student who came to sg for my master's in applied econs- graduated back in June 2020 and tbh I wasn't exactly sure what I wanted to do. I got this internship offer from this crypto fund of funds based in London (quantitative investment side intern) and I just figured that I'll roll with it as well it helped pay the bills and would be a good learning experience while I look for work in sg. 

Around 9 months later - I've automated all the data collection and management work for all our funds using python. Set up multiple scripts to do bunch of fund and market monitoring tasks while also setting up scripts to generate dynamic quant templates (bunch of financial metrics) pertaining to our fund needs. Eventually got offered a starting role as an investment analyst! 

I was the only intern who could code and while I didn't have a full fledged finance background per se (all the other interns were finance majors), my python skills (albeit quite basic lol) helped me separate myself and add some unique value to the firm (it's a startup so a smaller team and no one else in the company can work with python/R) 


I just wanted to thank this subreddit tbh. I don't post often but I lurk around alot. I know it's just the start and for everyone who's just starting to get into python - stick with it. It might take a while but once you actually do an actual project that's useful for your needs - you'll finally start feeling that your hard work is worth it!",Sí,702
h0w15n,Coding sites for beginners like pythonchallenge.com,2020-06-11 09:34:11,nobody01810,https://www.reddit.com/r/learnpython/comments/h0w15n/coding_sites_for_beginners_like_pythonchallengecom/,94,I am new to programming and just completed a foundation course in Python. I just discovered pythonchallenge.com. I was wondering what other sites are their to practice and learn coding.,Sí,703
pgode2,"""Automate the Boring Stuff with Python"" online course is free to sign up for the next few days with code SEP2021FREE",2021-09-02 19:02:22,AlSweigart,https://www.reddit.com/r/learnpython/comments/pgode2/automate_the_boring_stuff_with_python_online/,90,"https://inventwithpython.com/automateudemy (This link will automatically redirect you to the latest discount code.)

You can also click this link or manually enter the code: SEP2021FREE

https://www.udemy.com/course/automate/?couponCode=SEP2021FREE

This promo code works for 3 days (I can't extend it past that). Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later. I'll change it to SEP2021FREE2 in 3 days, and that code will work for another 3 days.

Some people in India and South Africa get a **""The coupon has exceeded it's maximum possible redemptions""** error message. [Udemy advises that you contact their support if you have difficulty applying coupon codes, so click here to go to the contact form.](https://support.udemy.com/hc/en-us/requests/new?type=student)

**I'm also working on another Udemy course** that follows my recent book ""Beyond the Basic Stuff with Python"". So far I have [the first 15 of the planned 56 videos done. You can watch them for free on YouTube.](https://www.youtube.com/watch?v=kSrnLbioN6w&list=PL0-84-yl1fUmeV_2bBSguF_S0TVZk8wow&index=1)

Udemy has changed their coupon policies, and I'm now only allowed to make 3 coupon codes each month with several restrictions. Hence why each code only lasts 3 days. **I won't be able to make codes after this period**, but I will be making free codes next month. [Meanwhile, the first 15 of the course's 50 videos are free on YouTube.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

Side note: My latest book, [The Big Book of Small Python Projects](https://inventwithpython.com/bigbookpython/), is out. It's a collection of short but complete games, animations, simulations, and other programming projects. They're more than code snippets, but also simple enough for beginners/intermediates to read the source code of to figure out how they work. The book is released under a Creative Commons license, so it's free to read online. (I'll be uploading it this week when I get the time.) The projects come from this [git repo](https://github.com/asweigart/pythonstdiogames).

**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with. Check out /r/ProgrammingBuddies",Sí,702
l75ir6,I FINALLY DID IT!!,2021-01-28 19:06:47,the1whowalks,https://www.reddit.com/r/learnpython/comments/l75ir6/i_finally_did_it/,71,"After multiple attempts (over several years) to ""get"" Python, I finally did it: I built a function that is clean and useful for my job in Python.

You can find it here in a GH repo, and while I recognize it's super basic, the fact that I was able to write a program that *does something* just feels so good. This sub has been incredibly helpful in that process, along with ATBS by our lord and savior Al Sweigart.

[https://github.com/jwblackston/bazan\_lab\_projects/blob/main/movingImagingFiles.py](https://github.com/jwblackston/bazan_lab_projects/blob/main/movingImagingFiles.py)

&#x200B;

Just remember if you're stuck, find the simplest thing like reorganizing thousands of files at work, and you will quickly open the door to Python magic.

&#x200B;

\*also, please feel free to make suggestions to this program! I recognize it's basic but in the spirit of learning, I would love suggestions to make it more clean or efficient for even bigger tasks!\*

&#x200B;

P.S. ***Wow***! Reddit gold? That's a first for me. You all are so supportive and wonderful. I love this community - keep at it y'all!",Sí,697
k5k1h0,What do you automate with python at home?,2020-12-02 22:27:23,iotabadger,https://www.reddit.com/r/learnpython/comments/k5k1h0/what_do_you_automate_with_python_at_home/,378,"I'm learning python but I enjoy knowing I will be able to build a project of interest instead of following continuous tutorials which have no relevance to anything I do in life.

My job unfortunately has no benefit in using python so keen to understand of potential ideas for projects that help around home.",Sí,697
d4imc2,Anyone else learning Python to fill the time at a boring desk job?,2019-09-15 10:06:26,mystikaldanger,https://www.reddit.com/r/learnpython/comments/d4imc2/anyone_else_learning_python_to_fill_the_time_at_a/,158,"Instead of squandering the hours of downtime at my bs job on mindless Redditing , I'm learning to code. Going great so far, and I get hours of practice every weekday,

It's like a reverse bootcamp, where I'm being paid to learn development.

Can't believe I didn't think of this sooner.",Sí,695
kczpqb,Don't forget to take care of yourself,2020-12-14 15:28:29,ELIMINADO,https://www.reddit.com/r/learnpython/comments/kczpqb/dont_forget_to_take_care_of_yourself/,43,"This post is more about learning programming globally, than python specifically, but I think it fits in well here, because python is so easy to jump into, as compared to C, Java, etc.

Computers are just tools, nothing more. They're the descendant of the abacus and calculator. They can do some pretty wild stuff like massive online multiplayer games, but fundamentally, they just receive, act upon, and deliver information from one to another. Most people experience computers from graphical user interfaces (GUIs); drag, drop, copy, paste, etc. -- it's all an abstraction of receiving, acting upon, and delivering information. Programming is simply a means to explicitly instruct a computer how it should perform these processes. 

Many Bootcamps, Udemy classes, YouTube series, etc. don't discuss it in these plain terms. They often advertise an identity not functional mastery of a tool. *""Become a web developer in 6 weeks, master the latest framework in python/JS/whatever, work remotely from a beach, be financially intendent.""*  Sound familiar?

But after these sort of courses, bootcamps, etc. you find that there is so much more to learn; data structures & algorithms, for example. It's not some modular skill you can just pick up over an afternoon. It's a lifelong pursuit. And this causes people to react in one of two common ways: **(A) Conclude their learning prematurely, simply unaware of how much they don't know or (B) Become obsessed with mastering the craft and put the rest of their personality on hold.** And endless leet code / hacker rank quest begins.

It's unhealthy to put your entire identity into programming. You'll never ""master"" it. Computers are just tools to explore ideas and programming is just a vehicle to manage the specific exploration of these ideas. We'll never stop having new ideas and so our understanding of computers and programming will always change and evolve. 

As someone who worked his way into a \~semi big name DS role, I really thought ""making it"" would complete me. But to be perfectly honest, I just feel exhausted from putting my hobbies and personal relationships on hold. I'm not saying a career in DS/SWE/etc. isn't worth pursuing. But be mindful that these careers are not identities/personalities; they're just specific approaches to programming, which is a specific approach to using computers, which is in itself just a specific usage of a tool. 

This post really wasn't meant to discourage you. Rather, I just want to encourage everyone to take a little more time for themselves; don't forget to cook, exercise/meditate, maintain friendships/relationships, etc. This road might have a beginning but it certainly doesn't have an end. You're simply building familiarity with a tool as long as it suits the problems you want to solve. 

""*Everything in moderation, including moderation*"" - Oscar Wilde",Sí,688
alt3ge,I've officially started to automate parts of my job today and it feels incredible,2019-01-31 19:19:13,ELIMINADO,https://www.reddit.com/r/learnpython/comments/alt3ge/ive_officially_started_to_automate_parts_of_my/,58,"I'm a lifelong network engineer, and before November of last year I never coded or scripted a damn thing in my life. I knew python could be used for all kinds of tasks and I had been wanting to learn it since about 2016 but stayed away due to intimidation and time constraints. 

In November I got hooked on codeacademy's python course and subscribed, and supplemented it with CBT nuggets' python course. Bought Automate the Boring Stuff on amazon (which is always open and in front of my face while coding) and just started practicing concepts as laid out in the book. 

Today I successfully built a python script that SSH's in to groups of routers/switches and gets information from them, checks the information for certain values, and outputs me a list of compliant devices in a .txt... Last week i built a script that ingests 2 differen excel documents and compares them and alerts me of discrepancies between them. It took a bit of effort, but the reward has already been enormous, its amazing! 

The best part is i can use all of these little functions I've built in other, larger ways later on. Python has seriously empowered me not only in doing things for me, but in the belief that i too could achieve such knowledge apply it to my daily grind, that i too could achieve greatness!",Sí,688
gdjxm9,"Why ""a is b"" returns True if they both equal 200, but returns False if they equal 300?",2020-05-04 20:53:48,uu-three,https://www.reddit.com/r/learnpython/comments/gdjxm9/why_a_is_b_returns_true_if_they_both_equal_200/,69,"The following code would return True:

    a = 200
    b = 200
    a is b
    > True

But the following would return False:

    a = 300
    b = 300
    a is b
    > False

Why is that? What is happening under the hood? I know the switch happens at 256 -> 257 which seems odd at first sight (why not 255 -> 256?).

**EDIT:**

Never mind, I found the answer. For those interested:

>Python caches small integers, which are integers between -5 and 256. These numbers are used so frequently that it’s better for performance to already have these objects available. So these integers will be assigned at startup. Then, each time you refer to one, you’ll be referring to an object that already exists.

[https://realpython.com/lessons/small-integer-caching/](https://realpython.com/lessons/small-integer-caching/)",Sí,681
itx9dn,I just found out I've been copying lists wrong all along.,2020-09-16 15:04:16,Malkovich66,https://www.reddit.com/r/learnpython/comments/itx9dn/i_just_found_out_ive_been_copying_lists_wrong_all/,149,"In order to explain this, assume we have two lists: `some_numbers` and `other_numbers`, where

    >>> some_numbers = [1, 2, 3, 4, 5]
    >>> other_numbers = some_numbers

Many beginners would make a copy of `some_numbers` and store it in `other_numbers`, as I did above. However, what you might not know, is that when you do that you actually tell Python that they are the same list. So if you tried to add an item to `some_numbers` and then `print(other_numbers)`, you'd see that the output will include the item you added to `some_numbers`. i.e.:

    >>> some_numbers.append(10)
    >>> print(other_numbers)
    [1, 2, 3, 4, 5, 10]

If you wish to have two independent lists, where adding an item to one doesn't change the other, use this instead:

    >>> some_numbers = [1, 2, 3, 4, 5]
    >>> other_numbers = some_numbers[:]

Now, you can change the lists independently.

    >>> some_numbers.append(10)
    >>> other_numbers.append(20)
    >>> print(some_numbers)
    >>> print(other_numbers)
    [1, 2, 3, 4, 5, 10]
    [1, 2, 3, 4, 5, 20]

**Edit:** As mentioned in the comments by several people, the more readable option for copying is

    >>> some_numbers = [ 1, 2, 3, 4, 5]
    >>> other_numbers = some_numbers.copy()

&#x200B;",Sí,682
en99wc,Automate the boring stuff DOES work,2020-01-11 16:11:36,ELIMINADO,https://www.reddit.com/r/learnpython/comments/en99wc/automate_the_boring_stuff_does_work/,71,"I had been fiddling with the language for a bit until a reorganization recently changed my role.

I went from “jack  of all trades” data engineer/ support guy / DBA to site reliability engineer. My new boss tasked me to automate all the boring stuff I was in charge of so I could focus on my new engineering duties.

In over a month, my code has gotten more succinct and effective. Things “click” now as I see real world applications for it. 

All I want to say is don’t despair. Yeah things can  be tough and confusing but it helped me to apply the language in my job. Automate the boring stuff, people!!

Hang in there. You got this.

PS: I am still a newbie, no doubt.

EDIT: a word.",Sí,674
hotb02,Started Learning Python 4 months ago... Developed a lane suggestion program today,2020-07-10 17:36:40,ELIMINADO,https://www.reddit.com/r/learnpython/comments/hotb02/started_learning_python_4_months_ago_developed_a/,106,"I wanted to make this post to motivate those who don't believe in themselves. You can do it, trust me. I started learning programming for the first time about four months ago, when quarantine started. I had no prior knowledge about the subject. In fact, I didn't even start learning how to code as I had some some great interest in it -- rather, I just wanted to do an activity where I could ignore the world around me and just focus on the task at hand. Being a guy who suffered from generalized anxiety disorder and had severe impostor syndrome about math, I would have lost my mind if I didn't find that relaxing hobby.

But I found Python. I started studying each day for at least two hours. And I started falling in love with the art.

Today, 4 months after that day I started, I completed my first ""big"" project: A lane suggestion algorithm named ""Crappy Lane Detection."" My program takes the video of a road and suggests a path for a car to to travel on like [this](https://streamable.com/h7hlpz). I even made a [github](https://github.com/rpathak38/Crappy-Lane-Detection) for it, so that people could check it out and verify that I indeed did it. It really works guys, I actually did something cool. It feels amazing.

Now, to my main point of the post. If I could learn the skills needed to do this in four months, **you can too.** If I, a high school kid with severe anxiety and impostor syndrome, could do it, **you can too.** So go out there, build up your dreams, your crazy ideas; **I know you can do it.**

EDIT: Clarifying the title, I started learning Python 3, four months ago. No, there is no Python 4... yet

EDIT 2: Woah, this blew up pretty significantly. I'm overwhelmed by all the positivity I'm seeing, I'm so glad i was able to help motivate you guys :) And thank you, kind stranger, for the gold!",Sí,672
oiu06g,"Wrote my first program, fixing a Windows 10 bug, yay!",2021-07-12 15:49:52,OnkelWormsley,https://www.reddit.com/r/learnpython/comments/oiu06g/wrote_my_first_program_fixing_a_windows_10_bug_yay/,62,"Hello everyone,


I did it, reddit.


As a translator I work with three languages, so I constantly need to switch between them. Unfortunatelly, Windows 10 has a bug where the hotkeys for different languages get randomly reset, meaning I had to set these hotkeys up again several times a day, every day for the past half a year. 


I had zero experience in programming and completed one guide on python prior to creating the project in Pycharm on July 7th, and today on July 12th I've compiled a working version of my script. With it I send a command to Powershell to set the desired input language whenever I press the same hotkeys as I'm used to, while the script is running in the background. It's quite an improvement in my quality of life. When I've first launched my program and realised it works, it felt soooo satisfying.


The community here is absolutely great, I feel I can ask a question and it will be answered within 30 min. I believe this has been one of the best parts of my programming experience so far.

Cheers :)

Edit, link to the source code: https://github.com/spc-dg/input_language_switcher/blob/main/source_code.py",Sí,668
fmcp30,Pro account for Codecademy free for students due to COVID-19,2020-03-21 09:55:54,ELIMINADO,https://www.reddit.com/r/learnpython/comments/fmcp30/pro_account_for_codecademy_free_for_students_due/,70,"Currently a Pro account on Codecademy is free for anyone with a student email

Edit: As users in the comments have confirmed, you can use any fake email as long as it ends in .edu to sign up. The pro membership lasts 90 days",Sí,667
cbzb8e,"I wrote a script that downloads all your reddit saved items, and can be viewed based on subreddit. I would love feedback.",2019-07-11 18:30:57,freeezer98,https://www.reddit.com/r/learnpython/comments/cbzb8e/i_wrote_a_script_that_downloads_all_your_reddit/,95,"I'm not very new to programming but, started python this month by doing Automate the boring stuff. (author posted the free course a while ago here).

This script uses PRAW an amazing python wrapper for Reddit API. (kudos for that).

Why did I write this? Reddit is the best thing on the internet (at least for me). I've saved a lot of content but rarely had the time to go through everything. Even when I did it way harder to find posts.

Also, Reddit has a 1000 save limit.

So decided why not give it a go?

**Github:** [link](https://github.com/nooneswarup/export-archive-reddit-saved)

This is how it works:

* Download/Clone the files
* Edit the config file (more info on Github Readme)
* Install pythonv3.x and pip install PRAW
* Run the batch file or open the python file and compile.
* (Make sure to put assets(CSS and JS files) in the folder created, if it doesn't automatically copy them)

feedback/ suggestions/ critique's.

Also: Code is a clutter(Can't help with it)

Known issues can be viewed on Github Readme.

&#x200B;

EDIT: For those who asked me to post a screen recording, r/learnpython does not allow to post links/videos so you can view it [here](https://www.reddit.com/user/freeezer98/comments/ccn8dd/how_to_download_reddit_saved_posts_using_this/)

EDIT 2: CSS, JS file can be edited for much cooler designs. I'm not good at that so bear with me.

Also, it's easy to add options like is\_NSFW, is\_Gilded and many more. Incase you need anything don't hesitate to ask.",Sí,668
ebpe7u,switched over to python after studying javascript and reactjs for months. My god.. . the freedom and beauty of this language.,2019-12-17 02:27:00,pawnh4,https://www.reddit.com/r/learnpython/comments/ebpe7u/switched_over_to_python_after_studying_javascript/,133,I almost want to cry with happiness. I actually enjoy coding again.,Sí,663
qwasyj,I made a Tic-Tac-Toe game with 3642 lines of code and I'm sorry.,2021-11-17 22:34:47,M0pps,https://www.reddit.com/r/learnpython/comments/qwasyj/i_made_a_tictactoe_game_with_3642_lines_of_code/,180,"I posted on this subreddit asking for help on a tic tac toe game that was 3642 lines of code and I got flamed (in a good way).

Thank you.

I had sculped an effigy of inefficiency and I have been ushered into the world with a fresh perspective. I did my best and reduced the code by a factor of 10 to 380 lines of code. It most likely can be cleaned up further but it did the job.

Here's the code. I believe it is impossible to beat. Give it a try, if you win tell me.

Thanks for the help guys.

[https://github.com/M0pps/Tic-Tac-Toe.py.git](https://github.com/M0pps/Tic-Tac-Toe.py.git)",Sí,653
lgwfcw,My ebooks on Python intro and regular expressions are free for a week,2021-02-10 15:47:17,ASIC_SP,https://www.reddit.com/r/learnpython/comments/lgwfcw/my_ebooks_on_python_intro_and_regular_expressions/,116,"Hello!

I recently self-published my ebook titled ""**100 Page Python Intro**"". This book is a short, introductory guide for the Python programming language suited *for those who have prior experience with another programming language*. To celebrate, I'm giving away several of my books for free until 17 Feb, 2021.

## Ebook links

* **100 Page Python Intro**: [https://gumroad.com/l/100pagepythonintro](https://gumroad.com/l/100pagepythonintro) or [https://leanpub.com/100pagepythonintro](https://leanpub.com/100pagepythonintro)
* **Python re(gex)?**: [https://gumroad.com/l/py_regex](https://gumroad.com/l/py_regex) or [https://leanpub.com/py_regex](https://leanpub.com/py_regex)
* **Magical one-liners** bundle: [https://gumroad.com/l/oneliners](https://gumroad.com/l/oneliners) or [https://leanpub.com/b/oneliners](https://leanpub.com/b/oneliners)

## Web version and GitHub repo

You can also read the book online here: [https://learnbyexample.github.io/100_page_python_intro/introduction.html](https://learnbyexample.github.io/100_page_python_intro/introduction.html).

The [https://github.com/learnbyexample/100_page_python_intro](https://github.com/learnbyexample/100_page_python_intro) repo has program/example files, markdown source and other details about the book.

## Feedback

Hope you find my books useful and fun to learn from. As always, I'd highly appreciate your feedback. Please do let me know if you spot any error or typo. Happy learning :)",Sí,655
di0w1k,"NSFW, selenium program I wrote today was the most fun I’ve ever had programming",2019-10-15 01:57:33,theoriginalmathteeth,https://www.reddit.com/r/learnpython/comments/di0w1k/nsfw_selenium_program_i_wrote_today_was_the_most/,79,"I wrote a program that opened the chrome web browser, went to google.com, typed hentai porn into the search bar, submitted the search, then opened up the first video. I may not get a lot of upvotes for this program, but ive never laughed so hard while programming. If anyone wants the code I will gladly share it.

Ps. The CSS selector has the word “child” in it. If I could change the internet to remove this, I would. No one will go to jail for running this code. This is not loli stuff.


Edit: By popular demand, here is the code



    from selenium import webdriver


    driver = webdriver.Chrome(r'C:\Users\jorda\OneDrive\Desktop\chromedriver.exe')  # Optional argument, if not specified will search 
    path.


    driver.get('https://www.google.com');


     # Let the user actually see something!


    elem = driver.find_element_by_css_selector('#tsf &gt; div:nth-child(2) &gt; div.A8SBwf &gt; div.RNNXgb &gt; div &gt; div.a4bIc &gt; input')


    elem.click()


    elem.send_keys('hentai porn')


    elem.submit()


    elems = driver.find_element_by_css_selector('#rso &gt; div &gt; div &gt; div:nth-child(1) &gt; div &gt; div &gt; div.s &gt; div &gt; div &gt; a:nth- 
    child(1)')


    elems.click()


    elems1= driver.find_element_by_css_selector('body &gt; div:nth-child(8) &gt; div.content &gt; div.block-video &gt; div.video-holder &gt; 
    div.video-info &gt; div &gt; div.info-buttons &gt; div.rating-container &gt; a.rate-like &gt; i')


    elems1.click()",Sí,644
kfmwsx,"I've been coding in Python for 8 months, and I've never used a class. Is that bad?",2020-12-18 15:14:31,xdcarnagelol,https://www.reddit.com/r/learnpython/comments/kfmwsx/ive_been_coding_in_python_for_8_months_and_ive/,193,"I feel like I've never been in a scenario where I've had to use classes, or maybe I just don't know how to use them / where to use them / when to use them.  


Can anyone give an example of where they would use a class, and why they're using it?

Update: 130 days after I made this post I made my first class. I did not realize how useful they are, like holy moly!!!",Sí,638
ok45gi,Follow up from I automated my job and now I have to present it to my CTO,2021-07-14 13:17:31,CharlyWingate,https://www.reddit.com/r/learnpython/comments/ok45gi/follow_up_from_i_automated_my_job_and_now_i_have/,143,"https://www.reddit.com/r/learnpython/comments/gix1qt/i_automated_part_of_my_job_and_i_now_have_to/

&nbsp;

TLDR: Follow-up from my post a year ago asking how to present and automation to my CTO, he shits all over it and me in front of 15 people as he feels I made some big security oversites/attacked/insecure/didn't have time. I decide to move to a tech-start up I get a 27k raise, I asked for 45k and they gave me 50k because in my new company people with my skills i.e Python are typically on 50k! I then drop some key takeaways from my learning.

&nbsp;

**Long version**
&nbsp;

So about a year ago I made this post explaining that I had made a script to automate part of my job potentially saving my business about 360 hours a year. Sorry it took me so long to follow up but here's the story. 

&nbsp;

I presented the script to my CTO from start I got bad vibes the atmosphere was a bit tense there were a lot of people on the call and my CTO is from America along with the rest of the Dev team and I'm the UK meaning I had no relationship with anyone.

&nbsp;


I showed off my script and of course I started having connection issues meaning my screen share was cutting in and out which took up about 15 minutes of the hour I can see my CTO was getting pissed off. Eventually, I got the script running it went well and worked perfectly. 

&nbsp;

The CTO didn't say anything for a while whilst the other devs asked me some basic questions such as what language is this? How long have you been coding? What packages did you use? Whilst also saying that they were impressed that I had built the script in such a short time. Then the CTO finally spoke up and said ""So those files you were uploading the data output looks like real names to me? Why have you got company data on your personal laptop?"" barring in mind I couldn't install Python on my work laptop I had used data from the company and like an idiot hadn't made it into dummy data.

&nbsp;

I quickly apologised and he took the opportunity to go in on me, he completely undressed me in the call in front of everyone taking the time to explain to me why having company data on my laptop was so bad and told me to delete every single piece of company data I had whilst share screened in front of 15+ people. Barring in mind the data was only first name + first initial + email address hardly credit card details. He then asked me if my username and password to access my company website was stored in my script in plain text, I said yes because they were and he could clearly see that. He then spent another 15 minutes raising his voice explaining lamenting how dangerous that was and how my packages could be stealing that data (barring in mind I used Pandas, numpy, selenium, xlsx writer all very known packages).

&nbsp;

By this time the meeting was essentially over and I was massively deflated. My boss who supported me said that she will speak to my CTO as it wasn't right the way he spoke to me in front everyone.

After my boss spoke to the CTO he agreed to review the script, I sent it over to them and ultimately I needed their help hosting the script on the company website. After weeks of not hearing anything I chased them and they simply messaged back ""sorry we don't capacity to work on this project right now""

&nbsp;

I was pissed off I'd spent probably over 100 hours on this script by this point working obsessively, I decided to start searching for a new job.

&nbsp;

I put my Python experience on my cv and a modified version of my script on GitHub and started applying for new jobs in Tech Startups where I felt innovation and automation would be appreciated. I started getting loads of feedback and interviews, interviews I felt were honestly outside of my pay bracket and grade. The Python script gave me confidence, skills and something to talk about, interviewers in some companies really, really value a self-starter who is going to work smarter not harder.

&nbsp;

In the end, I managed to get an Operations analyst role with a tech start-up **getting a massive £27k pay rise.** It's so crazy how it happened to, my manager told me I got the job and asked me how much money I was looking for. I said £45k and she said well actually I want to bring you in on £50k as that's how much people with your skills in this company are paid! Like that is insane and shows how much value the Python skills I had picked up meant and how creating a script means your interviewers really believe that they can invest in you as you will go out of your way to learn new skills to push my role to its limits. 

&nbsp;


**For anyone looking to do automate a task at work here are my key takeaways:**
&nbsp;

1) **DO IT! Even if the company don't implement your automation**, I learnt so much more working on my project than I did watching tutorials or from coding books. You can't beat real-life problems and the motivation to solve the problem is 10x'd when it really matters. Being able to put it on your CV is worth its weight in gold too when it comes to negotiating wages.

&nbsp;

2) **Look to automate something that is completely self-efficient.** Ultimately I had embarrassed my CTO but automating something he and his team should have done years ago, so of course, he wanted to block my script the fact my automation needed to be host on the company website/intranet means he could easily block it by saying his team has too much work to do. Work on things that you control completely, make it hard for them to say no!

&nbsp;

3) **Always use dummy data** don't be stupid like me and put company data on your work laptop and if you do when it comes round to showing your script pls use dummy data and delete the data.

&nbsp;


4) **Don't get your hopes up**, I was so deflated by the rejection and harsh treatment by my CTO but you have to understand that devs and managers often have massive egos and seeing an upstart come in and write code that potentially makes them look bad means that will block your initiative out of spite, jealousy or because they don't trust you. Be prepared for rejection and have adequate responses for reasons why you think they would dismiss the project.

&nbsp;


4) **If your business doesn't value your automation look to move to a tech start-up** tech-startups love automation they will give you the access you need to make a change and enable you rather than block you. Moving to a tech startup is the best move I've ever made and I don't see myself working for a massive corporate entity ever again.

&nbsp;

5) **Don't put your username and password in plain text in your script!** this massively tripped me up and I had no response to my CTO when he called me out on this. Use something like python keyring library to encrypt your login and password so no one can catch you out as they caught me.

&nbsp;

6) **Attach a dollar value to the time saved** this meant that my direct line manager manager couldn't ignore it and could see the value instantly",Sí,638
iutuq5,Automate your daily tasks with Python,2020-09-17 22:25:30,hustlingpigeon,https://www.reddit.com/r/learnpython/comments/iutuq5/automate_your_daily_tasks_with_python/,285,"Hey.

I recently saw someone advertise that they'd be willing to help some lucky folks with automating their daily tasks.

With 8 years experience under my belt and having worked on numerous projects, I want to give back and help others. After all, that's what makes the world go round.

Please drop below some tasks that you carry out on the daily that could be automated - and, I'll help you.

Edit: there’s a whole bunch of stuff to get through, I’m not ignoring you guys. I’ll get round to you all. I’m working on some stuff now for some people, and even being paid to do it too :D thank you so much for your positive response guys, I’m so glad I can be helping some of you!!",Sí,645
147q2ax,Going dark,2023-06-12 15:41:12,ELIMINADO,https://www.reddit.com/r/learnpython/comments/147q2ax/going_dark/,226,"As a developer subreddit, why are we not going dark, and helping support our fellow developers, who get's screwed over by the latest API changes? just asking",Sí,631
i2xpkq,"After 2 months of not getting how things work in python, I just made my first working app! A Morse Code Translator!",2020-08-03 14:11:06,SarcasticHumanBeing,https://www.reddit.com/r/learnpython/comments/i2xpkq/after_2_months_of_not_getting_how_things_work_in/,51,"Hi, I just want to share my personal project. Lots and lots of referencing I did in here and Tkinter makes me want to pull my hair out. Although it's not my first program, but it's the most stable one I've ever made so far :D.

Github link: https://github.com/bajeebis/Morse-Code-Encoder-Decoder

Please take a look, I've still got a lot to learn so criticisms and feedback are welcome.",Sí,628
q7hgm8,"A beginner's take on Codewars, and why you should be using it.",2021-10-13 18:30:58,ShiningRedDwarf,https://www.reddit.com/r/learnpython/comments/q7hgm8/a_beginners_take_on_codewars_and_why_you_should/,69,"I'm a beginner -  I've only gone through the first eight chapters of Automate The Boring Stuff.

I've often seen Codewars mentioned on here, but I was far too intimidated to even think of solving problems with the little knowledge I had. But I also didn't feel like diving into the next chapter of ATBS so gave it a shot.

I've learned an amazing amount in the past week I've been solving these problems (or katas, as they're called there).

So if you're a beginner, here is my advice from a fellow n00b:

\- Don't be intimidated! The katas start off fairly easy; if you've been able to solve the practice projects from ATBS then the easiest katas shouldn't pose too much of a challenge

\-  It feels really good to apply your knowledge and solve real problems. It's a great middle step between learning syntax and starting to create your own programs.

\- You'll learn a lot. I know not everyone follows ATBS, but you'll learn a lot of really interesting , easier, and more intuitive ways to rework your code that go beyond that book. I'm pretty sure the same can be said for most introductory courses as well.  Once you've completed your kata, you can view solutions from other users.

\- Don't be put off by the answers performed in one line. At first it annoyed me and made me think I'm doing an absolutely terrible job if my 50 lines of code can be condensed into one, but apparently it's just something called code golfing, where brevity is prioritized over readability.  I find it often better to sort answers by ""Best Practice"" instead of ""Clever"" to get more helpful answers. Granted, you should look for ways to make your code more efficient, but don't think you have to strive to condense it into a single, hard to understand line.

\- After you've completed a kata, look through the solutions and strive to improve at least one aspect of your own answer, even if it's something small. For example, instead of writing out \[1,2,3,4,5,6,7,8,9,10\], I recently learned this can be also done with *list(range(1,11)).*

\- Unless you love to make your eyeballs scream in pain like a vampire exposed to sunlight,  don't press the crescent moon icon at the top.",Sí,628
aevgbi,"I wrote a book on Python Regular Expressions, it is FREE through this weekend",2019-01-11 13:38:58,ASIC_SP,https://www.reddit.com/r/learnpython/comments/aevgbi/i_wrote_a_book_on_python_regular_expressions_it/,94,"Hello!

I've just released my book on Python Regular Expressions and it is free to download till 13-Jan-2019. You can still pay if you wish :)

* e-book link: https://leanpub.com/py_regex/c/P7erPYAm1386
    * you will continue to get free updates in future, you'll need to opt-in to get notification via e-mail
* github repo: https://github.com/learnbyexample/py_regular_expressions

This book would help you learn regular expressions step by step with 200+ examples, from basics to advanced levels. In addition to **re** module that comes with standard library, the 3rd party [regex](https://pypi.org/project/regex/) module is covered as well. Exercises are also included to test your understanding.

**Table of Contents**

1. Preface
2. Why is it needed?
3. Regular Expression modules
4. Anchors
5. Alternation and Grouping
6. Escaping metacharacters
7. Dot metacharacter and Quantifiers
8. Working with matched portions
9. Character class
10. Groupings and backreferences
11. Lookarounds
12. Flags
13. Unicode
14. Miscellaneous
15. Gotchas
16. Further Reading

Hope you find the book useful. I would be grateful for your feedback and suggestions.

Happy learning :)",Sí,620
i9kwe1,"As a beginner, how can I determine if a python module is malicious?",2020-08-14 12:19:02,Digitally_Depressed,https://www.reddit.com/r/learnpython/comments/i9kwe1/as_a_beginner_how_can_i_determine_if_a_python/,72,"I was re-reading an article about two python pip modules actually being malicious and stealing SSH and GPG keys to compromise developer projects. \[[ZDNET Article](https://www.zdnet.com/article/two-malicious-python-libraries-removed-from-pypi/)\]

I also read the [discussion on r/Python](https://www.reddit.com/r/Python/comments/e639nd/two_malicious_python_libraries_caught_stealing/) and the [discussion on r/programming](https://www.reddit.com/r/programming/comments/e5rwit/two_malicious_python_libraries_caught_stealing/). However no one seemed to have asked or explained how to determine if a module is malicious. 

As a beginner, I can't look directly at the raw code of a module and understand everything that is going on but I am always looking at interesting modules from other projects and installing modules suggested by others. So what are some methods to determining if a module is malicious?

Besides monitoring my home network, I'm looking for ways to detect and prevent a malicious module before installing it.

&#x200B;

Also has one of the default libraries in python ever been discovered to be malicious? Every other article talking about malicious Python modules are modules from Pypi.",Sí,620
wk4x3w,"2,000 free sign ups available for the ""Automate the Boring Stuff with Python"" online course.",2022-08-09 14:35:21,AlSweigart,https://www.reddit.com/r/learnpython/comments/wk4x3w/2000_free_sign_ups_available_for_the_automate_the/,73,"**NOTE:** The codes are all used up. [But you can watch the first 15 of the 50 videos for free on YouTube.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW) If you want to buy the rest of the course, the https://inventwithpython.com/automateudemy link redirects to a discount code that lowers the price to $13. The course follows the info in the book, which is for free in full at https://automatetheboringstuff.com/

If you want to learn to code, I've released 2,000 free sign ups for my course following my Automate the Boring Stuff with Python book (each has 1,000 sign ups, use the other one if one is sold out):

Udemy has changed their promo code and severely limited the number of sign ups I can provide each month, so only sign up if you are reasonably certain you can eventually finish the course. [The first 15 of the course's 50 videos are free on YouTube if you want to preview them.](https://www.youtube.com/watch?v=1F_OgqRuSdI&list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW)

Instead of having unlimited free sign ups for 6 days per month, Udemy only lets me make 2,000 free sign ups per month. >:(

**NOTE: Be sure to BUY the course for $0, and not sign up for Udemy's subscription plan. The subscription plan is free for the first seven days and then they charge you. It's selected by default. If you are on a laptop and can't click the BUY checkbox, try shrinking the browser window. Some have reported it works in mobile view.**

Sometimes it takes an hour or so for the code to become active just after I create it, so if it doesn't work, go ahead and try again a while later.

Some people in India and South Africa get a **""The coupon has exceeded it's maximum possible redemptions""** error message. [Udemy advises that you contact their support if you have difficulty applying coupon codes, so click here to go to the contact form.](https://support.udemy.com/hc/en-us/requests/new?type=student)

**I'm also working on another Udemy course** that follows my recent book ""Beyond the Basic Stuff with Python"". So far I have [the first 15 of the planned 56 videos done. You can watch them for free on YouTube.](https://www.youtube.com/watch?v=kSrnLbioN6w&list=PL0-84-yl1fUmeV_2bBSguF_S0TVZk8wow&index=1)

Side note: My latest book, [The Big Book of Small Python Projects](https://inventwithpython.com/bigbookpython/), is out. It's a collection of short but complete games, animations, simulations, and other programming projects. They're more than code snippets, but also simple enough for beginners/intermediates to read the source code of to figure out how they work. The book is released under a Creative Commons license, so it's free to read online. (I'll be uploading it this week when I get the time.) The projects come from this [git repo](https://github.com/asweigart/pythonstdiogames).

**Frequently Asked Questions:** (*read this before posting questions*)

* This course is for beginners and assumes no previous programming experience, but the second half is useful for experienced programmers who want to learn about various third-party Python modules.
* If you don't have time to take the course now, that's fine. Signing up gives you lifetime access so you can work on it at your own pace.
* This Udemy course covers roughly the same content as the 1st edition book (the book has a little bit more, but all the basics are covered in the online course), which you can read for free online at https://inventwithpython.com
* The 2nd edition of Automate the Boring Stuff with Python is free online: https://automatetheboringstuff.com/2e/
* I do plan on updating the Udemy course for the second edition, but it'll take a while because I have other book projects I'm working on. If you sign up for this Udemy course, you'll get the updated content automatically once I finish it. It won't be a separate course.
* It's totally fine to start on the first edition and then read the second edition later. I'll be writing a blog post to guide first edition readers to the parts of the second edition they should read.
* I wrote a blog post to cover [what's new in the second edition](https://inventwithpython.com/blog/2019/10/07/whats-new-in-the-2nd-edition-of-automate-the-boring-stuff-with-python/)
* **You're not too old to learn to code. You don't need to be ""good at math"" to be good at coding.**
* Signing up is the first step. Actually finishing the course is the next. :) [There are several ways to get/stay motivated.](https://www.reddit.com/r/learnprogramming/wiki/faq#wiki_how_can_i_get.2Fstay_motivated_to_learn_programming.3F) I suggest getting a ""gym buddy"" to learn with. Check out /r/ProgrammingBuddies",Sí,614
fvxvf5,I wrote my first ever program and I can't stop looking at it.,2020-04-06 12:29:12,ELIMINADO,https://www.reddit.com/r/learnpython/comments/fvxvf5/i_wrote_my_first_ever_program_and_i_cant_stop/,90,"I call this one the ""Do you want to see the 99 Bottles of Beer song?"" program.

    bobotw = "" bottles of beer on the wall""
    bob = "" bottles of beer.""
    take = ""Take one down and pass it around, ""
    beer = 99

    def on_wall(beer):
        if beer == 0:
            print(""No more"" + bobotw + "", no more"" + bob)
            print(""Go to the store and buy some more, 99"" + bobotw + ""."")
        elif beer == 1:
            print(str(beer) + "" bottle of beer on the wall, "" + str(beer) + "" bottle of beer."")
            beer -= 1
            print(take + ""no more"" + bobotw + ""."")
            on_wall(beer)
        elif beer == 2:
            print(str(beer) + bobotw + "", "" + str(beer) + bob)
            beer -= 1
            print(take + ""only one bottle of beer on the wall."")
            on_wall(beer)
        else:
            print(str(beer) + bobotw + "", "" + str(beer) + bob)
            beer -= 1
            print(take + str(beer) + bobotw + ""."")
            on_wall(beer)

    answer = input(""Do you want to see the Bottles of Beer song? (y/n) : "")

    if answer.lower() == ""y"":
        on_wall(beer)
    elif answer.lower() == ""n"":
        print(""Bollocks to ya then."")
    else:
        print(""It's y for yes, n for no."")



There may be more elegant solutions, but this one is mine.",Sí,612
bhccr1,I didn’t know anything about programming three months ago and I just released my first official Python tool at my job,2019-04-25 18:52:54,ELIMINADO,https://www.reddit.com/r/learnpython/comments/bhccr1/i_didnt_know_anything_about_programming_three/,100,"I came into a great job doing tech support and didn’t know anything about programming. A month in, I saw they were doing some things manually like reading through “logs” for debugging and saw an opportunity. I told my boss of one month maybe we can automate some of this process. I didn’t give him any hard promises but said something to the effect of “let me see what I can do.”  I taught myself python for two and a half months and released a tool at work which does in 20 seconds, what used to take us sometimes up to an hour. 

Aside from everyone being super impressed and cutting down our work load by huge margins(this freeing up time for more important things), I believe it sets me apart from our other workers and shows they made a good choice bringing in new blood. A new realization has also now set in, I LOVE programming in Python. While I don’t get to program every single day due to having a family, I do dedicate a few hours a week to it and am exploring becoming a developer. 

Cheers everyone and don’t give up!

Edit

There seems to be a lot of interest in how I learned. 

I started out doing the two Microsoft classes on EdX. Every time I learned something new I immediately saw a function for it in my program. Slowly I implemented it into my program. It’s the program by the bald guy, I forget his name. He’s very boring unfortunately, but I’m very grateful to him for the information. I’m still very much a beginner programmer, but the biggest thing I have seen that helps is actually building something which solves a problem and you see how it functions by controlling the input and output. I also minimally looked at Automate the Boring Stuff, but I find that book also super useful. Another huge resource is actually reading the manuals and examples from Programiz. For example if the manual says A+B should equal C but I’m getting D then sit down and examine where I went awry. Sometimes I was stuck on a problem for a week or in one extreme case two weeks but I always figured it out and didn’t move on until I understood why I was wrong. 

Also Reddit was a huge resource.",Sí,611
aqa74u,Some Lessons from 16+ Years of Development,2019-02-13 19:11:33,RandomPantsAppear,https://www.reddit.com/r/learnpython/comments/aqa74u/some_lessons_from_16_years_of_development/,124,"Inspired by /u/ skiutoss 's post, I thought I'd add my own lessons.

Some other people probably got more from their years than I did - I started young(12-14) and I'm stubborn. But I somehow managed to bootstrap a 25+ person company, and have avoided working for anyone but myself and a few clients since I was 15. The only office I've really set foot in is the one I ran. Here are some things I've learned.

Most of this is related to SAAS services written in python.

* Your best programs and projects will be solving problems that you yourself have. If you're lucky, other people will have that problem too. If you're really lucky, they'll pay for your solution.
     * Your best libraries will be solving problems you have while programming. Write them, learn them, love them.

* Your past work is your best resource.

   * Because of how you code, you're likely to encounter similar issues. Standing examples of ""how I did this"" are tremendous resources.

   * Especially if you're a contract worker, developing your own helper libraries that each contract explicitly gives you the rights to (I offer a transferable license to my prior work, and myself ownership) is worth it's weight in gold. It grows and grows and grows.

* Don't re-invent the wheel, but don't use a dumptruck to move a toothpick just because it exists.

* Coding structure (classes, inheritance, etc) are not for your software as-is, it's for what it will become.
   * You will always be hung from your largest monolithic function.
   * When one function is made to do X and you already have a worse function to do X, the old function is to be deleted immediately.
* Misleading variable names are to be exterminated on sight.

* Consistent variable names will save you huge amounts of time, reduce bugs, and save time for coders you onboard.
     * Example: product_title in the function that determines the title, product_title in the dict it writes to a queue, product_title in the database, product_title in the json from the ajax call from the website, product_title as the javascript variable storing it on the site.

* Every piece of code should be written with a thought to how hard it will be to replace some day.

    * This is where well defined objects, microservices, and redis queues of tasks/objects shine.

* If you can't code to scale(because time constraints), code to buy yourself time to do so in the future.
    * As an example: If you are directly writing to a SQL database and it has the potential to be slow in the future, write the needed data to a redis queue and have workers execute it. When it starts to get hairy you can tick up the number of threads while you figure out how to speed up the DB or migrate to a new one.


* ""Clever"" code should be readable. If it's not, it's a detriment not a benefit. Coding is not your opportunity to show how much smarter you are than everyone else(who will have to maintain your shit)

* No, you won't remember. TODO lists and comments are vital.


* It is rare that you have a legitimate reason to be handwriting SQL queries.

* You will always need a dev environment. Develop scripts for setting them up.

* One of the greatest skills a programmer can have(especially one who works on early stage start-ups) is figuring out which corners *can* and *can't* be cut, and setting up the project to be easily fixed in the future.


* The less billing code you are writing, the better.
    * Significant issues in billing and backups are unforgivable tier errors. Clients and users will forgive downtime, they will not forgive their card being billed at random.

    * There are companies who handle things like subscriptions. Use them. Do not write your own.

* Don't just *have* backups, have an environment for testing those backups. Know how you're going to pause new incoming data when they're applied. Have a system that blows your phone the fuck up if they fail.
    * In many cases, a failed backup is a company-ender. It's that serious.

    * A master/slave configuration is not a backup. It will save you from hard drives roasting, not a sloppy ""UPDATE"" query.

    * Come to terms with the mortality of your hardware.

* Do not trust user input. Not their cookie, not their form input, and *never* their uploads. Javascript validation is for telling the user their input is wrong, not for keeping your data clean. That is done server side.",Sí,614
11kcko1,Best way to learn python?,2023-03-06 20:16:31,HBubli,https://www.reddit.com/r/learnpython/comments/11kcko1/best_way_to_learn_python/,255,What is the best way to learn python for free? I have next to zero knowledge of coding (played around with scratch and that stuff but that prob doesnt even really count).,Sí,611
